import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::EFS::AccessPoint
 */
export declare class AccessPoint extends pulumi.CustomResource {
    /**
     * Get an existing AccessPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AccessPoint;
    /**
     * Returns true if the given object is an instance of AccessPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccessPoint;
    readonly accessPointId: pulumi.Output<string>;
    readonly accessPointTags: pulumi.Output<outputs.efs.AccessPointTag[] | undefined>;
    readonly arn: pulumi.Output<string>;
    /**
     * (optional) A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
     */
    readonly clientToken: pulumi.Output<string | undefined>;
    /**
     * The ID of the EFS file system that the access point provides access to.
     */
    readonly fileSystemId: pulumi.Output<string>;
    /**
     * The operating system user and group applied to all file system requests made using the access point.
     */
    readonly posixUser: pulumi.Output<outputs.efs.AccessPointPosixUser | undefined>;
    /**
     * Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory>Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo is optional.
     */
    readonly rootDirectory: pulumi.Output<outputs.efs.AccessPointRootDirectory | undefined>;
    /**
     * Create a AccessPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPointArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a AccessPoint resource.
 */
export interface AccessPointArgs {
    accessPointTags?: pulumi.Input<pulumi.Input<inputs.efs.AccessPointTagArgs>[]>;
    /**
     * (optional) A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The ID of the EFS file system that the access point provides access to.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The operating system user and group applied to all file system requests made using the access point.
     */
    posixUser?: pulumi.Input<inputs.efs.AccessPointPosixUserArgs>;
    /**
     * Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory>Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo is optional.
     */
    rootDirectory?: pulumi.Input<inputs.efs.AccessPointRootDirectoryArgs>;
}
