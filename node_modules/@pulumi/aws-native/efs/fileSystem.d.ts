import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::EFS::FileSystem
 */
export declare class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FileSystem;
    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FileSystem;
    readonly arn: pulumi.Output<string>;
    readonly availabilityZoneName: pulumi.Output<string | undefined>;
    readonly backupPolicy: pulumi.Output<outputs.efs.FileSystemBackupPolicy | undefined>;
    /**
     * Whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request to be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. Defaults to false
     */
    readonly bypassPolicyLockoutSafetyCheck: pulumi.Output<boolean | undefined>;
    readonly encrypted: pulumi.Output<boolean | undefined>;
    readonly fileSystemId: pulumi.Output<string>;
    readonly fileSystemPolicy: pulumi.Output<any | undefined>;
    readonly fileSystemTags: pulumi.Output<outputs.efs.FileSystemElasticFileSystemTag[] | undefined>;
    readonly kmsKeyId: pulumi.Output<string | undefined>;
    readonly lifecyclePolicies: pulumi.Output<outputs.efs.FileSystemLifecyclePolicy[] | undefined>;
    readonly performanceMode: pulumi.Output<string | undefined>;
    readonly provisionedThroughputInMibps: pulumi.Output<number | undefined>;
    readonly throughputMode: pulumi.Output<string | undefined>;
    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FileSystemArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    availabilityZoneName?: pulumi.Input<string>;
    backupPolicy?: pulumi.Input<inputs.efs.FileSystemBackupPolicyArgs>;
    /**
     * Whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request to be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. Defaults to false
     */
    bypassPolicyLockoutSafetyCheck?: pulumi.Input<boolean>;
    encrypted?: pulumi.Input<boolean>;
    fileSystemPolicy?: any;
    fileSystemTags?: pulumi.Input<pulumi.Input<inputs.efs.FileSystemElasticFileSystemTagArgs>[]>;
    kmsKeyId?: pulumi.Input<string>;
    lifecyclePolicies?: pulumi.Input<pulumi.Input<inputs.efs.FileSystemLifecyclePolicyArgs>[]>;
    performanceMode?: pulumi.Input<string>;
    provisionedThroughputInMibps?: pulumi.Input<number>;
    throughputMode?: pulumi.Input<string>;
}
