import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Private certificate authority.
 */
export declare class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CertificateAuthority;
    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CertificateAuthority;
    /**
     * The Amazon Resource Name (ARN) of the certificate authority.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The base64 PEM-encoded certificate signing request (CSR) for your certificate authority certificate.
     */
    readonly certificateSigningRequest: pulumi.Output<string>;
    /**
     * Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
     */
    readonly csrExtensions: pulumi.Output<outputs.acmpca.CertificateAuthorityCsrExtensions | undefined>;
    /**
     * Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
     */
    readonly keyAlgorithm: pulumi.Output<string>;
    /**
     * KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
     */
    readonly keyStorageSecurityStandard: pulumi.Output<string | undefined>;
    /**
     * Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
     */
    readonly revocationConfiguration: pulumi.Output<outputs.acmpca.CertificateAuthorityRevocationConfiguration | undefined>;
    /**
     * Algorithm your CA uses to sign certificate requests.
     */
    readonly signingAlgorithm: pulumi.Output<string>;
    /**
     * Structure that contains X.500 distinguished name information for your CA.
     */
    readonly subject: pulumi.Output<outputs.acmpca.CertificateAuthoritySubject>;
    readonly tags: pulumi.Output<outputs.acmpca.CertificateAuthorityTag[] | undefined>;
    /**
     * The type of the certificate authority.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
     */
    csrExtensions?: pulumi.Input<inputs.acmpca.CertificateAuthorityCsrExtensionsArgs>;
    /**
     * Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
     */
    keyAlgorithm: pulumi.Input<string>;
    /**
     * KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
     */
    keyStorageSecurityStandard?: pulumi.Input<string>;
    /**
     * Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
     */
    revocationConfiguration?: pulumi.Input<inputs.acmpca.CertificateAuthorityRevocationConfigurationArgs>;
    /**
     * Algorithm your CA uses to sign certificate requests.
     */
    signingAlgorithm: pulumi.Input<string>;
    /**
     * Structure that contains X.500 distinguished name information for your CA.
     */
    subject: pulumi.Input<inputs.acmpca.CertificateAuthoritySubjectArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.acmpca.CertificateAuthorityTagArgs>[]>;
    /**
     * The type of the certificate authority.
     */
    type: pulumi.Input<string>;
}
