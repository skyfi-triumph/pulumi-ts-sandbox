import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for StateMachine
 */
export declare class StateMachine extends pulumi.CustomResource {
    /**
     * Get an existing StateMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StateMachine;
    /**
     * Returns true if the given object is an instance of StateMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StateMachine;
    readonly arn: pulumi.Output<string>;
    readonly definition: pulumi.Output<outputs.stepfunctions.StateMachineDefinition | undefined>;
    readonly definitionS3Location: pulumi.Output<outputs.stepfunctions.StateMachineS3Location | undefined>;
    readonly definitionString: pulumi.Output<string | undefined>;
    readonly definitionSubstitutions: pulumi.Output<outputs.stepfunctions.StateMachineDefinitionSubstitutions | undefined>;
    readonly loggingConfiguration: pulumi.Output<outputs.stepfunctions.StateMachineLoggingConfiguration | undefined>;
    readonly name: pulumi.Output<string>;
    readonly roleArn: pulumi.Output<string>;
    readonly stateMachineName: pulumi.Output<string | undefined>;
    readonly stateMachineType: pulumi.Output<enums.stepfunctions.StateMachineType | undefined>;
    readonly tags: pulumi.Output<outputs.stepfunctions.StateMachineTagsEntry[] | undefined>;
    readonly tracingConfiguration: pulumi.Output<outputs.stepfunctions.StateMachineTracingConfiguration | undefined>;
    /**
     * Create a StateMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateMachineArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a StateMachine resource.
 */
export interface StateMachineArgs {
    definition?: pulumi.Input<inputs.stepfunctions.StateMachineDefinitionArgs>;
    definitionS3Location?: pulumi.Input<inputs.stepfunctions.StateMachineS3LocationArgs>;
    definitionString?: pulumi.Input<string>;
    definitionSubstitutions?: pulumi.Input<inputs.stepfunctions.StateMachineDefinitionSubstitutionsArgs>;
    loggingConfiguration?: pulumi.Input<inputs.stepfunctions.StateMachineLoggingConfigurationArgs>;
    roleArn: pulumi.Input<string>;
    stateMachineName?: pulumi.Input<string>;
    stateMachineType?: pulumi.Input<enums.stepfunctions.StateMachineType>;
    tags?: pulumi.Input<pulumi.Input<inputs.stepfunctions.StateMachineTagsEntryArgs>[]>;
    tracingConfiguration?: pulumi.Input<inputs.stepfunctions.StateMachineTracingConfigurationArgs>;
}
