import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::CloudWatch::Alarm
 *
 * @deprecated Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Alarm extends pulumi.CustomResource {
    /**
     * Get an existing Alarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Alarm;
    /**
     * Returns true if the given object is an instance of Alarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Alarm;
    readonly actionsEnabled: pulumi.Output<boolean | undefined>;
    readonly alarmActions: pulumi.Output<string[] | undefined>;
    readonly alarmDescription: pulumi.Output<string | undefined>;
    readonly alarmName: pulumi.Output<string | undefined>;
    readonly arn: pulumi.Output<string>;
    readonly comparisonOperator: pulumi.Output<string>;
    readonly datapointsToAlarm: pulumi.Output<number | undefined>;
    readonly dimensions: pulumi.Output<outputs.cloudwatch.AlarmDimension[] | undefined>;
    readonly evaluateLowSampleCountPercentile: pulumi.Output<string | undefined>;
    readonly evaluationPeriods: pulumi.Output<number>;
    readonly extendedStatistic: pulumi.Output<string | undefined>;
    readonly insufficientDataActions: pulumi.Output<string[] | undefined>;
    readonly metricName: pulumi.Output<string | undefined>;
    readonly metrics: pulumi.Output<outputs.cloudwatch.AlarmMetricDataQuery[] | undefined>;
    readonly namespace: pulumi.Output<string | undefined>;
    readonly oKActions: pulumi.Output<string[] | undefined>;
    readonly period: pulumi.Output<number | undefined>;
    readonly statistic: pulumi.Output<string | undefined>;
    readonly threshold: pulumi.Output<number | undefined>;
    readonly thresholdMetricId: pulumi.Output<string | undefined>;
    readonly treatMissingData: pulumi.Output<string | undefined>;
    readonly unit: pulumi.Output<string | undefined>;
    /**
     * Create a Alarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: AlarmArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Alarm resource.
 */
export interface AlarmArgs {
    actionsEnabled?: pulumi.Input<boolean>;
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    alarmDescription?: pulumi.Input<string>;
    alarmName?: pulumi.Input<string>;
    comparisonOperator: pulumi.Input<string>;
    datapointsToAlarm?: pulumi.Input<number>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.cloudwatch.AlarmDimensionArgs>[]>;
    evaluateLowSampleCountPercentile?: pulumi.Input<string>;
    evaluationPeriods: pulumi.Input<number>;
    extendedStatistic?: pulumi.Input<string>;
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    metricName?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.cloudwatch.AlarmMetricDataQueryArgs>[]>;
    namespace?: pulumi.Input<string>;
    oKActions?: pulumi.Input<pulumi.Input<string>[]>;
    period?: pulumi.Input<number>;
    statistic?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholdMetricId?: pulumi.Input<string>;
    treatMissingData?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}
