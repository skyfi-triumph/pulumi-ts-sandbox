import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::Lightsail::Disk
 */
export declare class Disk extends pulumi.CustomResource {
    /**
     * Get an existing Disk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Disk;
    /**
     * Returns true if the given object is an instance of Disk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Disk;
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    readonly addOns: pulumi.Output<outputs.lightsail.DiskAddOn[] | undefined>;
    /**
     * Name of the attached Lightsail Instance
     */
    readonly attachedTo: pulumi.Output<string>;
    /**
     * Attachment State of the Lightsail disk
     */
    readonly attachmentState: pulumi.Output<string>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     */
    readonly availabilityZone: pulumi.Output<string | undefined>;
    readonly diskArn: pulumi.Output<string>;
    /**
     * The names to use for your new Lightsail disk.
     */
    readonly diskName: pulumi.Output<string>;
    /**
     * Iops of the Lightsail disk
     */
    readonly iops: pulumi.Output<number>;
    /**
     * Check is Disk is attached state
     */
    readonly isAttached: pulumi.Output<boolean>;
    readonly location: pulumi.Output<outputs.lightsail.DiskLocation>;
    /**
     * Path of the  attached Disk
     */
    readonly path: pulumi.Output<string>;
    /**
     * Resource type of Lightsail instance.
     */
    readonly resourceType: pulumi.Output<string>;
    /**
     * Size of the Lightsail disk
     */
    readonly sizeInGb: pulumi.Output<number>;
    /**
     * State of the Lightsail disk
     */
    readonly state: pulumi.Output<string>;
    /**
     * Support code to help identify any issues
     */
    readonly supportCode: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.lightsail.DiskTag[] | undefined>;
    /**
     * Create a Disk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Disk resource.
 */
export interface DiskArgs {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.lightsail.DiskAddOnArgs>[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The names to use for your new Lightsail disk.
     */
    diskName?: pulumi.Input<string>;
    /**
     * Size of the Lightsail disk
     */
    sizeInGb: pulumi.Input<number>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.lightsail.DiskTagArgs>[]>;
}
