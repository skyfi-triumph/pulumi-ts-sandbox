import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::Lightsail::Instance
 */
export declare class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Instance;
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Instance;
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    readonly addOns: pulumi.Output<outputs.lightsail.InstanceAddOn[] | undefined>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     */
    readonly availabilityZone: pulumi.Output<string | undefined>;
    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation to return a list of available images (or blueprints ).
     */
    readonly blueprintId: pulumi.Output<string>;
    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan (e.g., micro_1_0 ).
     */
    readonly bundleId: pulumi.Output<string>;
    readonly hardware: pulumi.Output<outputs.lightsail.InstanceHardware | undefined>;
    readonly instanceArn: pulumi.Output<string>;
    /**
     * The names to use for your new Lightsail instance.
     */
    readonly instanceName: pulumi.Output<string>;
    /**
     * Is the IP Address of the Instance is the static IP
     */
    readonly isStaticIp: pulumi.Output<boolean>;
    /**
     * The name of your key pair.
     */
    readonly keyPairName: pulumi.Output<string | undefined>;
    readonly location: pulumi.Output<outputs.lightsail.InstanceLocation | undefined>;
    readonly networking: pulumi.Output<outputs.lightsail.InstanceNetworking | undefined>;
    /**
     * Private IP Address of the Instance
     */
    readonly privateIpAddress: pulumi.Output<string>;
    /**
     * Public IP Address of the Instance
     */
    readonly publicIpAddress: pulumi.Output<string>;
    /**
     * Resource type of Lightsail instance.
     */
    readonly resourceType: pulumi.Output<string>;
    /**
     * SSH Key Name of the  Lightsail instance.
     */
    readonly sshKeyName: pulumi.Output<string>;
    readonly state: pulumi.Output<outputs.lightsail.InstanceState | undefined>;
    /**
     * Support code to help identify any issues
     */
    readonly supportCode: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.lightsail.InstanceTag[] | undefined>;
    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
     */
    readonly userData: pulumi.Output<string | undefined>;
    /**
     * Username of the  Lightsail instance.
     */
    readonly userName: pulumi.Output<string>;
    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    addOns?: pulumi.Input<pulumi.Input<inputs.lightsail.InstanceAddOnArgs>[]>;
    /**
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints operation to return a list of available images (or blueprints ).
     */
    blueprintId: pulumi.Input<string>;
    /**
     * The bundle of specification information for your virtual private server (or instance ), including the pricing plan (e.g., micro_1_0 ).
     */
    bundleId: pulumi.Input<string>;
    hardware?: pulumi.Input<inputs.lightsail.InstanceHardwareArgs>;
    /**
     * The names to use for your new Lightsail instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of your key pair.
     */
    keyPairName?: pulumi.Input<string>;
    location?: pulumi.Input<inputs.lightsail.InstanceLocationArgs>;
    networking?: pulumi.Input<inputs.lightsail.InstanceNetworkingArgs>;
    state?: pulumi.Input<inputs.lightsail.InstanceStateArgs>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.lightsail.InstanceTagArgs>[]>;
    /**
     * A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
     */
    userData?: pulumi.Input<string>;
}
