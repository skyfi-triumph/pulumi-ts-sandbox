import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for AWS::DataSync::LocationHDFS.
 */
export declare class LocationHDFS extends pulumi.CustomResource {
    /**
     * Get an existing LocationHDFS resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocationHDFS;
    /**
     * Returns true if the given object is an instance of LocationHDFS.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LocationHDFS;
    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     */
    readonly agentArns: pulumi.Output<string[] | undefined>;
    /**
     * The authentication mode used to determine identity of user.
     */
    readonly authenticationType: pulumi.Output<enums.datasync.LocationHDFSAuthenticationType | undefined>;
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     */
    readonly blockSize: pulumi.Output<number | undefined>;
    /**
     * The Base64 string representation of the Keytab file.
     */
    readonly kerberosKeytab: pulumi.Output<string | undefined>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
     */
    readonly kerberosKrb5Conf: pulumi.Output<string | undefined>;
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     */
    readonly kerberosPrincipal: pulumi.Output<string | undefined>;
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     */
    readonly kmsKeyProviderUri: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the HDFS location.
     */
    readonly locationArn: pulumi.Output<string>;
    /**
     * The URL of the HDFS location that was described.
     */
    readonly locationUri: pulumi.Output<string>;
    /**
     * An array of Name Node(s) of the HDFS location.
     */
    readonly nameNodes: pulumi.Output<outputs.datasync.LocationHDFSNameNode[] | undefined>;
    readonly qopConfiguration: pulumi.Output<outputs.datasync.LocationHDFSQopConfiguration | undefined>;
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     */
    readonly replicationFactor: pulumi.Output<number | undefined>;
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     */
    readonly simpleUser: pulumi.Output<string | undefined>;
    /**
     * The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
     */
    readonly subdirectory: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.datasync.LocationHDFSTag[] | undefined>;
    /**
     * Create a LocationHDFS resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LocationHDFSArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LocationHDFS resource.
 */
export interface LocationHDFSArgs {
    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     */
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication mode used to determine identity of user.
     */
    authenticationType?: pulumi.Input<enums.datasync.LocationHDFSAuthenticationType>;
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * The Base64 string representation of the Keytab file.
     */
    kerberosKeytab?: pulumi.Input<string>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
     */
    kerberosKrb5Conf?: pulumi.Input<string>;
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     */
    kerberosPrincipal?: pulumi.Input<string>;
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     */
    kmsKeyProviderUri?: pulumi.Input<string>;
    /**
     * An array of Name Node(s) of the HDFS location.
     */
    nameNodes?: pulumi.Input<pulumi.Input<inputs.datasync.LocationHDFSNameNodeArgs>[]>;
    qopConfiguration?: pulumi.Input<inputs.datasync.LocationHDFSQopConfigurationArgs>;
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     */
    simpleUser?: pulumi.Input<string>;
    /**
     * The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.datasync.LocationHDFSTagArgs>[]>;
}
