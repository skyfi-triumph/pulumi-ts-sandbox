"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationHDFS = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::DataSync::LocationHDFS.
 */
class LocationHDFS extends pulumi.CustomResource {
    /**
     * Create a LocationHDFS resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["agentArns"] = args ? args.agentArns : undefined;
            inputs["authenticationType"] = args ? args.authenticationType : undefined;
            inputs["blockSize"] = args ? args.blockSize : undefined;
            inputs["kerberosKeytab"] = args ? args.kerberosKeytab : undefined;
            inputs["kerberosKrb5Conf"] = args ? args.kerberosKrb5Conf : undefined;
            inputs["kerberosPrincipal"] = args ? args.kerberosPrincipal : undefined;
            inputs["kmsKeyProviderUri"] = args ? args.kmsKeyProviderUri : undefined;
            inputs["nameNodes"] = args ? args.nameNodes : undefined;
            inputs["qopConfiguration"] = args ? args.qopConfiguration : undefined;
            inputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            inputs["simpleUser"] = args ? args.simpleUser : undefined;
            inputs["subdirectory"] = args ? args.subdirectory : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["locationArn"] = undefined /*out*/;
            inputs["locationUri"] = undefined /*out*/;
        }
        else {
            inputs["agentArns"] = undefined /*out*/;
            inputs["authenticationType"] = undefined /*out*/;
            inputs["blockSize"] = undefined /*out*/;
            inputs["kerberosKeytab"] = undefined /*out*/;
            inputs["kerberosKrb5Conf"] = undefined /*out*/;
            inputs["kerberosPrincipal"] = undefined /*out*/;
            inputs["kmsKeyProviderUri"] = undefined /*out*/;
            inputs["locationArn"] = undefined /*out*/;
            inputs["locationUri"] = undefined /*out*/;
            inputs["nameNodes"] = undefined /*out*/;
            inputs["qopConfiguration"] = undefined /*out*/;
            inputs["replicationFactor"] = undefined /*out*/;
            inputs["simpleUser"] = undefined /*out*/;
            inputs["subdirectory"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LocationHDFS.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LocationHDFS resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new LocationHDFS(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LocationHDFS.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationHDFS.__pulumiType;
    }
}
exports.LocationHDFS = LocationHDFS;
/** @internal */
LocationHDFS.__pulumiType = 'aws-native:datasync:LocationHDFS';
//# sourceMappingURL=locationHDFS.js.map