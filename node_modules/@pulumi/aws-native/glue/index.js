"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./classifier"), exports);
__exportStar(require("./connection"), exports);
__exportStar(require("./crawler"), exports);
__exportStar(require("./dataCatalogEncryptionSettings"), exports);
__exportStar(require("./database"), exports);
__exportStar(require("./devEndpoint"), exports);
__exportStar(require("./job"), exports);
__exportStar(require("./mltransform"), exports);
__exportStar(require("./partition"), exports);
__exportStar(require("./registry"), exports);
__exportStar(require("./schema"), exports);
__exportStar(require("./schemaVersion"), exports);
__exportStar(require("./schemaVersionMetadata"), exports);
__exportStar(require("./securityConfiguration"), exports);
__exportStar(require("./table"), exports);
__exportStar(require("./trigger"), exports);
__exportStar(require("./workflow"), exports);
// Export enums:
__exportStar(require("../types/enums/glue"), exports);
// Import resources to register:
const classifier_1 = require("./classifier");
const connection_1 = require("./connection");
const crawler_1 = require("./crawler");
const dataCatalogEncryptionSettings_1 = require("./dataCatalogEncryptionSettings");
const database_1 = require("./database");
const devEndpoint_1 = require("./devEndpoint");
const job_1 = require("./job");
const mltransform_1 = require("./mltransform");
const partition_1 = require("./partition");
const registry_1 = require("./registry");
const schema_1 = require("./schema");
const schemaVersion_1 = require("./schemaVersion");
const schemaVersionMetadata_1 = require("./schemaVersionMetadata");
const securityConfiguration_1 = require("./securityConfiguration");
const table_1 = require("./table");
const trigger_1 = require("./trigger");
const workflow_1 = require("./workflow");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:glue:Classifier":
                return new classifier_1.Classifier(name, undefined, { urn });
            case "aws-native:glue:Connection":
                return new connection_1.Connection(name, undefined, { urn });
            case "aws-native:glue:Crawler":
                return new crawler_1.Crawler(name, undefined, { urn });
            case "aws-native:glue:DataCatalogEncryptionSettings":
                return new dataCatalogEncryptionSettings_1.DataCatalogEncryptionSettings(name, undefined, { urn });
            case "aws-native:glue:Database":
                return new database_1.Database(name, undefined, { urn });
            case "aws-native:glue:DevEndpoint":
                return new devEndpoint_1.DevEndpoint(name, undefined, { urn });
            case "aws-native:glue:Job":
                return new job_1.Job(name, undefined, { urn });
            case "aws-native:glue:MLTransform":
                return new mltransform_1.MLTransform(name, undefined, { urn });
            case "aws-native:glue:Partition":
                return new partition_1.Partition(name, undefined, { urn });
            case "aws-native:glue:Registry":
                return new registry_1.Registry(name, undefined, { urn });
            case "aws-native:glue:Schema":
                return new schema_1.Schema(name, undefined, { urn });
            case "aws-native:glue:SchemaVersion":
                return new schemaVersion_1.SchemaVersion(name, undefined, { urn });
            case "aws-native:glue:SchemaVersionMetadata":
                return new schemaVersionMetadata_1.SchemaVersionMetadata(name, undefined, { urn });
            case "aws-native:glue:SecurityConfiguration":
                return new securityConfiguration_1.SecurityConfiguration(name, undefined, { urn });
            case "aws-native:glue:Table":
                return new table_1.Table(name, undefined, { urn });
            case "aws-native:glue:Trigger":
                return new trigger_1.Trigger(name, undefined, { urn });
            case "aws-native:glue:Workflow":
                return new workflow_1.Workflow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "glue", _module);
//# sourceMappingURL=index.js.map