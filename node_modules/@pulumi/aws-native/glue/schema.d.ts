import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * This resource represents a schema of Glue Schema Registry.
 */
export declare class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Schema;
    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Schema;
    /**
     * Amazon Resource Name for the Schema.
     */
    readonly arn: pulumi.Output<string>;
    readonly checkpointVersion: pulumi.Output<outputs.glue.SchemaVersion | undefined>;
    /**
     * Compatibility setting for the schema.
     */
    readonly compatibility: pulumi.Output<enums.glue.SchemaCompatibility>;
    /**
     * Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'
     */
    readonly dataFormat: pulumi.Output<enums.glue.SchemaDataFormat>;
    /**
     * A description of the schema. If description is not provided, there will not be any default value for this.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Represents the version ID associated with the initial schema version.
     */
    readonly initialSchemaVersionId: pulumi.Output<string>;
    /**
     * Name of the schema.
     */
    readonly name: pulumi.Output<string>;
    readonly registry: pulumi.Output<outputs.glue.SchemaRegistry | undefined>;
    /**
     * Definition for the initial schema version in plain-text.
     */
    readonly schemaDefinition: pulumi.Output<string>;
    /**
     * List of tags to tag the schema
     */
    readonly tags: pulumi.Output<outputs.glue.SchemaTag[] | undefined>;
    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    checkpointVersion?: pulumi.Input<inputs.glue.SchemaVersionArgs>;
    /**
     * Compatibility setting for the schema.
     */
    compatibility: pulumi.Input<enums.glue.SchemaCompatibility>;
    /**
     * Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'
     */
    dataFormat: pulumi.Input<enums.glue.SchemaDataFormat>;
    /**
     * A description of the schema. If description is not provided, there will not be any default value for this.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the schema.
     */
    name?: pulumi.Input<string>;
    registry?: pulumi.Input<inputs.glue.SchemaRegistryArgs>;
    /**
     * Definition for the initial schema version in plain-text.
     */
    schemaDefinition: pulumi.Input<string>;
    /**
     * List of tags to tag the schema
     */
    tags?: pulumi.Input<pulumi.Input<inputs.glue.SchemaTagArgs>[]>;
}
