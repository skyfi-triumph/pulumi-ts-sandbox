"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RulesetThresholdUnit = exports.RulesetThresholdType = exports.ProjectSampleType = exports.JobValidationMode = exports.JobType = exports.JobSampleMode = exports.JobOutputFormat = exports.JobOutputCompressionFormat = exports.JobLogSubscription = exports.JobEncryptionMode = exports.JobDatabaseOutputDatabaseOutputMode = exports.DatasetParameterType = exports.DatasetFormat = exports.DatasetFilesLimitOrderedBy = exports.DatasetFilesLimitOrder = void 0;
exports.DatasetFilesLimitOrder = {
    Ascending: "ASCENDING",
    Descending: "DESCENDING",
};
exports.DatasetFilesLimitOrderedBy = {
    LastModifiedDate: "LAST_MODIFIED_DATE",
};
exports.DatasetFormat = {
    Csv: "CSV",
    Json: "JSON",
    Parquet: "PARQUET",
    Excel: "EXCEL",
};
exports.DatasetParameterType = {
    String: "String",
    Number: "Number",
    Datetime: "Datetime",
};
exports.JobDatabaseOutputDatabaseOutputMode = {
    NewTable: "NEW_TABLE",
};
exports.JobEncryptionMode = {
    SseKms: "SSE-KMS",
    SseS3: "SSE-S3",
};
exports.JobLogSubscription = {
    Enable: "ENABLE",
    Disable: "DISABLE",
};
exports.JobOutputCompressionFormat = {
    Gzip: "GZIP",
    Lz4: "LZ4",
    Snappy: "SNAPPY",
    Bzip2: "BZIP2",
    Deflate: "DEFLATE",
    Lzo: "LZO",
    Brotli: "BROTLI",
    Zstd: "ZSTD",
    Zlib: "ZLIB",
};
exports.JobOutputFormat = {
    Csv: "CSV",
    Json: "JSON",
    Parquet: "PARQUET",
    Glueparquet: "GLUEPARQUET",
    Avro: "AVRO",
    Orc: "ORC",
    Xml: "XML",
    Tableauhyper: "TABLEAUHYPER",
};
exports.JobSampleMode = {
    FullDataset: "FULL_DATASET",
    CustomRows: "CUSTOM_ROWS",
};
exports.JobType = {
    Profile: "PROFILE",
    Recipe: "RECIPE",
};
exports.JobValidationMode = {
    CheckAll: "CHECK_ALL",
};
exports.ProjectSampleType = {
    FirstN: "FIRST_N",
    LastN: "LAST_N",
    Random: "RANDOM",
};
exports.RulesetThresholdType = {
    GreaterThanOrEqual: "GREATER_THAN_OR_EQUAL",
    LessThanOrEqual: "LESS_THAN_OR_EQUAL",
    GreaterThan: "GREATER_THAN",
    LessThan: "LESS_THAN",
};
exports.RulesetThresholdUnit = {
    Count: "COUNT",
    Percentage: "PERCENTAGE",
};
//# sourceMappingURL=index.js.map