export declare const DatasetFilesLimitOrder: {
    readonly Ascending: "ASCENDING";
    readonly Descending: "DESCENDING";
};
/**
 * Order
 */
export declare type DatasetFilesLimitOrder = (typeof DatasetFilesLimitOrder)[keyof typeof DatasetFilesLimitOrder];
export declare const DatasetFilesLimitOrderedBy: {
    readonly LastModifiedDate: "LAST_MODIFIED_DATE";
};
/**
 * Ordered by
 */
export declare type DatasetFilesLimitOrderedBy = (typeof DatasetFilesLimitOrderedBy)[keyof typeof DatasetFilesLimitOrderedBy];
export declare const DatasetFormat: {
    readonly Csv: "CSV";
    readonly Json: "JSON";
    readonly Parquet: "PARQUET";
    readonly Excel: "EXCEL";
};
/**
 * Dataset format
 */
export declare type DatasetFormat = (typeof DatasetFormat)[keyof typeof DatasetFormat];
export declare const DatasetParameterType: {
    readonly String: "String";
    readonly Number: "Number";
    readonly Datetime: "Datetime";
};
/**
 * Parameter type
 */
export declare type DatasetParameterType = (typeof DatasetParameterType)[keyof typeof DatasetParameterType];
export declare const JobDatabaseOutputDatabaseOutputMode: {
    readonly NewTable: "NEW_TABLE";
};
/**
 * Database table name
 */
export declare type JobDatabaseOutputDatabaseOutputMode = (typeof JobDatabaseOutputDatabaseOutputMode)[keyof typeof JobDatabaseOutputDatabaseOutputMode];
export declare const JobEncryptionMode: {
    readonly SseKms: "SSE-KMS";
    readonly SseS3: "SSE-S3";
};
/**
 * Encryption mode
 */
export declare type JobEncryptionMode = (typeof JobEncryptionMode)[keyof typeof JobEncryptionMode];
export declare const JobLogSubscription: {
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
};
/**
 * Log subscription
 */
export declare type JobLogSubscription = (typeof JobLogSubscription)[keyof typeof JobLogSubscription];
export declare const JobOutputCompressionFormat: {
    readonly Gzip: "GZIP";
    readonly Lz4: "LZ4";
    readonly Snappy: "SNAPPY";
    readonly Bzip2: "BZIP2";
    readonly Deflate: "DEFLATE";
    readonly Lzo: "LZO";
    readonly Brotli: "BROTLI";
    readonly Zstd: "ZSTD";
    readonly Zlib: "ZLIB";
};
export declare type JobOutputCompressionFormat = (typeof JobOutputCompressionFormat)[keyof typeof JobOutputCompressionFormat];
export declare const JobOutputFormat: {
    readonly Csv: "CSV";
    readonly Json: "JSON";
    readonly Parquet: "PARQUET";
    readonly Glueparquet: "GLUEPARQUET";
    readonly Avro: "AVRO";
    readonly Orc: "ORC";
    readonly Xml: "XML";
    readonly Tableauhyper: "TABLEAUHYPER";
};
export declare type JobOutputFormat = (typeof JobOutputFormat)[keyof typeof JobOutputFormat];
export declare const JobSampleMode: {
    readonly FullDataset: "FULL_DATASET";
    readonly CustomRows: "CUSTOM_ROWS";
};
/**
 * Sample configuration mode for profile jobs.
 */
export declare type JobSampleMode = (typeof JobSampleMode)[keyof typeof JobSampleMode];
export declare const JobType: {
    readonly Profile: "PROFILE";
    readonly Recipe: "RECIPE";
};
/**
 * Job type
 */
export declare type JobType = (typeof JobType)[keyof typeof JobType];
export declare const JobValidationMode: {
    readonly CheckAll: "CHECK_ALL";
};
export declare type JobValidationMode = (typeof JobValidationMode)[keyof typeof JobValidationMode];
export declare const ProjectSampleType: {
    readonly FirstN: "FIRST_N";
    readonly LastN: "LAST_N";
    readonly Random: "RANDOM";
};
/**
 * Sample type
 */
export declare type ProjectSampleType = (typeof ProjectSampleType)[keyof typeof ProjectSampleType];
export declare const RulesetThresholdType: {
    readonly GreaterThanOrEqual: "GREATER_THAN_OR_EQUAL";
    readonly LessThanOrEqual: "LESS_THAN_OR_EQUAL";
    readonly GreaterThan: "GREATER_THAN";
    readonly LessThan: "LESS_THAN";
};
/**
 * Threshold type for a rule
 */
export declare type RulesetThresholdType = (typeof RulesetThresholdType)[keyof typeof RulesetThresholdType];
export declare const RulesetThresholdUnit: {
    readonly Count: "COUNT";
    readonly Percentage: "PERCENTAGE";
};
/**
 * Threshold unit for a rule
 */
export declare type RulesetThresholdUnit = (typeof RulesetThresholdUnit)[keyof typeof RulesetThresholdUnit];
