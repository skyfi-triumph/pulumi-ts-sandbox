export declare const CapacityProviderAutoScalingGroupProviderManagedTerminationProtection: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
export declare type CapacityProviderAutoScalingGroupProviderManagedTerminationProtection = (typeof CapacityProviderAutoScalingGroupProviderManagedTerminationProtection)[keyof typeof CapacityProviderAutoScalingGroupProviderManagedTerminationProtection];
export declare const CapacityProviderManagedScalingStatus: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
export declare type CapacityProviderManagedScalingStatus = (typeof CapacityProviderManagedScalingStatus)[keyof typeof CapacityProviderManagedScalingStatus];
export declare const ClusterCapacityProviderAssociationsCapacityProvider: {
    readonly Fargate: "FARGATE";
    readonly FargateSpot: "FARGATE_SPOT";
};
export declare type ClusterCapacityProviderAssociationsCapacityProvider = (typeof ClusterCapacityProviderAssociationsCapacityProvider)[keyof typeof ClusterCapacityProviderAssociationsCapacityProvider];
export declare const ServiceAwsVpcConfigurationAssignPublicIp: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
export declare type ServiceAwsVpcConfigurationAssignPublicIp = (typeof ServiceAwsVpcConfigurationAssignPublicIp)[keyof typeof ServiceAwsVpcConfigurationAssignPublicIp];
export declare const ServiceDeploymentControllerType: {
    readonly CodeDeploy: "CODE_DEPLOY";
    readonly Ecs: "ECS";
    readonly External: "EXTERNAL";
};
export declare type ServiceDeploymentControllerType = (typeof ServiceDeploymentControllerType)[keyof typeof ServiceDeploymentControllerType];
export declare const ServiceLaunchType: {
    readonly Ec2: "EC2";
    readonly Fargate: "FARGATE";
    readonly External: "EXTERNAL";
};
export declare type ServiceLaunchType = (typeof ServiceLaunchType)[keyof typeof ServiceLaunchType];
export declare const ServicePlacementConstraintType: {
    readonly DistinctInstance: "distinctInstance";
    readonly MemberOf: "memberOf";
};
export declare type ServicePlacementConstraintType = (typeof ServicePlacementConstraintType)[keyof typeof ServicePlacementConstraintType];
export declare const ServicePlacementStrategyType: {
    readonly Binpack: "binpack";
    readonly Random: "random";
    readonly Spread: "spread";
};
export declare type ServicePlacementStrategyType = (typeof ServicePlacementStrategyType)[keyof typeof ServicePlacementStrategyType];
export declare const ServicePropagateTags: {
    readonly Service: "SERVICE";
    readonly TaskDefinition: "TASK_DEFINITION";
};
export declare type ServicePropagateTags = (typeof ServicePropagateTags)[keyof typeof ServicePropagateTags];
export declare const ServiceSchedulingStrategy: {
    readonly Daemon: "DAEMON";
    readonly Replica: "REPLICA";
};
export declare type ServiceSchedulingStrategy = (typeof ServiceSchedulingStrategy)[keyof typeof ServiceSchedulingStrategy];
export declare const TaskDefinitionAuthorizationConfigIAM: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export declare type TaskDefinitionAuthorizationConfigIAM = (typeof TaskDefinitionAuthorizationConfigIAM)[keyof typeof TaskDefinitionAuthorizationConfigIAM];
export declare const TaskDefinitionEFSVolumeConfigurationTransitEncryption: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export declare type TaskDefinitionEFSVolumeConfigurationTransitEncryption = (typeof TaskDefinitionEFSVolumeConfigurationTransitEncryption)[keyof typeof TaskDefinitionEFSVolumeConfigurationTransitEncryption];
export declare const TaskSetAwsVpcConfigurationAssignPublicIp: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
/**
 * Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
 */
export declare type TaskSetAwsVpcConfigurationAssignPublicIp = (typeof TaskSetAwsVpcConfigurationAssignPublicIp)[keyof typeof TaskSetAwsVpcConfigurationAssignPublicIp];
export declare const TaskSetLaunchType: {
    readonly Ec2: "EC2";
    readonly Fargate: "FARGATE";
};
/**
 * The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
 */
export declare type TaskSetLaunchType = (typeof TaskSetLaunchType)[keyof typeof TaskSetLaunchType];
export declare const TaskSetScaleUnit: {
    readonly Percent: "PERCENT";
};
/**
 * The unit of measure for the scale value.
 */
export declare type TaskSetScaleUnit = (typeof TaskSetScaleUnit)[keyof typeof TaskSetScaleUnit];
