export declare const AnalysisErrorType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly ParameterValueIncompatible: "PARAMETER_VALUE_INCOMPATIBLE";
    readonly ParameterTypeInvalid: "PARAMETER_TYPE_INVALID";
    readonly ParameterNotFound: "PARAMETER_NOT_FOUND";
    readonly ColumnTypeMismatch: "COLUMN_TYPE_MISMATCH";
    readonly ColumnGeographicRoleMismatch: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
    readonly ColumnReplacementMissing: "COLUMN_REPLACEMENT_MISSING";
};
export declare type AnalysisErrorType = (typeof AnalysisErrorType)[keyof typeof AnalysisErrorType];
export declare const AnalysisResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export declare type AnalysisResourceStatus = (typeof AnalysisResourceStatus)[keyof typeof AnalysisResourceStatus];
export declare const DashboardBehavior: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export declare type DashboardBehavior = (typeof DashboardBehavior)[keyof typeof DashboardBehavior];
export declare const DashboardErrorType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly ParameterValueIncompatible: "PARAMETER_VALUE_INCOMPATIBLE";
    readonly ParameterTypeInvalid: "PARAMETER_TYPE_INVALID";
    readonly ParameterNotFound: "PARAMETER_NOT_FOUND";
    readonly ColumnTypeMismatch: "COLUMN_TYPE_MISMATCH";
    readonly ColumnGeographicRoleMismatch: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
    readonly ColumnReplacementMissing: "COLUMN_REPLACEMENT_MISSING";
};
export declare type DashboardErrorType = (typeof DashboardErrorType)[keyof typeof DashboardErrorType];
export declare const DashboardResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export declare type DashboardResourceStatus = (typeof DashboardResourceStatus)[keyof typeof DashboardResourceStatus];
export declare const DashboardUIState: {
    readonly Expanded: "EXPANDED";
    readonly Collapsed: "COLLAPSED";
};
export declare type DashboardUIState = (typeof DashboardUIState)[keyof typeof DashboardUIState];
export declare const DataSetColumnDataType: {
    readonly String: "STRING";
    readonly Integer: "INTEGER";
    readonly Decimal: "DECIMAL";
    readonly Datetime: "DATETIME";
};
export declare type DataSetColumnDataType = (typeof DataSetColumnDataType)[keyof typeof DataSetColumnDataType];
export declare const DataSetGeoSpatialCountryCode: {
    readonly Us: "US";
};
export declare type DataSetGeoSpatialCountryCode = (typeof DataSetGeoSpatialCountryCode)[keyof typeof DataSetGeoSpatialCountryCode];
export declare const DataSetImportMode: {
    readonly Spice: "SPICE";
    readonly DirectQuery: "DIRECT_QUERY";
};
export declare type DataSetImportMode = (typeof DataSetImportMode)[keyof typeof DataSetImportMode];
export declare const DataSetRowLevelPermissionFormatVersion: {
    readonly Version1: "VERSION_1";
    readonly Version2: "VERSION_2";
};
export declare type DataSetRowLevelPermissionFormatVersion = (typeof DataSetRowLevelPermissionFormatVersion)[keyof typeof DataSetRowLevelPermissionFormatVersion];
export declare const DataSetRowLevelPermissionPolicy: {
    readonly GrantAccess: "GRANT_ACCESS";
    readonly DenyAccess: "DENY_ACCESS";
};
export declare type DataSetRowLevelPermissionPolicy = (typeof DataSetRowLevelPermissionPolicy)[keyof typeof DataSetRowLevelPermissionPolicy];
export declare const DataSourceErrorInfoType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly CopySourceNotFound: "COPY_SOURCE_NOT_FOUND";
    readonly Timeout: "TIMEOUT";
    readonly EngineVersionNotSupported: "ENGINE_VERSION_NOT_SUPPORTED";
    readonly UnknownHost: "UNKNOWN_HOST";
    readonly GenericSqlFailure: "GENERIC_SQL_FAILURE";
    readonly Conflict: "CONFLICT";
    readonly Unknown: "UNKNOWN";
};
export declare type DataSourceErrorInfoType = (typeof DataSourceErrorInfoType)[keyof typeof DataSourceErrorInfoType];
export declare const DataSourceResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export declare type DataSourceResourceStatus = (typeof DataSourceResourceStatus)[keyof typeof DataSourceResourceStatus];
export declare const DataSourceType: {
    readonly AdobeAnalytics: "ADOBE_ANALYTICS";
    readonly AmazonElasticsearch: "AMAZON_ELASTICSEARCH";
    readonly AmazonOpensearch: "AMAZON_OPENSEARCH";
    readonly Athena: "ATHENA";
    readonly Aurora: "AURORA";
    readonly AuroraPostgresql: "AURORA_POSTGRESQL";
    readonly AwsIotAnalytics: "AWS_IOT_ANALYTICS";
    readonly Github: "GITHUB";
    readonly Jira: "JIRA";
    readonly Mariadb: "MARIADB";
    readonly Mysql: "MYSQL";
    readonly Oracle: "ORACLE";
    readonly Postgresql: "POSTGRESQL";
    readonly Presto: "PRESTO";
    readonly Redshift: "REDSHIFT";
    readonly S3: "S3";
    readonly Salesforce: "SALESFORCE";
    readonly Servicenow: "SERVICENOW";
    readonly Snowflake: "SNOWFLAKE";
    readonly Spark: "SPARK";
    readonly Sqlserver: "SQLSERVER";
    readonly Teradata: "TERADATA";
    readonly Twitter: "TWITTER";
    readonly Timestream: "TIMESTREAM";
};
export declare type DataSourceType = (typeof DataSourceType)[keyof typeof DataSourceType];
export declare const TemplateErrorType: {
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly AccessDenied: "ACCESS_DENIED";
};
export declare type TemplateErrorType = (typeof TemplateErrorType)[keyof typeof TemplateErrorType];
export declare const TemplateResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export declare type TemplateResourceStatus = (typeof TemplateResourceStatus)[keyof typeof TemplateResourceStatus];
export declare const ThemeErrorType: {
    readonly InternalFailure: "INTERNAL_FAILURE";
};
export declare type ThemeErrorType = (typeof ThemeErrorType)[keyof typeof ThemeErrorType];
export declare const ThemeResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export declare type ThemeResourceStatus = (typeof ThemeResourceStatus)[keyof typeof ThemeResourceStatus];
export declare const ThemeType: {
    readonly Quicksight: "QUICKSIGHT";
    readonly Custom: "CUSTOM";
    readonly All: "ALL";
};
export declare type ThemeType = (typeof ThemeType)[keyof typeof ThemeType];
