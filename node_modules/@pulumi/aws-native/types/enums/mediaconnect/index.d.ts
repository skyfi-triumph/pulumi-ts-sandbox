export declare const FlowEncryptionAlgorithm: {
    readonly Aes128: "aes128";
    readonly Aes192: "aes192";
    readonly Aes256: "aes256";
};
/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export declare type FlowEncryptionAlgorithm = (typeof FlowEncryptionAlgorithm)[keyof typeof FlowEncryptionAlgorithm];
export declare const FlowEncryptionKeyType: {
    readonly Speke: "speke";
    readonly StaticKey: "static-key";
    readonly SrtPassword: "srt-password";
};
/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export declare type FlowEncryptionKeyType = (typeof FlowEncryptionKeyType)[keyof typeof FlowEncryptionKeyType];
export declare const FlowEntitlementEncryptionAlgorithm: {
    readonly Aes128: "aes128";
    readonly Aes192: "aes192";
    readonly Aes256: "aes256";
};
/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export declare type FlowEntitlementEncryptionAlgorithm = (typeof FlowEntitlementEncryptionAlgorithm)[keyof typeof FlowEntitlementEncryptionAlgorithm];
export declare const FlowEntitlementEncryptionKeyType: {
    readonly Speke: "speke";
    readonly StaticKey: "static-key";
};
/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export declare type FlowEntitlementEncryptionKeyType = (typeof FlowEntitlementEncryptionKeyType)[keyof typeof FlowEntitlementEncryptionKeyType];
export declare const FlowEntitlementEntitlementStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 *  An indication of whether the entitlement is enabled.
 */
export declare type FlowEntitlementEntitlementStatus = (typeof FlowEntitlementEntitlementStatus)[keyof typeof FlowEntitlementEntitlementStatus];
export declare const FlowFailoverConfigState: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export declare type FlowFailoverConfigState = (typeof FlowFailoverConfigState)[keyof typeof FlowFailoverConfigState];
export declare const FlowOutputEncryptionAlgorithm: {
    readonly Aes128: "aes128";
    readonly Aes192: "aes192";
    readonly Aes256: "aes256";
};
/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export declare type FlowOutputEncryptionAlgorithm = (typeof FlowOutputEncryptionAlgorithm)[keyof typeof FlowOutputEncryptionAlgorithm];
export declare const FlowOutputEncryptionKeyType: {
    readonly StaticKey: "static-key";
    readonly SrtPassword: "srt-password";
};
/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export declare type FlowOutputEncryptionKeyType = (typeof FlowOutputEncryptionKeyType)[keyof typeof FlowOutputEncryptionKeyType];
export declare const FlowOutputProtocol: {
    readonly ZixiPush: "zixi-push";
    readonly RtpFec: "rtp-fec";
    readonly Rtp: "rtp";
    readonly ZixiPull: "zixi-pull";
    readonly Rist: "rist";
    readonly SrtListener: "srt-listener";
};
/**
 * The protocol that is used by the source or output.
 */
export declare type FlowOutputProtocol = (typeof FlowOutputProtocol)[keyof typeof FlowOutputProtocol];
export declare const FlowSourceEncryptionAlgorithm: {
    readonly Aes128: "aes128";
    readonly Aes192: "aes192";
    readonly Aes256: "aes256";
};
/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export declare type FlowSourceEncryptionAlgorithm = (typeof FlowSourceEncryptionAlgorithm)[keyof typeof FlowSourceEncryptionAlgorithm];
export declare const FlowSourceEncryptionKeyType: {
    readonly Speke: "speke";
    readonly StaticKey: "static-key";
};
/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export declare type FlowSourceEncryptionKeyType = (typeof FlowSourceEncryptionKeyType)[keyof typeof FlowSourceEncryptionKeyType];
export declare const FlowSourceProtocol: {
    readonly ZixiPush: "zixi-push";
    readonly RtpFec: "rtp-fec";
    readonly Rtp: "rtp";
    readonly Rist: "rist";
    readonly SrtListener: "srt-listener";
};
/**
 * The protocol that is used by the source or output.
 */
export declare type FlowSourceProtocol = (typeof FlowSourceProtocol)[keyof typeof FlowSourceProtocol];
