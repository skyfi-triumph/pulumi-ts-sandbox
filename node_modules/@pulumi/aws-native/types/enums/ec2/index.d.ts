export declare const CapacityReservationFleetInstanceMatchCriteria: {
    readonly Open: "open";
};
export declare type CapacityReservationFleetInstanceMatchCriteria = (typeof CapacityReservationFleetInstanceMatchCriteria)[keyof typeof CapacityReservationFleetInstanceMatchCriteria];
export declare const CapacityReservationFleetTenancy: {
    readonly Default: "default";
};
export declare type CapacityReservationFleetTenancy = (typeof CapacityReservationFleetTenancy)[keyof typeof CapacityReservationFleetTenancy];
export declare const EC2FleetCapacityRebalanceReplacementStrategy: {
    readonly Launch: "launch";
    readonly LaunchBeforeTerminate: "launch-before-terminate";
};
export declare type EC2FleetCapacityRebalanceReplacementStrategy = (typeof EC2FleetCapacityRebalanceReplacementStrategy)[keyof typeof EC2FleetCapacityRebalanceReplacementStrategy];
export declare const EC2FleetCapacityReservationOptionsRequestUsageStrategy: {
    readonly UseCapacityReservationsFirst: "use-capacity-reservations-first";
};
export declare type EC2FleetCapacityReservationOptionsRequestUsageStrategy = (typeof EC2FleetCapacityReservationOptionsRequestUsageStrategy)[keyof typeof EC2FleetCapacityReservationOptionsRequestUsageStrategy];
export declare const EC2FleetExcessCapacityTerminationPolicy: {
    readonly Termination: "termination";
    readonly NoTermination: "no-termination";
};
export declare type EC2FleetExcessCapacityTerminationPolicy = (typeof EC2FleetExcessCapacityTerminationPolicy)[keyof typeof EC2FleetExcessCapacityTerminationPolicy];
export declare const EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem: {
    readonly Nvidia: "nvidia";
    readonly Amd: "amd";
    readonly AmazonWebServices: "amazon-web-services";
    readonly Xilinx: "xilinx";
};
export declare type EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem = (typeof EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem)[keyof typeof EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem];
export declare const EC2FleetInstanceRequirementsRequestAcceleratorNamesItem: {
    readonly A100: "a100";
    readonly V100: "v100";
    readonly K80: "k80";
    readonly T4: "t4";
    readonly M60: "m60";
    readonly RadeonProV520: "radeon-pro-v520";
    readonly Vu9p: "vu9p";
    readonly Inferentia: "inferentia";
    readonly K520: "k520";
};
export declare type EC2FleetInstanceRequirementsRequestAcceleratorNamesItem = (typeof EC2FleetInstanceRequirementsRequestAcceleratorNamesItem)[keyof typeof EC2FleetInstanceRequirementsRequestAcceleratorNamesItem];
export declare const EC2FleetInstanceRequirementsRequestAcceleratorTypesItem: {
    readonly Gpu: "gpu";
    readonly Fpga: "fpga";
    readonly Inference: "inference";
};
export declare type EC2FleetInstanceRequirementsRequestAcceleratorTypesItem = (typeof EC2FleetInstanceRequirementsRequestAcceleratorTypesItem)[keyof typeof EC2FleetInstanceRequirementsRequestAcceleratorTypesItem];
export declare const EC2FleetInstanceRequirementsRequestBareMetal: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type EC2FleetInstanceRequirementsRequestBareMetal = (typeof EC2FleetInstanceRequirementsRequestBareMetal)[keyof typeof EC2FleetInstanceRequirementsRequestBareMetal];
export declare const EC2FleetInstanceRequirementsRequestBurstablePerformance: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type EC2FleetInstanceRequirementsRequestBurstablePerformance = (typeof EC2FleetInstanceRequirementsRequestBurstablePerformance)[keyof typeof EC2FleetInstanceRequirementsRequestBurstablePerformance];
export declare const EC2FleetInstanceRequirementsRequestCpuManufacturersItem: {
    readonly Intel: "intel";
    readonly Amd: "amd";
    readonly AmazonWebServices: "amazon-web-services";
};
export declare type EC2FleetInstanceRequirementsRequestCpuManufacturersItem = (typeof EC2FleetInstanceRequirementsRequestCpuManufacturersItem)[keyof typeof EC2FleetInstanceRequirementsRequestCpuManufacturersItem];
export declare const EC2FleetInstanceRequirementsRequestInstanceGenerationsItem: {
    readonly Current: "current";
    readonly Previous: "previous";
};
export declare type EC2FleetInstanceRequirementsRequestInstanceGenerationsItem = (typeof EC2FleetInstanceRequirementsRequestInstanceGenerationsItem)[keyof typeof EC2FleetInstanceRequirementsRequestInstanceGenerationsItem];
export declare const EC2FleetInstanceRequirementsRequestLocalStorage: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type EC2FleetInstanceRequirementsRequestLocalStorage = (typeof EC2FleetInstanceRequirementsRequestLocalStorage)[keyof typeof EC2FleetInstanceRequirementsRequestLocalStorage];
export declare const EC2FleetInstanceRequirementsRequestLocalStorageTypesItem: {
    readonly Hdd: "hdd";
    readonly Ssd: "ssd";
};
export declare type EC2FleetInstanceRequirementsRequestLocalStorageTypesItem = (typeof EC2FleetInstanceRequirementsRequestLocalStorageTypesItem)[keyof typeof EC2FleetInstanceRequirementsRequestLocalStorageTypesItem];
export declare const EC2FleetSpotOptionsRequestAllocationStrategy: {
    readonly LowestPrice: "lowestPrice";
    readonly Diversified: "diversified";
    readonly CapacityOptimized: "capacityOptimized";
    readonly CapacityOptimizedPrioritized: "capacityOptimizedPrioritized";
};
export declare type EC2FleetSpotOptionsRequestAllocationStrategy = (typeof EC2FleetSpotOptionsRequestAllocationStrategy)[keyof typeof EC2FleetSpotOptionsRequestAllocationStrategy];
export declare const EC2FleetSpotOptionsRequestInstanceInterruptionBehavior: {
    readonly Hibernate: "hibernate";
    readonly Stop: "stop";
    readonly Terminate: "terminate";
};
export declare type EC2FleetSpotOptionsRequestInstanceInterruptionBehavior = (typeof EC2FleetSpotOptionsRequestInstanceInterruptionBehavior)[keyof typeof EC2FleetSpotOptionsRequestInstanceInterruptionBehavior];
export declare const EC2FleetTagSpecificationResourceType: {
    readonly ClientVpnEndpoint: "client-vpn-endpoint";
    readonly CustomerGateway: "customer-gateway";
    readonly DedicatedHost: "dedicated-host";
    readonly DhcpOptions: "dhcp-options";
    readonly EgressOnlyInternetGateway: "egress-only-internet-gateway";
    readonly ElasticGpu: "elastic-gpu";
    readonly ElasticIp: "elastic-ip";
    readonly ExportImageTask: "export-image-task";
    readonly ExportInstanceTask: "export-instance-task";
    readonly Fleet: "fleet";
    readonly FpgaImage: "fpga-image";
    readonly HostReservation: "host-reservation";
    readonly Image: "image";
    readonly ImportImageTask: "import-image-task";
    readonly ImportSnapshotTask: "import-snapshot-task";
    readonly Instance: "instance";
    readonly InternetGateway: "internet-gateway";
    readonly KeyPair: "key-pair";
    readonly LaunchTemplate: "launch-template";
    readonly LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association";
    readonly Natgateway: "natgateway";
    readonly NetworkAcl: "network-acl";
    readonly NetworkInsightsAnalysis: "network-insights-analysis";
    readonly NetworkInsightsPath: "network-insights-path";
    readonly NetworkInterface: "network-interface";
    readonly PlacementGroup: "placement-group";
    readonly ReservedInstances: "reserved-instances";
    readonly RouteTable: "route-table";
    readonly SecurityGroup: "security-group";
    readonly Snapshot: "snapshot";
    readonly SpotFleetRequest: "spot-fleet-request";
    readonly SpotInstancesRequest: "spot-instances-request";
    readonly Subnet: "subnet";
    readonly TrafficMirrorFilter: "traffic-mirror-filter";
    readonly TrafficMirrorSession: "traffic-mirror-session";
    readonly TrafficMirrorTarget: "traffic-mirror-target";
    readonly TransitGateway: "transit-gateway";
    readonly TransitGatewayAttachment: "transit-gateway-attachment";
    readonly TransitGatewayConnectPeer: "transit-gateway-connect-peer";
    readonly TransitGatewayMulticastDomain: "transit-gateway-multicast-domain";
    readonly TransitGatewayRouteTable: "transit-gateway-route-table";
    readonly Volume: "volume";
    readonly Vpc: "vpc";
    readonly VpcFlowLog: "vpc-flow-log";
    readonly VpcPeeringConnection: "vpc-peering-connection";
    readonly VpnConnection: "vpn-connection";
    readonly VpnGateway: "vpn-gateway";
};
export declare type EC2FleetTagSpecificationResourceType = (typeof EC2FleetTagSpecificationResourceType)[keyof typeof EC2FleetTagSpecificationResourceType];
export declare const EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType: {
    readonly OnDemand: "on-demand";
    readonly Spot: "spot";
};
export declare type EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType = (typeof EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType)[keyof typeof EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType];
export declare const EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType: {
    readonly Vcpu: "vcpu";
    readonly MemoryMib: "memory-mib";
    readonly Units: "units";
};
export declare type EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType = (typeof EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType)[keyof typeof EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType];
export declare const EC2FleetType: {
    readonly Maintain: "maintain";
    readonly Request: "request";
    readonly Instant: "instant";
};
export declare type EC2FleetType = (typeof EC2FleetType)[keyof typeof EC2FleetType];
export declare const FlowLogLogDestinationType: {
    readonly CloudWatchLogs: "cloud-watch-logs";
    readonly S3: "s3";
};
/**
 * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
 */
export declare type FlowLogLogDestinationType = (typeof FlowLogLogDestinationType)[keyof typeof FlowLogLogDestinationType];
export declare const FlowLogResourceType: {
    readonly NetworkInterface: "NetworkInterface";
    readonly Subnet: "Subnet";
    readonly Vpc: "VPC";
};
/**
 * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
 */
export declare type FlowLogResourceType = (typeof FlowLogResourceType)[keyof typeof FlowLogResourceType];
export declare const FlowLogTrafficType: {
    readonly Accept: "ACCEPT";
    readonly All: "ALL";
    readonly Reject: "REJECT";
};
/**
 * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
 */
export declare type FlowLogTrafficType = (typeof FlowLogTrafficType)[keyof typeof FlowLogTrafficType];
export declare const NetworkInsightsAnalysisStatus: {
    readonly Running: "running";
    readonly Failed: "failed";
    readonly Succeeded: "succeeded";
};
export declare type NetworkInsightsAnalysisStatus = (typeof NetworkInsightsAnalysisStatus)[keyof typeof NetworkInsightsAnalysisStatus];
export declare const NetworkInsightsPathProtocol: {
    readonly Tcp: "tcp";
    readonly Udp: "udp";
};
export declare type NetworkInsightsPathProtocol = (typeof NetworkInsightsPathProtocol)[keyof typeof NetworkInsightsPathProtocol];
export declare const PrefixListAddressFamily: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * Ip Version of Prefix List.
 */
export declare type PrefixListAddressFamily = (typeof PrefixListAddressFamily)[keyof typeof PrefixListAddressFamily];
export declare const SpotFleetEbsBlockDeviceVolumeType: {
    readonly Gp2: "gp2";
    readonly Gp3: "gp3";
    readonly Io1: "io1";
    readonly Io2: "io2";
    readonly Sc1: "sc1";
    readonly St1: "st1";
    readonly Standard: "standard";
};
export declare type SpotFleetEbsBlockDeviceVolumeType = (typeof SpotFleetEbsBlockDeviceVolumeType)[keyof typeof SpotFleetEbsBlockDeviceVolumeType];
export declare const SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem: {
    readonly Nvidia: "nvidia";
    readonly Amd: "amd";
    readonly AmazonWebServices: "amazon-web-services";
    readonly Xilinx: "xilinx";
};
export declare type SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem];
export declare const SpotFleetInstanceRequirementsRequestAcceleratorNamesItem: {
    readonly A100: "a100";
    readonly V100: "v100";
    readonly K80: "k80";
    readonly T4: "t4";
    readonly M60: "m60";
    readonly RadeonProV520: "radeon-pro-v520";
    readonly Vu9p: "vu9p";
    readonly Inferentia: "inferentia";
    readonly K520: "k520";
};
export declare type SpotFleetInstanceRequirementsRequestAcceleratorNamesItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorNamesItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorNamesItem];
export declare const SpotFleetInstanceRequirementsRequestAcceleratorTypesItem: {
    readonly Gpu: "gpu";
    readonly Fpga: "fpga";
    readonly Inference: "inference";
};
export declare type SpotFleetInstanceRequirementsRequestAcceleratorTypesItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorTypesItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorTypesItem];
export declare const SpotFleetInstanceRequirementsRequestBareMetal: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type SpotFleetInstanceRequirementsRequestBareMetal = (typeof SpotFleetInstanceRequirementsRequestBareMetal)[keyof typeof SpotFleetInstanceRequirementsRequestBareMetal];
export declare const SpotFleetInstanceRequirementsRequestBurstablePerformance: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type SpotFleetInstanceRequirementsRequestBurstablePerformance = (typeof SpotFleetInstanceRequirementsRequestBurstablePerformance)[keyof typeof SpotFleetInstanceRequirementsRequestBurstablePerformance];
export declare const SpotFleetInstanceRequirementsRequestCpuManufacturersItem: {
    readonly Intel: "intel";
    readonly Amd: "amd";
    readonly AmazonWebServices: "amazon-web-services";
};
export declare type SpotFleetInstanceRequirementsRequestCpuManufacturersItem = (typeof SpotFleetInstanceRequirementsRequestCpuManufacturersItem)[keyof typeof SpotFleetInstanceRequirementsRequestCpuManufacturersItem];
export declare const SpotFleetInstanceRequirementsRequestInstanceGenerationsItem: {
    readonly Current: "current";
    readonly Previous: "previous";
};
export declare type SpotFleetInstanceRequirementsRequestInstanceGenerationsItem = (typeof SpotFleetInstanceRequirementsRequestInstanceGenerationsItem)[keyof typeof SpotFleetInstanceRequirementsRequestInstanceGenerationsItem];
export declare const SpotFleetInstanceRequirementsRequestLocalStorage: {
    readonly Included: "included";
    readonly Required: "required";
    readonly Excluded: "excluded";
};
export declare type SpotFleetInstanceRequirementsRequestLocalStorage = (typeof SpotFleetInstanceRequirementsRequestLocalStorage)[keyof typeof SpotFleetInstanceRequirementsRequestLocalStorage];
export declare const SpotFleetInstanceRequirementsRequestLocalStorageTypesItem: {
    readonly Hdd: "hdd";
    readonly Ssd: "ssd";
};
export declare type SpotFleetInstanceRequirementsRequestLocalStorageTypesItem = (typeof SpotFleetInstanceRequirementsRequestLocalStorageTypesItem)[keyof typeof SpotFleetInstanceRequirementsRequestLocalStorageTypesItem];
export declare const SpotFleetRequestConfigDataAllocationStrategy: {
    readonly CapacityOptimized: "capacityOptimized";
    readonly CapacityOptimizedPrioritized: "capacityOptimizedPrioritized";
    readonly Diversified: "diversified";
    readonly LowestPrice: "lowestPrice";
};
export declare type SpotFleetRequestConfigDataAllocationStrategy = (typeof SpotFleetRequestConfigDataAllocationStrategy)[keyof typeof SpotFleetRequestConfigDataAllocationStrategy];
export declare const SpotFleetRequestConfigDataExcessCapacityTerminationPolicy: {
    readonly Default: "Default";
    readonly NoTermination: "NoTermination";
};
export declare type SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = (typeof SpotFleetRequestConfigDataExcessCapacityTerminationPolicy)[keyof typeof SpotFleetRequestConfigDataExcessCapacityTerminationPolicy];
export declare const SpotFleetRequestConfigDataInstanceInterruptionBehavior: {
    readonly Hibernate: "hibernate";
    readonly Stop: "stop";
    readonly Terminate: "terminate";
};
export declare type SpotFleetRequestConfigDataInstanceInterruptionBehavior = (typeof SpotFleetRequestConfigDataInstanceInterruptionBehavior)[keyof typeof SpotFleetRequestConfigDataInstanceInterruptionBehavior];
export declare const SpotFleetRequestConfigDataTargetCapacityUnitType: {
    readonly Vcpu: "vcpu";
    readonly MemoryMib: "memory-mib";
    readonly Units: "units";
};
export declare type SpotFleetRequestConfigDataTargetCapacityUnitType = (typeof SpotFleetRequestConfigDataTargetCapacityUnitType)[keyof typeof SpotFleetRequestConfigDataTargetCapacityUnitType];
export declare const SpotFleetRequestConfigDataType: {
    readonly Maintain: "maintain";
    readonly Request: "request";
};
export declare type SpotFleetRequestConfigDataType = (typeof SpotFleetRequestConfigDataType)[keyof typeof SpotFleetRequestConfigDataType];
export declare const SpotFleetSpotCapacityRebalanceReplacementStrategy: {
    readonly Launch: "launch";
    readonly LaunchBeforeTerminate: "launch-before-terminate";
};
export declare type SpotFleetSpotCapacityRebalanceReplacementStrategy = (typeof SpotFleetSpotCapacityRebalanceReplacementStrategy)[keyof typeof SpotFleetSpotCapacityRebalanceReplacementStrategy];
export declare const SpotFleetSpotPlacementTenancy: {
    readonly Dedicated: "dedicated";
    readonly Default: "default";
    readonly Host: "host";
};
export declare type SpotFleetSpotPlacementTenancy = (typeof SpotFleetSpotPlacementTenancy)[keyof typeof SpotFleetSpotPlacementTenancy];
export declare const SpotFleetTagSpecificationResourceType: {
    readonly ClientVpnEndpoint: "client-vpn-endpoint";
    readonly CustomerGateway: "customer-gateway";
    readonly DedicatedHost: "dedicated-host";
    readonly DhcpOptions: "dhcp-options";
    readonly EgressOnlyInternetGateway: "egress-only-internet-gateway";
    readonly ElasticGpu: "elastic-gpu";
    readonly ElasticIp: "elastic-ip";
    readonly ExportImageTask: "export-image-task";
    readonly ExportInstanceTask: "export-instance-task";
    readonly Fleet: "fleet";
    readonly FpgaImage: "fpga-image";
    readonly HostReservation: "host-reservation";
    readonly Image: "image";
    readonly ImportImageTask: "import-image-task";
    readonly ImportSnapshotTask: "import-snapshot-task";
    readonly Instance: "instance";
    readonly InternetGateway: "internet-gateway";
    readonly KeyPair: "key-pair";
    readonly LaunchTemplate: "launch-template";
    readonly LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association";
    readonly Natgateway: "natgateway";
    readonly NetworkAcl: "network-acl";
    readonly NetworkInsightsAnalysis: "network-insights-analysis";
    readonly NetworkInsightsPath: "network-insights-path";
    readonly NetworkInterface: "network-interface";
    readonly PlacementGroup: "placement-group";
    readonly ReservedInstances: "reserved-instances";
    readonly RouteTable: "route-table";
    readonly SecurityGroup: "security-group";
    readonly Snapshot: "snapshot";
    readonly SpotFleetRequest: "spot-fleet-request";
    readonly SpotInstancesRequest: "spot-instances-request";
    readonly Subnet: "subnet";
    readonly TrafficMirrorFilter: "traffic-mirror-filter";
    readonly TrafficMirrorSession: "traffic-mirror-session";
    readonly TrafficMirrorTarget: "traffic-mirror-target";
    readonly TransitGateway: "transit-gateway";
    readonly TransitGatewayAttachment: "transit-gateway-attachment";
    readonly TransitGatewayConnectPeer: "transit-gateway-connect-peer";
    readonly TransitGatewayMulticastDomain: "transit-gateway-multicast-domain";
    readonly TransitGatewayRouteTable: "transit-gateway-route-table";
    readonly Volume: "volume";
    readonly Vpc: "vpc";
    readonly VpcFlowLog: "vpc-flow-log";
    readonly VpcPeeringConnection: "vpc-peering-connection";
    readonly VpnConnection: "vpn-connection";
    readonly VpnGateway: "vpn-gateway";
};
export declare type SpotFleetTagSpecificationResourceType = (typeof SpotFleetTagSpecificationResourceType)[keyof typeof SpotFleetTagSpecificationResourceType];
export declare const VPCEndpointVpcEndpointType: {
    readonly Interface: "Interface";
    readonly Gateway: "Gateway";
    readonly GatewayLoadBalancer: "GatewayLoadBalancer";
};
export declare type VPCEndpointVpcEndpointType = (typeof VPCEndpointVpcEndpointType)[keyof typeof VPCEndpointVpcEndpointType];
