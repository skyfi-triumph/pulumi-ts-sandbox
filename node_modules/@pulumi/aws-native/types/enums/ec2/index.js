"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VPCEndpointVpcEndpointType = exports.SpotFleetTagSpecificationResourceType = exports.SpotFleetSpotPlacementTenancy = exports.SpotFleetSpotCapacityRebalanceReplacementStrategy = exports.SpotFleetRequestConfigDataType = exports.SpotFleetRequestConfigDataTargetCapacityUnitType = exports.SpotFleetRequestConfigDataInstanceInterruptionBehavior = exports.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = exports.SpotFleetRequestConfigDataAllocationStrategy = exports.SpotFleetInstanceRequirementsRequestLocalStorageTypesItem = exports.SpotFleetInstanceRequirementsRequestLocalStorage = exports.SpotFleetInstanceRequirementsRequestInstanceGenerationsItem = exports.SpotFleetInstanceRequirementsRequestCpuManufacturersItem = exports.SpotFleetInstanceRequirementsRequestBurstablePerformance = exports.SpotFleetInstanceRequirementsRequestBareMetal = exports.SpotFleetInstanceRequirementsRequestAcceleratorTypesItem = exports.SpotFleetInstanceRequirementsRequestAcceleratorNamesItem = exports.SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem = exports.SpotFleetEbsBlockDeviceVolumeType = exports.PrefixListAddressFamily = exports.NetworkInsightsPathProtocol = exports.NetworkInsightsAnalysisStatus = exports.FlowLogTrafficType = exports.FlowLogResourceType = exports.FlowLogLogDestinationType = exports.EC2FleetType = exports.EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType = exports.EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType = exports.EC2FleetTagSpecificationResourceType = exports.EC2FleetSpotOptionsRequestInstanceInterruptionBehavior = exports.EC2FleetSpotOptionsRequestAllocationStrategy = exports.EC2FleetInstanceRequirementsRequestLocalStorageTypesItem = exports.EC2FleetInstanceRequirementsRequestLocalStorage = exports.EC2FleetInstanceRequirementsRequestInstanceGenerationsItem = exports.EC2FleetInstanceRequirementsRequestCpuManufacturersItem = exports.EC2FleetInstanceRequirementsRequestBurstablePerformance = exports.EC2FleetInstanceRequirementsRequestBareMetal = exports.EC2FleetInstanceRequirementsRequestAcceleratorTypesItem = exports.EC2FleetInstanceRequirementsRequestAcceleratorNamesItem = exports.EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem = exports.EC2FleetExcessCapacityTerminationPolicy = exports.EC2FleetCapacityReservationOptionsRequestUsageStrategy = exports.EC2FleetCapacityRebalanceReplacementStrategy = exports.CapacityReservationFleetTenancy = exports.CapacityReservationFleetInstanceMatchCriteria = void 0;
exports.CapacityReservationFleetInstanceMatchCriteria = {
    Open: "open",
};
exports.CapacityReservationFleetTenancy = {
    Default: "default",
};
exports.EC2FleetCapacityRebalanceReplacementStrategy = {
    Launch: "launch",
    LaunchBeforeTerminate: "launch-before-terminate",
};
exports.EC2FleetCapacityReservationOptionsRequestUsageStrategy = {
    UseCapacityReservationsFirst: "use-capacity-reservations-first",
};
exports.EC2FleetExcessCapacityTerminationPolicy = {
    Termination: "termination",
    NoTermination: "no-termination",
};
exports.EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem = {
    Nvidia: "nvidia",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
    Xilinx: "xilinx",
};
exports.EC2FleetInstanceRequirementsRequestAcceleratorNamesItem = {
    A100: "a100",
    V100: "v100",
    K80: "k80",
    T4: "t4",
    M60: "m60",
    RadeonProV520: "radeon-pro-v520",
    Vu9p: "vu9p",
    Inferentia: "inferentia",
    K520: "k520",
};
exports.EC2FleetInstanceRequirementsRequestAcceleratorTypesItem = {
    Gpu: "gpu",
    Fpga: "fpga",
    Inference: "inference",
};
exports.EC2FleetInstanceRequirementsRequestBareMetal = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.EC2FleetInstanceRequirementsRequestBurstablePerformance = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.EC2FleetInstanceRequirementsRequestCpuManufacturersItem = {
    Intel: "intel",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
};
exports.EC2FleetInstanceRequirementsRequestInstanceGenerationsItem = {
    Current: "current",
    Previous: "previous",
};
exports.EC2FleetInstanceRequirementsRequestLocalStorage = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.EC2FleetInstanceRequirementsRequestLocalStorageTypesItem = {
    Hdd: "hdd",
    Ssd: "ssd",
};
exports.EC2FleetSpotOptionsRequestAllocationStrategy = {
    LowestPrice: "lowestPrice",
    Diversified: "diversified",
    CapacityOptimized: "capacityOptimized",
    CapacityOptimizedPrioritized: "capacityOptimizedPrioritized",
};
exports.EC2FleetSpotOptionsRequestInstanceInterruptionBehavior = {
    Hibernate: "hibernate",
    Stop: "stop",
    Terminate: "terminate",
};
exports.EC2FleetTagSpecificationResourceType = {
    ClientVpnEndpoint: "client-vpn-endpoint",
    CustomerGateway: "customer-gateway",
    DedicatedHost: "dedicated-host",
    DhcpOptions: "dhcp-options",
    EgressOnlyInternetGateway: "egress-only-internet-gateway",
    ElasticGpu: "elastic-gpu",
    ElasticIp: "elastic-ip",
    ExportImageTask: "export-image-task",
    ExportInstanceTask: "export-instance-task",
    Fleet: "fleet",
    FpgaImage: "fpga-image",
    HostReservation: "host-reservation",
    Image: "image",
    ImportImageTask: "import-image-task",
    ImportSnapshotTask: "import-snapshot-task",
    Instance: "instance",
    InternetGateway: "internet-gateway",
    KeyPair: "key-pair",
    LaunchTemplate: "launch-template",
    LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association",
    Natgateway: "natgateway",
    NetworkAcl: "network-acl",
    NetworkInsightsAnalysis: "network-insights-analysis",
    NetworkInsightsPath: "network-insights-path",
    NetworkInterface: "network-interface",
    PlacementGroup: "placement-group",
    ReservedInstances: "reserved-instances",
    RouteTable: "route-table",
    SecurityGroup: "security-group",
    Snapshot: "snapshot",
    SpotFleetRequest: "spot-fleet-request",
    SpotInstancesRequest: "spot-instances-request",
    Subnet: "subnet",
    TrafficMirrorFilter: "traffic-mirror-filter",
    TrafficMirrorSession: "traffic-mirror-session",
    TrafficMirrorTarget: "traffic-mirror-target",
    TransitGateway: "transit-gateway",
    TransitGatewayAttachment: "transit-gateway-attachment",
    TransitGatewayConnectPeer: "transit-gateway-connect-peer",
    TransitGatewayMulticastDomain: "transit-gateway-multicast-domain",
    TransitGatewayRouteTable: "transit-gateway-route-table",
    Volume: "volume",
    Vpc: "vpc",
    VpcFlowLog: "vpc-flow-log",
    VpcPeeringConnection: "vpc-peering-connection",
    VpnConnection: "vpn-connection",
    VpnGateway: "vpn-gateway",
};
exports.EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType = {
    OnDemand: "on-demand",
    Spot: "spot",
};
exports.EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType = {
    Vcpu: "vcpu",
    MemoryMib: "memory-mib",
    Units: "units",
};
exports.EC2FleetType = {
    Maintain: "maintain",
    Request: "request",
    Instant: "instant",
};
exports.FlowLogLogDestinationType = {
    CloudWatchLogs: "cloud-watch-logs",
    S3: "s3",
};
exports.FlowLogResourceType = {
    NetworkInterface: "NetworkInterface",
    Subnet: "Subnet",
    Vpc: "VPC",
};
exports.FlowLogTrafficType = {
    Accept: "ACCEPT",
    All: "ALL",
    Reject: "REJECT",
};
exports.NetworkInsightsAnalysisStatus = {
    Running: "running",
    Failed: "failed",
    Succeeded: "succeeded",
};
exports.NetworkInsightsPathProtocol = {
    Tcp: "tcp",
    Udp: "udp",
};
exports.PrefixListAddressFamily = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.SpotFleetEbsBlockDeviceVolumeType = {
    Gp2: "gp2",
    Gp3: "gp3",
    Io1: "io1",
    Io2: "io2",
    Sc1: "sc1",
    St1: "st1",
    Standard: "standard",
};
exports.SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem = {
    Nvidia: "nvidia",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
    Xilinx: "xilinx",
};
exports.SpotFleetInstanceRequirementsRequestAcceleratorNamesItem = {
    A100: "a100",
    V100: "v100",
    K80: "k80",
    T4: "t4",
    M60: "m60",
    RadeonProV520: "radeon-pro-v520",
    Vu9p: "vu9p",
    Inferentia: "inferentia",
    K520: "k520",
};
exports.SpotFleetInstanceRequirementsRequestAcceleratorTypesItem = {
    Gpu: "gpu",
    Fpga: "fpga",
    Inference: "inference",
};
exports.SpotFleetInstanceRequirementsRequestBareMetal = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.SpotFleetInstanceRequirementsRequestBurstablePerformance = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.SpotFleetInstanceRequirementsRequestCpuManufacturersItem = {
    Intel: "intel",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
};
exports.SpotFleetInstanceRequirementsRequestInstanceGenerationsItem = {
    Current: "current",
    Previous: "previous",
};
exports.SpotFleetInstanceRequirementsRequestLocalStorage = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
};
exports.SpotFleetInstanceRequirementsRequestLocalStorageTypesItem = {
    Hdd: "hdd",
    Ssd: "ssd",
};
exports.SpotFleetRequestConfigDataAllocationStrategy = {
    CapacityOptimized: "capacityOptimized",
    CapacityOptimizedPrioritized: "capacityOptimizedPrioritized",
    Diversified: "diversified",
    LowestPrice: "lowestPrice",
};
exports.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = {
    Default: "Default",
    NoTermination: "NoTermination",
};
exports.SpotFleetRequestConfigDataInstanceInterruptionBehavior = {
    Hibernate: "hibernate",
    Stop: "stop",
    Terminate: "terminate",
};
exports.SpotFleetRequestConfigDataTargetCapacityUnitType = {
    Vcpu: "vcpu",
    MemoryMib: "memory-mib",
    Units: "units",
};
exports.SpotFleetRequestConfigDataType = {
    Maintain: "maintain",
    Request: "request",
};
exports.SpotFleetSpotCapacityRebalanceReplacementStrategy = {
    Launch: "launch",
    LaunchBeforeTerminate: "launch-before-terminate",
};
exports.SpotFleetSpotPlacementTenancy = {
    Dedicated: "dedicated",
    Default: "default",
    Host: "host",
};
exports.SpotFleetTagSpecificationResourceType = {
    ClientVpnEndpoint: "client-vpn-endpoint",
    CustomerGateway: "customer-gateway",
    DedicatedHost: "dedicated-host",
    DhcpOptions: "dhcp-options",
    EgressOnlyInternetGateway: "egress-only-internet-gateway",
    ElasticGpu: "elastic-gpu",
    ElasticIp: "elastic-ip",
    ExportImageTask: "export-image-task",
    ExportInstanceTask: "export-instance-task",
    Fleet: "fleet",
    FpgaImage: "fpga-image",
    HostReservation: "host-reservation",
    Image: "image",
    ImportImageTask: "import-image-task",
    ImportSnapshotTask: "import-snapshot-task",
    Instance: "instance",
    InternetGateway: "internet-gateway",
    KeyPair: "key-pair",
    LaunchTemplate: "launch-template",
    LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association",
    Natgateway: "natgateway",
    NetworkAcl: "network-acl",
    NetworkInsightsAnalysis: "network-insights-analysis",
    NetworkInsightsPath: "network-insights-path",
    NetworkInterface: "network-interface",
    PlacementGroup: "placement-group",
    ReservedInstances: "reserved-instances",
    RouteTable: "route-table",
    SecurityGroup: "security-group",
    Snapshot: "snapshot",
    SpotFleetRequest: "spot-fleet-request",
    SpotInstancesRequest: "spot-instances-request",
    Subnet: "subnet",
    TrafficMirrorFilter: "traffic-mirror-filter",
    TrafficMirrorSession: "traffic-mirror-session",
    TrafficMirrorTarget: "traffic-mirror-target",
    TransitGateway: "transit-gateway",
    TransitGatewayAttachment: "transit-gateway-attachment",
    TransitGatewayConnectPeer: "transit-gateway-connect-peer",
    TransitGatewayMulticastDomain: "transit-gateway-multicast-domain",
    TransitGatewayRouteTable: "transit-gateway-route-table",
    Volume: "volume",
    Vpc: "vpc",
    VpcFlowLog: "vpc-flow-log",
    VpcPeeringConnection: "vpc-peering-connection",
    VpnConnection: "vpn-connection",
    VpnGateway: "vpn-gateway",
};
exports.VPCEndpointVpcEndpointType = {
    Interface: "Interface",
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
};
//# sourceMappingURL=index.js.map