export declare const AppResourceSpecInstanceType: {
    readonly System: "system";
    readonly MlT3Micro: "ml.t3.micro";
    readonly MlT3Small: "ml.t3.small";
    readonly MlT3Medium: "ml.t3.medium";
    readonly MlT3Large: "ml.t3.large";
    readonly MlT3Xlarge: "ml.t3.xlarge";
    readonly MlT32xlarge: "ml.t3.2xlarge";
    readonly MlM5Large: "ml.m5.large";
    readonly MlM5Xlarge: "ml.m5.xlarge";
    readonly MlM52xlarge: "ml.m5.2xlarge";
    readonly MlM54xlarge: "ml.m5.4xlarge";
    readonly MlM58xlarge: "ml.m5.8xlarge";
    readonly MlM512xlarge: "ml.m5.12xlarge";
    readonly MlM516xlarge: "ml.m5.16xlarge";
    readonly MlM524xlarge: "ml.m5.24xlarge";
    readonly MlC5Large: "ml.c5.large";
    readonly MlC5Xlarge: "ml.c5.xlarge";
    readonly MlC52xlarge: "ml.c5.2xlarge";
    readonly MlC54xlarge: "ml.c5.4xlarge";
    readonly MlC59xlarge: "ml.c5.9xlarge";
    readonly MlC512xlarge: "ml.c5.12xlarge";
    readonly MlC518xlarge: "ml.c5.18xlarge";
    readonly MlC524xlarge: "ml.c5.24xlarge";
    readonly MlP32xlarge: "ml.p3.2xlarge";
    readonly MlP38xlarge: "ml.p3.8xlarge";
    readonly MlP316xlarge: "ml.p3.16xlarge";
    readonly MlG4dnXlarge: "ml.g4dn.xlarge";
    readonly MlG4dn2xlarge: "ml.g4dn.2xlarge";
    readonly MlG4dn4xlarge: "ml.g4dn.4xlarge";
    readonly MlG4dn8xlarge: "ml.g4dn.8xlarge";
    readonly MlG4dn12xlarge: "ml.g4dn.12xlarge";
    readonly MlG4dn16xlarge: "ml.g4dn.16xlarge";
};
/**
 * The instance type that the image version runs on.
 */
export declare type AppResourceSpecInstanceType = (typeof AppResourceSpecInstanceType)[keyof typeof AppResourceSpecInstanceType];
export declare const AppType: {
    readonly JupyterServer: "JupyterServer";
    readonly KernelGateway: "KernelGateway";
};
/**
 * The type of app.
 */
export declare type AppType = (typeof AppType)[keyof typeof AppType];
export declare const DataQualityJobDefinitionEndpointInputS3DataDistributionType: {
    readonly FullyReplicated: "FullyReplicated";
    readonly ShardedByS3Key: "ShardedByS3Key";
};
/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export declare type DataQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType];
export declare const DataQualityJobDefinitionEndpointInputS3InputMode: {
    readonly Pipe: "Pipe";
    readonly File: "File";
};
/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export declare type DataQualityJobDefinitionEndpointInputS3InputMode = (typeof DataQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof DataQualityJobDefinitionEndpointInputS3InputMode];
export declare const DataQualityJobDefinitionS3OutputS3UploadMode: {
    readonly Continuous: "Continuous";
    readonly EndOfJob: "EndOfJob";
};
/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export declare type DataQualityJobDefinitionS3OutputS3UploadMode = (typeof DataQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof DataQualityJobDefinitionS3OutputS3UploadMode];
export declare const DomainAppNetworkAccessType: {
    readonly PublicInternetOnly: "PublicInternetOnly";
    readonly VpcOnly: "VpcOnly";
};
/**
 * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
 */
export declare type DomainAppNetworkAccessType = (typeof DomainAppNetworkAccessType)[keyof typeof DomainAppNetworkAccessType];
export declare const DomainAuthMode: {
    readonly Sso: "SSO";
    readonly Iam: "IAM";
};
/**
 * The mode of authentication that members use to access the domain.
 */
export declare type DomainAuthMode = (typeof DomainAuthMode)[keyof typeof DomainAuthMode];
export declare const DomainResourceSpecInstanceType: {
    readonly System: "system";
    readonly MlT3Micro: "ml.t3.micro";
    readonly MlT3Small: "ml.t3.small";
    readonly MlT3Medium: "ml.t3.medium";
    readonly MlT3Large: "ml.t3.large";
    readonly MlT3Xlarge: "ml.t3.xlarge";
    readonly MlT32xlarge: "ml.t3.2xlarge";
    readonly MlM5Large: "ml.m5.large";
    readonly MlM5Xlarge: "ml.m5.xlarge";
    readonly MlM52xlarge: "ml.m5.2xlarge";
    readonly MlM54xlarge: "ml.m5.4xlarge";
    readonly MlM58xlarge: "ml.m5.8xlarge";
    readonly MlM512xlarge: "ml.m5.12xlarge";
    readonly MlM516xlarge: "ml.m5.16xlarge";
    readonly MlM524xlarge: "ml.m5.24xlarge";
    readonly MlC5Large: "ml.c5.large";
    readonly MlC5Xlarge: "ml.c5.xlarge";
    readonly MlC52xlarge: "ml.c5.2xlarge";
    readonly MlC54xlarge: "ml.c5.4xlarge";
    readonly MlC59xlarge: "ml.c5.9xlarge";
    readonly MlC512xlarge: "ml.c5.12xlarge";
    readonly MlC518xlarge: "ml.c5.18xlarge";
    readonly MlC524xlarge: "ml.c5.24xlarge";
    readonly MlP32xlarge: "ml.p3.2xlarge";
    readonly MlP38xlarge: "ml.p3.8xlarge";
    readonly MlP316xlarge: "ml.p3.16xlarge";
    readonly MlG4dnXlarge: "ml.g4dn.xlarge";
    readonly MlG4dn2xlarge: "ml.g4dn.2xlarge";
    readonly MlG4dn4xlarge: "ml.g4dn.4xlarge";
    readonly MlG4dn8xlarge: "ml.g4dn.8xlarge";
    readonly MlG4dn12xlarge: "ml.g4dn.12xlarge";
    readonly MlG4dn16xlarge: "ml.g4dn.16xlarge";
};
/**
 * The instance type that the image version runs on.
 */
export declare type DomainResourceSpecInstanceType = (typeof DomainResourceSpecInstanceType)[keyof typeof DomainResourceSpecInstanceType];
export declare const DomainSharingSettingsNotebookOutputOption: {
    readonly Allowed: "Allowed";
    readonly Disabled: "Disabled";
};
/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export declare type DomainSharingSettingsNotebookOutputOption = (typeof DomainSharingSettingsNotebookOutputOption)[keyof typeof DomainSharingSettingsNotebookOutputOption];
export declare const FeatureGroupFeatureDefinitionFeatureType: {
    readonly Integral: "Integral";
    readonly Fractional: "Fractional";
    readonly String: "String";
};
export declare type FeatureGroupFeatureDefinitionFeatureType = (typeof FeatureGroupFeatureDefinitionFeatureType)[keyof typeof FeatureGroupFeatureDefinitionFeatureType];
export declare const ModelBiasJobDefinitionEndpointInputS3DataDistributionType: {
    readonly FullyReplicated: "FullyReplicated";
    readonly ShardedByS3Key: "ShardedByS3Key";
};
/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export declare type ModelBiasJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType];
export declare const ModelBiasJobDefinitionEndpointInputS3InputMode: {
    readonly Pipe: "Pipe";
    readonly File: "File";
};
/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export declare type ModelBiasJobDefinitionEndpointInputS3InputMode = (typeof ModelBiasJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelBiasJobDefinitionEndpointInputS3InputMode];
export declare const ModelBiasJobDefinitionS3OutputS3UploadMode: {
    readonly Continuous: "Continuous";
    readonly EndOfJob: "EndOfJob";
};
/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export declare type ModelBiasJobDefinitionS3OutputS3UploadMode = (typeof ModelBiasJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelBiasJobDefinitionS3OutputS3UploadMode];
export declare const ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType: {
    readonly FullyReplicated: "FullyReplicated";
    readonly ShardedByS3Key: "ShardedByS3Key";
};
/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export declare type ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType];
export declare const ModelExplainabilityJobDefinitionEndpointInputS3InputMode: {
    readonly Pipe: "Pipe";
    readonly File: "File";
};
/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export declare type ModelExplainabilityJobDefinitionEndpointInputS3InputMode = (typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode];
export declare const ModelExplainabilityJobDefinitionS3OutputS3UploadMode: {
    readonly Continuous: "Continuous";
    readonly EndOfJob: "EndOfJob";
};
/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export declare type ModelExplainabilityJobDefinitionS3OutputS3UploadMode = (typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode];
export declare const ModelPackageGroupStatus: {
    readonly Pending: "Pending";
    readonly InProgress: "InProgress";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Deleting: "Deleting";
    readonly DeleteFailed: "DeleteFailed";
};
/**
 * The status of a modelpackage group job.
 */
export declare type ModelPackageGroupStatus = (typeof ModelPackageGroupStatus)[keyof typeof ModelPackageGroupStatus];
export declare const ModelQualityJobDefinitionEndpointInputS3DataDistributionType: {
    readonly FullyReplicated: "FullyReplicated";
    readonly ShardedByS3Key: "ShardedByS3Key";
};
/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export declare type ModelQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType];
export declare const ModelQualityJobDefinitionEndpointInputS3InputMode: {
    readonly Pipe: "Pipe";
    readonly File: "File";
};
/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export declare type ModelQualityJobDefinitionEndpointInputS3InputMode = (typeof ModelQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelQualityJobDefinitionEndpointInputS3InputMode];
export declare const ModelQualityJobDefinitionProblemType: {
    readonly BinaryClassification: "BinaryClassification";
    readonly MulticlassClassification: "MulticlassClassification";
    readonly Regression: "Regression";
};
/**
 * The status of the monitoring job.
 */
export declare type ModelQualityJobDefinitionProblemType = (typeof ModelQualityJobDefinitionProblemType)[keyof typeof ModelQualityJobDefinitionProblemType];
export declare const ModelQualityJobDefinitionS3OutputS3UploadMode: {
    readonly Continuous: "Continuous";
    readonly EndOfJob: "EndOfJob";
};
/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export declare type ModelQualityJobDefinitionS3OutputS3UploadMode = (typeof ModelQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelQualityJobDefinitionS3OutputS3UploadMode];
export declare const MonitoringScheduleEndpointInputS3DataDistributionType: {
    readonly FullyReplicated: "FullyReplicated";
    readonly ShardedByS3Key: "ShardedByS3Key";
};
/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export declare type MonitoringScheduleEndpointInputS3DataDistributionType = (typeof MonitoringScheduleEndpointInputS3DataDistributionType)[keyof typeof MonitoringScheduleEndpointInputS3DataDistributionType];
export declare const MonitoringScheduleEndpointInputS3InputMode: {
    readonly Pipe: "Pipe";
    readonly File: "File";
};
/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export declare type MonitoringScheduleEndpointInputS3InputMode = (typeof MonitoringScheduleEndpointInputS3InputMode)[keyof typeof MonitoringScheduleEndpointInputS3InputMode];
export declare const MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly CompletedWithViolations: "CompletedWithViolations";
    readonly InProgress: "InProgress";
    readonly Failed: "Failed";
    readonly Stopping: "Stopping";
    readonly Stopped: "Stopped";
};
/**
 * The status of the monitoring job.
 */
export declare type MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus = (typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus)[keyof typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus];
export declare const MonitoringScheduleMonitoringType: {
    readonly DataQuality: "DataQuality";
    readonly ModelQuality: "ModelQuality";
    readonly ModelBias: "ModelBias";
    readonly ModelExplainability: "ModelExplainability";
};
/**
 * The type of monitoring job.
 */
export declare type MonitoringScheduleMonitoringType = (typeof MonitoringScheduleMonitoringType)[keyof typeof MonitoringScheduleMonitoringType];
export declare const MonitoringScheduleS3OutputS3UploadMode: {
    readonly Continuous: "Continuous";
    readonly EndOfJob: "EndOfJob";
};
/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export declare type MonitoringScheduleS3OutputS3UploadMode = (typeof MonitoringScheduleS3OutputS3UploadMode)[keyof typeof MonitoringScheduleS3OutputS3UploadMode];
export declare const MonitoringScheduleStatus: {
    readonly Pending: "Pending";
    readonly Failed: "Failed";
    readonly Scheduled: "Scheduled";
    readonly Stopped: "Stopped";
};
/**
 * The status of a schedule job.
 */
export declare type MonitoringScheduleStatus = (typeof MonitoringScheduleStatus)[keyof typeof MonitoringScheduleStatus];
export declare const ProjectStatus: {
    readonly Pending: "Pending";
    readonly CreateInProgress: "CreateInProgress";
    readonly CreateCompleted: "CreateCompleted";
    readonly CreateFailed: "CreateFailed";
    readonly DeleteInProgress: "DeleteInProgress";
    readonly DeleteFailed: "DeleteFailed";
    readonly DeleteCompleted: "DeleteCompleted";
};
/**
 * The status of a project.
 */
export declare type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];
export declare const UserProfileResourceSpecInstanceType: {
    readonly System: "system";
    readonly MlT3Micro: "ml.t3.micro";
    readonly MlT3Small: "ml.t3.small";
    readonly MlT3Medium: "ml.t3.medium";
    readonly MlT3Large: "ml.t3.large";
    readonly MlT3Xlarge: "ml.t3.xlarge";
    readonly MlT32xlarge: "ml.t3.2xlarge";
    readonly MlM5Large: "ml.m5.large";
    readonly MlM5Xlarge: "ml.m5.xlarge";
    readonly MlM52xlarge: "ml.m5.2xlarge";
    readonly MlM54xlarge: "ml.m5.4xlarge";
    readonly MlM58xlarge: "ml.m5.8xlarge";
    readonly MlM512xlarge: "ml.m5.12xlarge";
    readonly MlM516xlarge: "ml.m5.16xlarge";
    readonly MlM524xlarge: "ml.m5.24xlarge";
    readonly MlC5Large: "ml.c5.large";
    readonly MlC5Xlarge: "ml.c5.xlarge";
    readonly MlC52xlarge: "ml.c5.2xlarge";
    readonly MlC54xlarge: "ml.c5.4xlarge";
    readonly MlC59xlarge: "ml.c5.9xlarge";
    readonly MlC512xlarge: "ml.c5.12xlarge";
    readonly MlC518xlarge: "ml.c5.18xlarge";
    readonly MlC524xlarge: "ml.c5.24xlarge";
    readonly MlP32xlarge: "ml.p3.2xlarge";
    readonly MlP38xlarge: "ml.p3.8xlarge";
    readonly MlP316xlarge: "ml.p3.16xlarge";
    readonly MlG4dnXlarge: "ml.g4dn.xlarge";
    readonly MlG4dn2xlarge: "ml.g4dn.2xlarge";
    readonly MlG4dn4xlarge: "ml.g4dn.4xlarge";
    readonly MlG4dn8xlarge: "ml.g4dn.8xlarge";
    readonly MlG4dn12xlarge: "ml.g4dn.12xlarge";
    readonly MlG4dn16xlarge: "ml.g4dn.16xlarge";
};
/**
 * The instance type that the image version runs on.
 */
export declare type UserProfileResourceSpecInstanceType = (typeof UserProfileResourceSpecInstanceType)[keyof typeof UserProfileResourceSpecInstanceType];
export declare const UserProfileSharingSettingsNotebookOutputOption: {
    readonly Allowed: "Allowed";
    readonly Disabled: "Disabled";
};
/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export declare type UserProfileSharingSettingsNotebookOutputOption = (typeof UserProfileSharingSettingsNotebookOutputOption)[keyof typeof UserProfileSharingSettingsNotebookOutputOption];
