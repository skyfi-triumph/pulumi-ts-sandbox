export declare const ConnectorProfileConnectionMode: {
    readonly Public: "Public";
    readonly Private: "Private";
};
/**
 * Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake, Trendmicro and Singular
 */
export declare type ConnectorProfileConnectionMode = (typeof ConnectorProfileConnectionMode)[keyof typeof ConnectorProfileConnectionMode];
export declare const ConnectorProfileConnectorType: {
    readonly Salesforce: "Salesforce";
    readonly Singular: "Singular";
    readonly Slack: "Slack";
    readonly Redshift: "Redshift";
    readonly Marketo: "Marketo";
    readonly Googleanalytics: "Googleanalytics";
    readonly Zendesk: "Zendesk";
    readonly Servicenow: "Servicenow";
    readonly SAPOData: "SAPOData";
    readonly Datadog: "Datadog";
    readonly Trendmicro: "Trendmicro";
    readonly Snowflake: "Snowflake";
    readonly Dynatrace: "Dynatrace";
    readonly Infornexus: "Infornexus";
    readonly Amplitude: "Amplitude";
    readonly Veeva: "Veeva";
};
export declare type ConnectorProfileConnectorType = (typeof ConnectorProfileConnectorType)[keyof typeof ConnectorProfileConnectorType];
export declare const FlowAggregationType: {
    readonly None: "None";
    readonly SingleFile: "SingleFile";
};
export declare type FlowAggregationType = (typeof FlowAggregationType)[keyof typeof FlowAggregationType];
export declare const FlowAmplitudeConnectorOperator: {
    readonly Between: "BETWEEN";
};
export declare type FlowAmplitudeConnectorOperator = (typeof FlowAmplitudeConnectorOperator)[keyof typeof FlowAmplitudeConnectorOperator];
export declare const FlowConnectorType: {
    readonly SAPOData: "SAPOData";
    readonly Salesforce: "Salesforce";
    readonly Singular: "Singular";
    readonly Slack: "Slack";
    readonly Redshift: "Redshift";
    readonly S3: "S3";
    readonly Marketo: "Marketo";
    readonly Googleanalytics: "Googleanalytics";
    readonly Zendesk: "Zendesk";
    readonly Servicenow: "Servicenow";
    readonly Datadog: "Datadog";
    readonly Trendmicro: "Trendmicro";
    readonly Snowflake: "Snowflake";
    readonly Dynatrace: "Dynatrace";
    readonly Infornexus: "Infornexus";
    readonly Amplitude: "Amplitude";
    readonly Veeva: "Veeva";
    readonly EventBridge: "EventBridge";
    readonly Upsolver: "Upsolver";
    readonly LookoutMetrics: "LookoutMetrics";
};
export declare type FlowConnectorType = (typeof FlowConnectorType)[keyof typeof FlowConnectorType];
export declare const FlowDatadogConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly Between: "BETWEEN";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowDatadogConnectorOperator = (typeof FlowDatadogConnectorOperator)[keyof typeof FlowDatadogConnectorOperator];
export declare const FlowDynatraceConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly Between: "BETWEEN";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowDynatraceConnectorOperator = (typeof FlowDynatraceConnectorOperator)[keyof typeof FlowDynatraceConnectorOperator];
export declare const FlowFileType: {
    readonly Csv: "CSV";
    readonly Json: "JSON";
    readonly Parquet: "PARQUET";
};
export declare type FlowFileType = (typeof FlowFileType)[keyof typeof FlowFileType];
export declare const FlowGoogleAnalyticsConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly Between: "BETWEEN";
};
export declare type FlowGoogleAnalyticsConnectorOperator = (typeof FlowGoogleAnalyticsConnectorOperator)[keyof typeof FlowGoogleAnalyticsConnectorOperator];
export declare const FlowInforNexusConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly Between: "BETWEEN";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowInforNexusConnectorOperator = (typeof FlowInforNexusConnectorOperator)[keyof typeof FlowInforNexusConnectorOperator];
export declare const FlowMarketoConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowMarketoConnectorOperator = (typeof FlowMarketoConnectorOperator)[keyof typeof FlowMarketoConnectorOperator];
export declare const FlowOperatorPropertiesKeys: {
    readonly Value: "VALUE";
    readonly Values: "VALUES";
    readonly DataType: "DATA_TYPE";
    readonly UpperBound: "UPPER_BOUND";
    readonly LowerBound: "LOWER_BOUND";
    readonly SourceDataType: "SOURCE_DATA_TYPE";
    readonly DestinationDataType: "DESTINATION_DATA_TYPE";
    readonly ValidationAction: "VALIDATION_ACTION";
    readonly MaskValue: "MASK_VALUE";
    readonly MaskLength: "MASK_LENGTH";
    readonly TruncateLength: "TRUNCATE_LENGTH";
    readonly MathOperationFieldsOrder: "MATH_OPERATION_FIELDS_ORDER";
    readonly ConcatFormat: "CONCAT_FORMAT";
    readonly SubfieldCategoryMap: "SUBFIELD_CATEGORY_MAP";
    readonly ExcludeSourceFieldsList: "EXCLUDE_SOURCE_FIELDS_LIST";
};
export declare type FlowOperatorPropertiesKeys = (typeof FlowOperatorPropertiesKeys)[keyof typeof FlowOperatorPropertiesKeys];
export declare const FlowPrefixFormat: {
    readonly Year: "YEAR";
    readonly Month: "MONTH";
    readonly Day: "DAY";
    readonly Hour: "HOUR";
    readonly Minute: "MINUTE";
};
export declare type FlowPrefixFormat = (typeof FlowPrefixFormat)[keyof typeof FlowPrefixFormat];
export declare const FlowPrefixType: {
    readonly Filename: "FILENAME";
    readonly Path: "PATH";
    readonly PathAndFilename: "PATH_AND_FILENAME";
};
export declare type FlowPrefixType = (typeof FlowPrefixType)[keyof typeof FlowPrefixType];
export declare const FlowS3ConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowS3ConnectorOperator = (typeof FlowS3ConnectorOperator)[keyof typeof FlowS3ConnectorOperator];
export declare const FlowS3InputFormatConfigS3InputFileType: {
    readonly Csv: "CSV";
    readonly Json: "JSON";
};
export declare type FlowS3InputFormatConfigS3InputFileType = (typeof FlowS3InputFormatConfigS3InputFileType)[keyof typeof FlowS3InputFormatConfigS3InputFileType];
export declare const FlowSAPODataConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly Contains: "CONTAINS";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowSAPODataConnectorOperator = (typeof FlowSAPODataConnectorOperator)[keyof typeof FlowSAPODataConnectorOperator];
export declare const FlowSalesforceConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly Contains: "CONTAINS";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowSalesforceConnectorOperator = (typeof FlowSalesforceConnectorOperator)[keyof typeof FlowSalesforceConnectorOperator];
export declare const FlowScheduledTriggerPropertiesDataPullMode: {
    readonly Incremental: "Incremental";
    readonly Complete: "Complete";
};
export declare type FlowScheduledTriggerPropertiesDataPullMode = (typeof FlowScheduledTriggerPropertiesDataPullMode)[keyof typeof FlowScheduledTriggerPropertiesDataPullMode];
export declare const FlowServiceNowConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly Contains: "CONTAINS";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowServiceNowConnectorOperator = (typeof FlowServiceNowConnectorOperator)[keyof typeof FlowServiceNowConnectorOperator];
export declare const FlowSingularConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowSingularConnectorOperator = (typeof FlowSingularConnectorOperator)[keyof typeof FlowSingularConnectorOperator];
export declare const FlowSlackConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly Between: "BETWEEN";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowSlackConnectorOperator = (typeof FlowSlackConnectorOperator)[keyof typeof FlowSlackConnectorOperator];
export declare const FlowTaskType: {
    readonly Arithmetic: "Arithmetic";
    readonly Filter: "Filter";
    readonly Map: "Map";
    readonly MapAll: "Map_all";
    readonly Mask: "Mask";
    readonly Merge: "Merge";
    readonly Truncate: "Truncate";
    readonly Validate: "Validate";
};
export declare type FlowTaskType = (typeof FlowTaskType)[keyof typeof FlowTaskType];
export declare const FlowTrendmicroConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly EqualTo: "EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowTrendmicroConnectorOperator = (typeof FlowTrendmicroConnectorOperator)[keyof typeof FlowTrendmicroConnectorOperator];
export declare const FlowTriggerType: {
    readonly Scheduled: "Scheduled";
    readonly Event: "Event";
    readonly OnDemand: "OnDemand";
};
export declare type FlowTriggerType = (typeof FlowTriggerType)[keyof typeof FlowTriggerType];
export declare const FlowVeevaConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowVeevaConnectorOperator = (typeof FlowVeevaConnectorOperator)[keyof typeof FlowVeevaConnectorOperator];
export declare const FlowWriteOperationType: {
    readonly Insert: "INSERT";
    readonly Upsert: "UPSERT";
    readonly Update: "UPDATE";
};
export declare type FlowWriteOperationType = (typeof FlowWriteOperationType)[keyof typeof FlowWriteOperationType];
export declare const FlowZendeskConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly GreaterThan: "GREATER_THAN";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type FlowZendeskConnectorOperator = (typeof FlowZendeskConnectorOperator)[keyof typeof FlowZendeskConnectorOperator];
