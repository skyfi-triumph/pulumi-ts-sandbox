export declare const ModuleVersionVisibility: {
    readonly Private: "PRIVATE";
};
/**
 * The scope at which the type is visible and usable in CloudFormation operations.
 *
 * The only allowed value at present is:
 *
 * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
 */
export declare type ModuleVersionVisibility = (typeof ModuleVersionVisibility)[keyof typeof ModuleVersionVisibility];
export declare const PublicTypeVersionType: {
    readonly Resource: "RESOURCE";
    readonly Module: "MODULE";
};
/**
 * The kind of extension
 */
export declare type PublicTypeVersionType = (typeof PublicTypeVersionType)[keyof typeof PublicTypeVersionType];
export declare const PublisherIdentityProvider: {
    readonly AWSMarketplace: "AWS_Marketplace";
    readonly GitHub: "GitHub";
    readonly Bitbucket: "Bitbucket";
};
/**
 * The type of account used as the identity provider when registering this publisher with CloudFormation.
 */
export declare type PublisherIdentityProvider = (typeof PublisherIdentityProvider)[keyof typeof PublisherIdentityProvider];
export declare const PublisherStatus: {
    readonly Verified: "VERIFIED";
    readonly Unverified: "UNVERIFIED";
};
/**
 * Whether the publisher is verified.
 */
export declare type PublisherStatus = (typeof PublisherStatus)[keyof typeof PublisherStatus];
export declare const ResourceVersionProvisioningType: {
    readonly NonProvisionable: "NON_PROVISIONABLE";
    readonly Immutable: "IMMUTABLE";
    readonly FullyMutable: "FULLY_MUTABLE";
};
/**
 * The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.
 */
export declare type ResourceVersionProvisioningType = (typeof ResourceVersionProvisioningType)[keyof typeof ResourceVersionProvisioningType];
export declare const ResourceVersionVisibility: {
    readonly Public: "PUBLIC";
    readonly Private: "PRIVATE";
};
/**
 * The scope at which the type is visible and usable in CloudFormation operations.
 *
 * Valid values include:
 *
 * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
 *
 * PUBLIC: The type is publically visible and usable within any Amazon account.
 */
export declare type ResourceVersionVisibility = (typeof ResourceVersionVisibility)[keyof typeof ResourceVersionVisibility];
export declare const StackSetCallAs: {
    readonly Self: "SELF";
    readonly DelegatedAdmin: "DELEGATED_ADMIN";
};
/**
 * Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the organization's management account, specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
 */
export declare type StackSetCallAs = (typeof StackSetCallAs)[keyof typeof StackSetCallAs];
export declare const StackSetCapability: {
    readonly CapabilityIam: "CAPABILITY_IAM";
    readonly CapabilityNamedIam: "CAPABILITY_NAMED_IAM";
    readonly CapabilityAutoExpand: "CAPABILITY_AUTO_EXPAND";
};
export declare type StackSetCapability = (typeof StackSetCapability)[keyof typeof StackSetCapability];
export declare const StackSetPermissionModel: {
    readonly ServiceManaged: "SERVICE_MANAGED";
    readonly SelfManaged: "SELF_MANAGED";
};
/**
 * Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
 */
export declare type StackSetPermissionModel = (typeof StackSetPermissionModel)[keyof typeof StackSetPermissionModel];
export declare const StackSetRegionConcurrencyType: {
    readonly Sequential: "SEQUENTIAL";
    readonly Parallel: "PARALLEL";
};
/**
 * The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time
 */
export declare type StackSetRegionConcurrencyType = (typeof StackSetRegionConcurrencyType)[keyof typeof StackSetRegionConcurrencyType];
export declare const TypeActivationType: {
    readonly Resource: "RESOURCE";
    readonly Module: "MODULE";
};
/**
 * The kind of extension
 */
export declare type TypeActivationType = (typeof TypeActivationType)[keyof typeof TypeActivationType];
export declare const TypeActivationVersionBump: {
    readonly Major: "MAJOR";
    readonly Minor: "MINOR";
};
/**
 * Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
 */
export declare type TypeActivationVersionBump = (typeof TypeActivationVersionBump)[keyof typeof TypeActivationVersionBump];
