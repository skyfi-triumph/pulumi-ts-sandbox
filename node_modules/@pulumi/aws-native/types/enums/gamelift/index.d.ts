export declare const AliasRoutingStrategyType: {
    readonly Simple: "SIMPLE";
    readonly Terminal: "TERMINAL";
};
/**
 * Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
 */
export declare type AliasRoutingStrategyType = (typeof AliasRoutingStrategyType)[keyof typeof AliasRoutingStrategyType];
export declare const FleetCertificateConfigurationCertificateType: {
    readonly Disabled: "DISABLED";
    readonly Generated: "GENERATED";
};
export declare type FleetCertificateConfigurationCertificateType = (typeof FleetCertificateConfigurationCertificateType)[keyof typeof FleetCertificateConfigurationCertificateType];
export declare const FleetIpPermissionProtocol: {
    readonly Tcp: "TCP";
    readonly Udp: "UDP";
};
/**
 * The network communication protocol used by the fleet.
 */
export declare type FleetIpPermissionProtocol = (typeof FleetIpPermissionProtocol)[keyof typeof FleetIpPermissionProtocol];
export declare const FleetNewGameSessionProtectionPolicy: {
    readonly FullProtection: "FullProtection";
    readonly NoProtection: "NoProtection";
};
/**
 * A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
 */
export declare type FleetNewGameSessionProtectionPolicy = (typeof FleetNewGameSessionProtectionPolicy)[keyof typeof FleetNewGameSessionProtectionPolicy];
export declare const FleetType: {
    readonly OnDemand: "ON_DEMAND";
    readonly Spot: "SPOT";
};
/**
 * Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
 */
export declare type FleetType = (typeof FleetType)[keyof typeof FleetType];
export declare const GameServerGroupBalancingStrategy: {
    readonly SpotOnly: "SPOT_ONLY";
    readonly SpotPreferred: "SPOT_PREFERRED";
    readonly OnDemandOnly: "ON_DEMAND_ONLY";
};
/**
 * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
 */
export declare type GameServerGroupBalancingStrategy = (typeof GameServerGroupBalancingStrategy)[keyof typeof GameServerGroupBalancingStrategy];
export declare const GameServerGroupDeleteOption: {
    readonly SafeDelete: "SAFE_DELETE";
    readonly ForceDelete: "FORCE_DELETE";
    readonly Retain: "RETAIN";
};
/**
 * The type of delete to perform.
 */
export declare type GameServerGroupDeleteOption = (typeof GameServerGroupDeleteOption)[keyof typeof GameServerGroupDeleteOption];
export declare const GameServerGroupGameServerProtectionPolicy: {
    readonly NoProtection: "NO_PROTECTION";
    readonly FullProtection: "FULL_PROTECTION";
};
/**
 * A flag that indicates whether instances in the game server group are protected from early termination.
 */
export declare type GameServerGroupGameServerProtectionPolicy = (typeof GameServerGroupGameServerProtectionPolicy)[keyof typeof GameServerGroupGameServerProtectionPolicy];
