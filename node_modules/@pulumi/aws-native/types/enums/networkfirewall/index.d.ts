export declare const FirewallPolicyRuleOrder: {
    readonly DefaultActionOrder: "DEFAULT_ACTION_ORDER";
    readonly StrictOrder: "STRICT_ORDER";
};
export declare type FirewallPolicyRuleOrder = (typeof FirewallPolicyRuleOrder)[keyof typeof FirewallPolicyRuleOrder];
export declare const LoggingConfigurationLogDestinationConfigLogDestinationType: {
    readonly S3: "S3";
    readonly CloudWatchLogs: "CloudWatchLogs";
    readonly KinesisDataFirehose: "KinesisDataFirehose";
};
export declare type LoggingConfigurationLogDestinationConfigLogDestinationType = (typeof LoggingConfigurationLogDestinationConfigLogDestinationType)[keyof typeof LoggingConfigurationLogDestinationConfigLogDestinationType];
export declare const LoggingConfigurationLogDestinationConfigLogType: {
    readonly Alert: "ALERT";
    readonly Flow: "FLOW";
};
export declare type LoggingConfigurationLogDestinationConfigLogType = (typeof LoggingConfigurationLogDestinationConfigLogType)[keyof typeof LoggingConfigurationLogDestinationConfigLogType];
export declare const RuleGroupGeneratedRulesType: {
    readonly Allowlist: "ALLOWLIST";
    readonly Denylist: "DENYLIST";
};
export declare type RuleGroupGeneratedRulesType = (typeof RuleGroupGeneratedRulesType)[keyof typeof RuleGroupGeneratedRulesType];
export declare const RuleGroupHeaderDirection: {
    readonly Forward: "FORWARD";
    readonly Any: "ANY";
};
export declare type RuleGroupHeaderDirection = (typeof RuleGroupHeaderDirection)[keyof typeof RuleGroupHeaderDirection];
export declare const RuleGroupHeaderProtocol: {
    readonly Ip: "IP";
    readonly Tcp: "TCP";
    readonly Udp: "UDP";
    readonly Icmp: "ICMP";
    readonly Http: "HTTP";
    readonly Ftp: "FTP";
    readonly Tls: "TLS";
    readonly Smb: "SMB";
    readonly Dns: "DNS";
    readonly Dcerpc: "DCERPC";
    readonly Ssh: "SSH";
    readonly Smtp: "SMTP";
    readonly Imap: "IMAP";
    readonly Msn: "MSN";
    readonly Krb5: "KRB5";
    readonly Ikev2: "IKEV2";
    readonly Tftp: "TFTP";
    readonly Ntp: "NTP";
    readonly Dhcp: "DHCP";
};
export declare type RuleGroupHeaderProtocol = (typeof RuleGroupHeaderProtocol)[keyof typeof RuleGroupHeaderProtocol];
export declare const RuleGroupRuleOrder: {
    readonly DefaultActionOrder: "DEFAULT_ACTION_ORDER";
    readonly StrictOrder: "STRICT_ORDER";
};
export declare type RuleGroupRuleOrder = (typeof RuleGroupRuleOrder)[keyof typeof RuleGroupRuleOrder];
export declare const RuleGroupStatefulRuleAction: {
    readonly Pass: "PASS";
    readonly Drop: "DROP";
    readonly Alert: "ALERT";
};
export declare type RuleGroupStatefulRuleAction = (typeof RuleGroupStatefulRuleAction)[keyof typeof RuleGroupStatefulRuleAction];
export declare const RuleGroupTCPFlag: {
    readonly Fin: "FIN";
    readonly Syn: "SYN";
    readonly Rst: "RST";
    readonly Psh: "PSH";
    readonly Ack: "ACK";
    readonly Urg: "URG";
    readonly Ece: "ECE";
    readonly Cwr: "CWR";
};
export declare type RuleGroupTCPFlag = (typeof RuleGroupTCPFlag)[keyof typeof RuleGroupTCPFlag];
export declare const RuleGroupTargetType: {
    readonly TlsSni: "TLS_SNI";
    readonly HttpHost: "HTTP_HOST";
};
export declare type RuleGroupTargetType = (typeof RuleGroupTargetType)[keyof typeof RuleGroupTargetType];
export declare const RuleGroupTypeEnum: {
    readonly Stateless: "STATELESS";
    readonly Stateful: "STATEFUL";
};
export declare type RuleGroupTypeEnum = (typeof RuleGroupTypeEnum)[keyof typeof RuleGroupTypeEnum];
