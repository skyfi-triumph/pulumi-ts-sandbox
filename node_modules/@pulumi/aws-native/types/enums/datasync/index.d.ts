export declare const AgentEndpointType: {
    readonly Fips: "FIPS";
    readonly Public: "PUBLIC";
    readonly PrivateLink: "PRIVATE_LINK";
};
/**
 * The service endpoints that the agent will connect to.
 */
export declare type AgentEndpointType = (typeof AgentEndpointType)[keyof typeof AgentEndpointType];
export declare const LocationHDFSAuthenticationType: {
    readonly Simple: "SIMPLE";
    readonly Kerberos: "KERBEROS";
};
/**
 * The authentication mode used to determine identity of user.
 */
export declare type LocationHDFSAuthenticationType = (typeof LocationHDFSAuthenticationType)[keyof typeof LocationHDFSAuthenticationType];
export declare const LocationHDFSQopConfigurationDataTransferProtection: {
    readonly Authentication: "AUTHENTICATION";
    readonly Integrity: "INTEGRITY";
    readonly Privacy: "PRIVACY";
    readonly Disabled: "DISABLED";
};
/**
 * Configuration for Data Transfer Protection.
 */
export declare type LocationHDFSQopConfigurationDataTransferProtection = (typeof LocationHDFSQopConfigurationDataTransferProtection)[keyof typeof LocationHDFSQopConfigurationDataTransferProtection];
export declare const LocationHDFSQopConfigurationRpcProtection: {
    readonly Authentication: "AUTHENTICATION";
    readonly Integrity: "INTEGRITY";
    readonly Privacy: "PRIVACY";
    readonly Disabled: "DISABLED";
};
/**
 * Configuration for RPC Protection.
 */
export declare type LocationHDFSQopConfigurationRpcProtection = (typeof LocationHDFSQopConfigurationRpcProtection)[keyof typeof LocationHDFSQopConfigurationRpcProtection];
export declare const LocationNFSMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Nfs3: "NFS3";
    readonly Nfs40: "NFS4_0";
    readonly Nfs41: "NFS4_1";
};
/**
 * The specific NFS version that you want DataSync to use to mount your NFS share.
 */
export declare type LocationNFSMountOptionsVersion = (typeof LocationNFSMountOptionsVersion)[keyof typeof LocationNFSMountOptionsVersion];
export declare const LocationObjectStorageServerProtocol: {
    readonly Https: "HTTPS";
    readonly Http: "HTTP";
};
/**
 * The protocol that the object storage server uses to communicate.
 */
export declare type LocationObjectStorageServerProtocol = (typeof LocationObjectStorageServerProtocol)[keyof typeof LocationObjectStorageServerProtocol];
export declare const LocationS3S3StorageClass: {
    readonly Standard: "STANDARD";
    readonly StandardIa: "STANDARD_IA";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly Glacier: "GLACIER";
    readonly DeepArchive: "DEEP_ARCHIVE";
};
/**
 * The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
 */
export declare type LocationS3S3StorageClass = (typeof LocationS3S3StorageClass)[keyof typeof LocationS3S3StorageClass];
export declare const LocationSMBMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Smb2: "SMB2";
    readonly Smb3: "SMB3";
};
/**
 * The specific SMB version that you want DataSync to use to mount your SMB share.
 */
export declare type LocationSMBMountOptionsVersion = (typeof LocationSMBMountOptionsVersion)[keyof typeof LocationSMBMountOptionsVersion];
export declare const TaskFilterRuleFilterType: {
    readonly SimplePattern: "SIMPLE_PATTERN";
};
/**
 * The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
 */
export declare type TaskFilterRuleFilterType = (typeof TaskFilterRuleFilterType)[keyof typeof TaskFilterRuleFilterType];
export declare const TaskOptionsAtime: {
    readonly None: "NONE";
    readonly BestEffort: "BEST_EFFORT";
};
/**
 * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
 */
export declare type TaskOptionsAtime = (typeof TaskOptionsAtime)[keyof typeof TaskOptionsAtime];
export declare const TaskOptionsGid: {
    readonly None: "NONE";
    readonly IntValue: "INT_VALUE";
    readonly Name: "NAME";
    readonly Both: "BOTH";
};
/**
 * The group ID (GID) of the file's owners.
 */
export declare type TaskOptionsGid = (typeof TaskOptionsGid)[keyof typeof TaskOptionsGid];
export declare const TaskOptionsLogLevel: {
    readonly Off: "OFF";
    readonly Basic: "BASIC";
    readonly Transfer: "TRANSFER";
};
/**
 * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
 */
export declare type TaskOptionsLogLevel = (typeof TaskOptionsLogLevel)[keyof typeof TaskOptionsLogLevel];
export declare const TaskOptionsMtime: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
 */
export declare type TaskOptionsMtime = (typeof TaskOptionsMtime)[keyof typeof TaskOptionsMtime];
export declare const TaskOptionsOverwriteMode: {
    readonly Always: "ALWAYS";
    readonly Never: "NEVER";
};
/**
 * A value that determines whether files at the destination should be overwritten or preserved when copying files.
 */
export declare type TaskOptionsOverwriteMode = (typeof TaskOptionsOverwriteMode)[keyof typeof TaskOptionsOverwriteMode];
export declare const TaskOptionsPosixPermissions: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
 */
export declare type TaskOptionsPosixPermissions = (typeof TaskOptionsPosixPermissions)[keyof typeof TaskOptionsPosixPermissions];
export declare const TaskOptionsPreserveDeletedFiles: {
    readonly Preserve: "PRESERVE";
    readonly Remove: "REMOVE";
};
/**
 * A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
 */
export declare type TaskOptionsPreserveDeletedFiles = (typeof TaskOptionsPreserveDeletedFiles)[keyof typeof TaskOptionsPreserveDeletedFiles];
export declare const TaskOptionsPreserveDevices: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
 */
export declare type TaskOptionsPreserveDevices = (typeof TaskOptionsPreserveDevices)[keyof typeof TaskOptionsPreserveDevices];
export declare const TaskOptionsSecurityDescriptorCopyFlags: {
    readonly None: "NONE";
    readonly OwnerDacl: "OWNER_DACL";
    readonly OwnerDaclSacl: "OWNER_DACL_SACL";
};
/**
 * A value that determines which components of the SMB security descriptor are copied during transfer.
 */
export declare type TaskOptionsSecurityDescriptorCopyFlags = (typeof TaskOptionsSecurityDescriptorCopyFlags)[keyof typeof TaskOptionsSecurityDescriptorCopyFlags];
export declare const TaskOptionsTaskQueueing: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * A value that determines whether tasks should be queued before executing the tasks.
 */
export declare type TaskOptionsTaskQueueing = (typeof TaskOptionsTaskQueueing)[keyof typeof TaskOptionsTaskQueueing];
export declare const TaskOptionsTransferMode: {
    readonly Changed: "CHANGED";
    readonly All: "ALL";
};
/**
 * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
 */
export declare type TaskOptionsTransferMode = (typeof TaskOptionsTransferMode)[keyof typeof TaskOptionsTransferMode];
export declare const TaskOptionsUid: {
    readonly None: "NONE";
    readonly IntValue: "INT_VALUE";
    readonly Name: "NAME";
    readonly Both: "BOTH";
};
/**
 * The user ID (UID) of the file's owner.
 */
export declare type TaskOptionsUid = (typeof TaskOptionsUid)[keyof typeof TaskOptionsUid];
export declare const TaskOptionsVerifyMode: {
    readonly PointInTimeConsistent: "POINT_IN_TIME_CONSISTENT";
    readonly OnlyFilesTransferred: "ONLY_FILES_TRANSFERRED";
    readonly None: "NONE";
};
/**
 * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
 */
export declare type TaskOptionsVerifyMode = (typeof TaskOptionsVerifyMode)[keyof typeof TaskOptionsVerifyMode];
export declare const TaskStatus: {
    readonly Available: "AVAILABLE";
    readonly Creating: "CREATING";
    readonly Queued: "QUEUED";
    readonly Running: "RUNNING";
    readonly Unavailable: "UNAVAILABLE";
};
/**
 * The status of the task that was described.
 */
export declare type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];
