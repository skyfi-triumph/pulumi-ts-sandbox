export declare const FirewallDomainListStatus: {
    readonly Complete: "COMPLETE";
    readonly Deleting: "DELETING";
    readonly Updating: "UPDATING";
    readonly CompleteImportFailed: "COMPLETE_IMPORT_FAILED";
    readonly Importing: "IMPORTING";
    readonly InactiveOwnerAccountClosed: "INACTIVE_OWNER_ACCOUNT_CLOSED";
};
/**
 * ResolverFirewallDomainList, possible values are COMPLETE, DELETING, UPDATING, COMPLETE_IMPORT_FAILED, IMPORTING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
 */
export declare type FirewallDomainListStatus = (typeof FirewallDomainListStatus)[keyof typeof FirewallDomainListStatus];
export declare const FirewallRuleGroupAssociationMutationProtection: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * MutationProtectionStatus
 */
export declare type FirewallRuleGroupAssociationMutationProtection = (typeof FirewallRuleGroupAssociationMutationProtection)[keyof typeof FirewallRuleGroupAssociationMutationProtection];
export declare const FirewallRuleGroupAssociationStatus: {
    readonly Complete: "COMPLETE";
    readonly Deleting: "DELETING";
    readonly Updating: "UPDATING";
    readonly InactiveOwnerAccountClosed: "INACTIVE_OWNER_ACCOUNT_CLOSED";
};
/**
 * ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
 */
export declare type FirewallRuleGroupAssociationStatus = (typeof FirewallRuleGroupAssociationStatus)[keyof typeof FirewallRuleGroupAssociationStatus];
export declare const FirewallRuleGroupFirewallRuleAction: {
    readonly Allow: "ALLOW";
    readonly Block: "BLOCK";
    readonly Alert: "ALERT";
};
/**
 * Rule Action
 */
export declare type FirewallRuleGroupFirewallRuleAction = (typeof FirewallRuleGroupFirewallRuleAction)[keyof typeof FirewallRuleGroupFirewallRuleAction];
export declare const FirewallRuleGroupFirewallRuleBlockOverrideDnsType: {
    readonly Cname: "CNAME";
};
/**
 * BlockOverrideDnsType
 */
export declare type FirewallRuleGroupFirewallRuleBlockOverrideDnsType = (typeof FirewallRuleGroupFirewallRuleBlockOverrideDnsType)[keyof typeof FirewallRuleGroupFirewallRuleBlockOverrideDnsType];
export declare const FirewallRuleGroupFirewallRuleBlockResponse: {
    readonly Nodata: "NODATA";
    readonly Nxdomain: "NXDOMAIN";
    readonly Override: "OVERRIDE";
};
/**
 * BlockResponse
 */
export declare type FirewallRuleGroupFirewallRuleBlockResponse = (typeof FirewallRuleGroupFirewallRuleBlockResponse)[keyof typeof FirewallRuleGroupFirewallRuleBlockResponse];
export declare const FirewallRuleGroupShareStatus: {
    readonly NotShared: "NOT_SHARED";
    readonly SharedWithMe: "SHARED_WITH_ME";
    readonly SharedByMe: "SHARED_BY_ME";
};
/**
 * ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
 */
export declare type FirewallRuleGroupShareStatus = (typeof FirewallRuleGroupShareStatus)[keyof typeof FirewallRuleGroupShareStatus];
export declare const FirewallRuleGroupStatus: {
    readonly Complete: "COMPLETE";
    readonly Deleting: "DELETING";
    readonly Updating: "UPDATING";
    readonly InactiveOwnerAccountClosed: "INACTIVE_OWNER_ACCOUNT_CLOSED";
};
/**
 * ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
 */
export declare type FirewallRuleGroupStatus = (typeof FirewallRuleGroupStatus)[keyof typeof FirewallRuleGroupStatus];
export declare const ResolverConfigAutodefinedReverse: {
    readonly Enabling: "ENABLING";
    readonly Enabled: "ENABLED";
    readonly Disabling: "DISABLING";
    readonly Disabled: "DISABLED";
};
/**
 * ResolverAutodefinedReverseStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
 */
export declare type ResolverConfigAutodefinedReverse = (typeof ResolverConfigAutodefinedReverse)[keyof typeof ResolverConfigAutodefinedReverse];
export declare const ResolverConfigAutodefinedReverseFlag: {
    readonly Disable: "DISABLE";
};
/**
 * Represents the desired status of AutodefinedReverse. The only supported value on creation is DISABLE. Deletion of this resource will return AutodefinedReverse to its default value (ENABLED).
 */
export declare type ResolverConfigAutodefinedReverseFlag = (typeof ResolverConfigAutodefinedReverseFlag)[keyof typeof ResolverConfigAutodefinedReverseFlag];
export declare const ResolverDNSSECConfigValidationStatus: {
    readonly Enabling: "ENABLING";
    readonly Enabled: "ENABLED";
    readonly Disabling: "DISABLING";
    readonly Disabled: "DISABLED";
};
/**
 * ResolverDNSSECValidationStatus, possible values are ENABLING, ENABLED, DISABLING AND DISABLED.
 */
export declare type ResolverDNSSECConfigValidationStatus = (typeof ResolverDNSSECConfigValidationStatus)[keyof typeof ResolverDNSSECConfigValidationStatus];
export declare const ResolverQueryLoggingConfigAssociationError: {
    readonly None: "NONE";
    readonly DestinationNotFound: "DESTINATION_NOT_FOUND";
    readonly AccessDenied: "ACCESS_DENIED";
};
/**
 * ResolverQueryLogConfigAssociationError
 */
export declare type ResolverQueryLoggingConfigAssociationError = (typeof ResolverQueryLoggingConfigAssociationError)[keyof typeof ResolverQueryLoggingConfigAssociationError];
export declare const ResolverQueryLoggingConfigAssociationStatus: {
    readonly Creating: "CREATING";
    readonly Active: "ACTIVE";
    readonly ActionNeeded: "ACTION_NEEDED";
    readonly Deleting: "DELETING";
    readonly Failed: "FAILED";
    readonly Overridden: "OVERRIDDEN";
};
/**
 * ResolverQueryLogConfigAssociationStatus
 */
export declare type ResolverQueryLoggingConfigAssociationStatus = (typeof ResolverQueryLoggingConfigAssociationStatus)[keyof typeof ResolverQueryLoggingConfigAssociationStatus];
export declare const ResolverQueryLoggingConfigShareStatus: {
    readonly NotShared: "NOT_SHARED";
    readonly SharedWithMe: "SHARED_WITH_ME";
    readonly SharedByMe: "SHARED_BY_ME";
};
/**
 * ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
 */
export declare type ResolverQueryLoggingConfigShareStatus = (typeof ResolverQueryLoggingConfigShareStatus)[keyof typeof ResolverQueryLoggingConfigShareStatus];
export declare const ResolverQueryLoggingConfigStatus: {
    readonly Creating: "CREATING";
    readonly Created: "CREATED";
    readonly Deleting: "DELETING";
    readonly Failed: "FAILED";
};
/**
 * ResolverQueryLogConfigStatus, possible values are CREATING, CREATED, DELETED AND FAILED.
 */
export declare type ResolverQueryLoggingConfigStatus = (typeof ResolverQueryLoggingConfigStatus)[keyof typeof ResolverQueryLoggingConfigStatus];
export declare const ResolverRuleRuleType: {
    readonly Forward: "FORWARD";
    readonly System: "SYSTEM";
    readonly Recursive: "RECURSIVE";
};
/**
 * When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
 */
export declare type ResolverRuleRuleType = (typeof ResolverRuleRuleType)[keyof typeof ResolverRuleRuleType];
