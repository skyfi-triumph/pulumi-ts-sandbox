export declare const IntegrationConnectorType: {
    readonly Salesforce: "Salesforce";
    readonly Marketo: "Marketo";
    readonly ServiceNow: "ServiceNow";
    readonly Zendesk: "Zendesk";
    readonly S3: "S3";
};
export declare type IntegrationConnectorType = (typeof IntegrationConnectorType)[keyof typeof IntegrationConnectorType];
export declare const IntegrationMarketoConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type IntegrationMarketoConnectorOperator = (typeof IntegrationMarketoConnectorOperator)[keyof typeof IntegrationMarketoConnectorOperator];
export declare const IntegrationOperatorPropertiesKeys: {
    readonly Value: "VALUE";
    readonly Values: "VALUES";
    readonly DataType: "DATA_TYPE";
    readonly UpperBound: "UPPER_BOUND";
    readonly LowerBound: "LOWER_BOUND";
    readonly SourceDataType: "SOURCE_DATA_TYPE";
    readonly DestinationDataType: "DESTINATION_DATA_TYPE";
    readonly ValidationAction: "VALIDATION_ACTION";
    readonly MaskValue: "MASK_VALUE";
    readonly MaskLength: "MASK_LENGTH";
    readonly TruncateLength: "TRUNCATE_LENGTH";
    readonly MathOperationFieldsOrder: "MATH_OPERATION_FIELDS_ORDER";
    readonly ConcatFormat: "CONCAT_FORMAT";
    readonly SubfieldCategoryMap: "SUBFIELD_CATEGORY_MAP";
};
export declare type IntegrationOperatorPropertiesKeys = (typeof IntegrationOperatorPropertiesKeys)[keyof typeof IntegrationOperatorPropertiesKeys];
export declare const IntegrationS3ConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type IntegrationS3ConnectorOperator = (typeof IntegrationS3ConnectorOperator)[keyof typeof IntegrationS3ConnectorOperator];
export declare const IntegrationSalesforceConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Contains: "CONTAINS";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type IntegrationSalesforceConnectorOperator = (typeof IntegrationSalesforceConnectorOperator)[keyof typeof IntegrationSalesforceConnectorOperator];
export declare const IntegrationScheduledTriggerPropertiesDataPullMode: {
    readonly Incremental: "Incremental";
    readonly Complete: "Complete";
};
export declare type IntegrationScheduledTriggerPropertiesDataPullMode = (typeof IntegrationScheduledTriggerPropertiesDataPullMode)[keyof typeof IntegrationScheduledTriggerPropertiesDataPullMode];
export declare const IntegrationServiceNowConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly LessThan: "LESS_THAN";
    readonly GreaterThan: "GREATER_THAN";
    readonly Contains: "CONTAINS";
    readonly Between: "BETWEEN";
    readonly LessThanOrEqualTo: "LESS_THAN_OR_EQUAL_TO";
    readonly GreaterThanOrEqualTo: "GREATER_THAN_OR_EQUAL_TO";
    readonly EqualTo: "EQUAL_TO";
    readonly NotEqualTo: "NOT_EQUAL_TO";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type IntegrationServiceNowConnectorOperator = (typeof IntegrationServiceNowConnectorOperator)[keyof typeof IntegrationServiceNowConnectorOperator];
export declare const IntegrationTaskType: {
    readonly Arithmetic: "Arithmetic";
    readonly Filter: "Filter";
    readonly Map: "Map";
    readonly Mask: "Mask";
    readonly Merge: "Merge";
    readonly Truncate: "Truncate";
    readonly Validate: "Validate";
};
export declare type IntegrationTaskType = (typeof IntegrationTaskType)[keyof typeof IntegrationTaskType];
export declare const IntegrationTriggerType: {
    readonly Scheduled: "Scheduled";
    readonly Event: "Event";
    readonly OnDemand: "OnDemand";
};
export declare type IntegrationTriggerType = (typeof IntegrationTriggerType)[keyof typeof IntegrationTriggerType];
export declare const IntegrationZendeskConnectorOperator: {
    readonly Projection: "PROJECTION";
    readonly GreaterThan: "GREATER_THAN";
    readonly Addition: "ADDITION";
    readonly Multiplication: "MULTIPLICATION";
    readonly Division: "DIVISION";
    readonly Subtraction: "SUBTRACTION";
    readonly MaskAll: "MASK_ALL";
    readonly MaskFirstN: "MASK_FIRST_N";
    readonly MaskLastN: "MASK_LAST_N";
    readonly ValidateNonNull: "VALIDATE_NON_NULL";
    readonly ValidateNonZero: "VALIDATE_NON_ZERO";
    readonly ValidateNonNegative: "VALIDATE_NON_NEGATIVE";
    readonly ValidateNumeric: "VALIDATE_NUMERIC";
    readonly NoOp: "NO_OP";
};
export declare type IntegrationZendeskConnectorOperator = (typeof IntegrationZendeskConnectorOperator)[keyof typeof IntegrationZendeskConnectorOperator];
export declare const ObjectTypeFieldContentType: {
    readonly String: "STRING";
    readonly Number: "NUMBER";
    readonly PhoneNumber: "PHONE_NUMBER";
    readonly EmailAddress: "EMAIL_ADDRESS";
    readonly Name: "NAME";
};
/**
 * The content type of the field. Used for determining equality when searching.
 */
export declare type ObjectTypeFieldContentType = (typeof ObjectTypeFieldContentType)[keyof typeof ObjectTypeFieldContentType];
export declare const ObjectTypeKeyStandardIdentifiersItem: {
    readonly Profile: "PROFILE";
    readonly Unique: "UNIQUE";
    readonly Secondary: "SECONDARY";
    readonly LookupOnly: "LOOKUP_ONLY";
    readonly NewOnly: "NEW_ONLY";
};
export declare type ObjectTypeKeyStandardIdentifiersItem = (typeof ObjectTypeKeyStandardIdentifiersItem)[keyof typeof ObjectTypeKeyStandardIdentifiersItem];
