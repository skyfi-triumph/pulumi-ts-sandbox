export declare const AuthorizerStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
export declare type AuthorizerStatus = (typeof AuthorizerStatus)[keyof typeof AuthorizerStatus];
export declare const CertificateMode: {
    readonly Default: "DEFAULT";
    readonly SniOnly: "SNI_ONLY";
};
export declare type CertificateMode = (typeof CertificateMode)[keyof typeof CertificateMode];
export declare const CertificateStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
    readonly Revoked: "REVOKED";
    readonly PendingTransfer: "PENDING_TRANSFER";
    readonly PendingActivation: "PENDING_ACTIVATION";
};
export declare type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];
export declare const CustomMetricMetricType: {
    readonly StringList: "string-list";
    readonly IpAddressList: "ip-address-list";
    readonly NumberList: "number-list";
    readonly Number: "number";
};
/**
 * The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
 */
export declare type CustomMetricMetricType = (typeof CustomMetricMetricType)[keyof typeof CustomMetricMetricType];
export declare const DimensionType: {
    readonly TopicFilter: "TOPIC_FILTER";
};
/**
 * Specifies the type of the dimension.
 */
export declare type DimensionType = (typeof DimensionType)[keyof typeof DimensionType];
export declare const DomainConfigurationDomainType: {
    readonly Endpoint: "ENDPOINT";
    readonly AwsManaged: "AWS_MANAGED";
    readonly CustomerManaged: "CUSTOMER_MANAGED";
};
export declare type DomainConfigurationDomainType = (typeof DomainConfigurationDomainType)[keyof typeof DomainConfigurationDomainType];
export declare const DomainConfigurationServerCertificateSummaryServerCertificateStatus: {
    readonly Invalid: "INVALID";
    readonly Valid: "VALID";
};
export declare type DomainConfigurationServerCertificateSummaryServerCertificateStatus = (typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus)[keyof typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus];
export declare const DomainConfigurationServiceType: {
    readonly Data: "DATA";
    readonly CredentialProvider: "CREDENTIAL_PROVIDER";
    readonly Jobs: "JOBS";
};
export declare type DomainConfigurationServiceType = (typeof DomainConfigurationServiceType)[keyof typeof DomainConfigurationServiceType];
export declare const DomainConfigurationStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export declare type DomainConfigurationStatus = (typeof DomainConfigurationStatus)[keyof typeof DomainConfigurationStatus];
export declare const JobTemplateAction: {
    readonly Cancel: "CANCEL";
};
export declare type JobTemplateAction = (typeof JobTemplateAction)[keyof typeof JobTemplateAction];
export declare const JobTemplateFailureType: {
    readonly Failed: "FAILED";
    readonly Rejected: "REJECTED";
    readonly TimedOut: "TIMED_OUT";
    readonly All: "ALL";
};
export declare type JobTemplateFailureType = (typeof JobTemplateFailureType)[keyof typeof JobTemplateFailureType];
export declare const LoggingDefaultLogLevel: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Disabled: "DISABLED";
};
/**
 * The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export declare type LoggingDefaultLogLevel = (typeof LoggingDefaultLogLevel)[keyof typeof LoggingDefaultLogLevel];
export declare const MitigationActionEnableIoTLoggingParamsLogLevel: {
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Error: "ERROR";
    readonly Warn: "WARN";
};
/**
 *  Specifies which types of information are logged.
 */
export declare type MitigationActionEnableIoTLoggingParamsLogLevel = (typeof MitigationActionEnableIoTLoggingParamsLogLevel)[keyof typeof MitigationActionEnableIoTLoggingParamsLogLevel];
export declare const MitigationActionReplaceDefaultPolicyVersionParamsTemplateName: {
    readonly BlankPolicy: "BLANK_POLICY";
};
export declare type MitigationActionReplaceDefaultPolicyVersionParamsTemplateName = (typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName)[keyof typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName];
export declare const MitigationActionUpdateCACertificateParamsAction: {
    readonly Deactivate: "DEACTIVATE";
};
export declare type MitigationActionUpdateCACertificateParamsAction = (typeof MitigationActionUpdateCACertificateParamsAction)[keyof typeof MitigationActionUpdateCACertificateParamsAction];
export declare const MitigationActionUpdateDeviceCertificateParamsAction: {
    readonly Deactivate: "DEACTIVATE";
};
export declare type MitigationActionUpdateDeviceCertificateParamsAction = (typeof MitigationActionUpdateDeviceCertificateParamsAction)[keyof typeof MitigationActionUpdateDeviceCertificateParamsAction];
export declare const ResourceSpecificLoggingLogLevel: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Disabled: "DISABLED";
};
/**
 * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export declare type ResourceSpecificLoggingLogLevel = (typeof ResourceSpecificLoggingLogLevel)[keyof typeof ResourceSpecificLoggingLogLevel];
export declare const ResourceSpecificLoggingTargetType: {
    readonly ThingGroup: "THING_GROUP";
};
/**
 * The target type. Value must be THING_GROUP.
 */
export declare type ResourceSpecificLoggingTargetType = (typeof ResourceSpecificLoggingTargetType)[keyof typeof ResourceSpecificLoggingTargetType];
export declare const ScheduledAuditDayOfWeek: {
    readonly Sun: "SUN";
    readonly Mon: "MON";
    readonly Tue: "TUE";
    readonly Wed: "WED";
    readonly Thu: "THU";
    readonly Fri: "FRI";
    readonly Sat: "SAT";
};
/**
 * The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
 */
export declare type ScheduledAuditDayOfWeek = (typeof ScheduledAuditDayOfWeek)[keyof typeof ScheduledAuditDayOfWeek];
export declare const ScheduledAuditFrequency: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly Monthly: "MONTHLY";
};
/**
 * How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
 */
export declare type ScheduledAuditFrequency = (typeof ScheduledAuditFrequency)[keyof typeof ScheduledAuditFrequency];
export declare const SecurityProfileBehaviorCriteriaComparisonOperator: {
    readonly LessThan: "less-than";
    readonly LessThanEquals: "less-than-equals";
    readonly GreaterThan: "greater-than";
    readonly GreaterThanEquals: "greater-than-equals";
    readonly InCidrSet: "in-cidr-set";
    readonly NotInCidrSet: "not-in-cidr-set";
    readonly InPortSet: "in-port-set";
    readonly NotInPortSet: "not-in-port-set";
    readonly InSet: "in-set";
    readonly NotInSet: "not-in-set";
};
/**
 * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
 */
export declare type SecurityProfileBehaviorCriteriaComparisonOperator = (typeof SecurityProfileBehaviorCriteriaComparisonOperator)[keyof typeof SecurityProfileBehaviorCriteriaComparisonOperator];
export declare const SecurityProfileMachineLearningDetectionConfigConfidenceLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
/**
 * The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
 */
export declare type SecurityProfileMachineLearningDetectionConfigConfidenceLevel = (typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel)[keyof typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel];
export declare const SecurityProfileMetricDimensionOperator: {
    readonly In: "IN";
    readonly NotIn: "NOT_IN";
};
/**
 * Defines how the dimensionValues of a dimension are interpreted.
 */
export declare type SecurityProfileMetricDimensionOperator = (typeof SecurityProfileMetricDimensionOperator)[keyof typeof SecurityProfileMetricDimensionOperator];
export declare const SecurityProfileStatisticalThresholdStatistic: {
    readonly Average: "Average";
    readonly P0: "p0";
    readonly P01: "p0.1";
    readonly P001: "p0.01";
    readonly P1: "p1";
    readonly P10: "p10";
    readonly P50: "p50";
    readonly P90: "p90";
    readonly P99: "p99";
    readonly P999: "p99.9";
    readonly P9999: "p99.99";
    readonly P100: "p100";
};
/**
 * The percentile which resolves to a threshold value by which compliance with a behavior is determined
 */
export declare type SecurityProfileStatisticalThresholdStatistic = (typeof SecurityProfileStatisticalThresholdStatistic)[keyof typeof SecurityProfileStatisticalThresholdStatistic];
export declare const TopicRuleCannedAccessControlList: {
    readonly Private: "private";
    readonly PublicRead: "public-read";
    readonly PublicReadWrite: "public-read-write";
    readonly AwsExecRead: "aws-exec-read";
    readonly AuthenticatedRead: "authenticated-read";
    readonly BucketOwnerRead: "bucket-owner-read";
    readonly BucketOwnerFullControl: "bucket-owner-full-control";
    readonly LogDeliveryWrite: "log-delivery-write";
};
export declare type TopicRuleCannedAccessControlList = (typeof TopicRuleCannedAccessControlList)[keyof typeof TopicRuleCannedAccessControlList];
export declare const TopicRuleDestinationStatus: {
    readonly Enabled: "ENABLED";
    readonly InProgress: "IN_PROGRESS";
    readonly Disabled: "DISABLED";
};
export declare type TopicRuleDestinationStatus = (typeof TopicRuleDestinationStatus)[keyof typeof TopicRuleDestinationStatus];
