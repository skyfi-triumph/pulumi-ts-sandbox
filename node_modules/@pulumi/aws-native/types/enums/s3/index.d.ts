export declare const AccessPointNetworkOrigin: {
    readonly Internet: "Internet";
    readonly Vpc: "VPC";
};
/**
 * Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
 */
export declare type AccessPointNetworkOrigin = (typeof AccessPointNetworkOrigin)[keyof typeof AccessPointNetworkOrigin];
export declare const AccessPointPolicyStatusPropertiesIsPublic: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Specifies whether the policy is public or not.
 */
export declare type AccessPointPolicyStatusPropertiesIsPublic = (typeof AccessPointPolicyStatusPropertiesIsPublic)[keyof typeof AccessPointPolicyStatusPropertiesIsPublic];
export declare const BucketAccelerateConfigurationAccelerationStatus: {
    readonly Enabled: "Enabled";
    readonly Suspended: "Suspended";
};
/**
 * Configures the transfer acceleration state for an Amazon S3 bucket.
 */
export declare type BucketAccelerateConfigurationAccelerationStatus = (typeof BucketAccelerateConfigurationAccelerationStatus)[keyof typeof BucketAccelerateConfigurationAccelerationStatus];
export declare const BucketAccessControl: {
    readonly AuthenticatedRead: "AuthenticatedRead";
    readonly AwsExecRead: "AwsExecRead";
    readonly BucketOwnerFullControl: "BucketOwnerFullControl";
    readonly BucketOwnerRead: "BucketOwnerRead";
    readonly LogDeliveryWrite: "LogDeliveryWrite";
    readonly Private: "Private";
    readonly PublicRead: "PublicRead";
    readonly PublicReadWrite: "PublicReadWrite";
};
/**
 * A canned access control list (ACL) that grants predefined permissions to the bucket.
 */
export declare type BucketAccessControl = (typeof BucketAccessControl)[keyof typeof BucketAccessControl];
export declare const BucketCorsRuleAllowedMethodsItem: {
    readonly Get: "GET";
    readonly Put: "PUT";
    readonly Head: "HEAD";
    readonly Post: "POST";
    readonly Delete: "DELETE";
};
export declare type BucketCorsRuleAllowedMethodsItem = (typeof BucketCorsRuleAllowedMethodsItem)[keyof typeof BucketCorsRuleAllowedMethodsItem];
export declare const BucketDefaultRetentionMode: {
    readonly Compliance: "COMPLIANCE";
    readonly Governance: "GOVERNANCE";
};
export declare type BucketDefaultRetentionMode = (typeof BucketDefaultRetentionMode)[keyof typeof BucketDefaultRetentionMode];
export declare const BucketDeleteMarkerReplicationStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
export declare type BucketDeleteMarkerReplicationStatus = (typeof BucketDeleteMarkerReplicationStatus)[keyof typeof BucketDeleteMarkerReplicationStatus];
export declare const BucketDestinationFormat: {
    readonly Csv: "CSV";
    readonly Orc: "ORC";
    readonly Parquet: "Parquet";
};
/**
 * Specifies the file format used when exporting data to Amazon S3.
 */
export declare type BucketDestinationFormat = (typeof BucketDestinationFormat)[keyof typeof BucketDestinationFormat];
export declare const BucketIntelligentTieringConfigurationStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies the status of the configuration.
 */
export declare type BucketIntelligentTieringConfigurationStatus = (typeof BucketIntelligentTieringConfigurationStatus)[keyof typeof BucketIntelligentTieringConfigurationStatus];
export declare const BucketInventoryConfigurationIncludedObjectVersions: {
    readonly All: "All";
    readonly Current: "Current";
};
/**
 * Object versions to include in the inventory list.
 */
export declare type BucketInventoryConfigurationIncludedObjectVersions = (typeof BucketInventoryConfigurationIncludedObjectVersions)[keyof typeof BucketInventoryConfigurationIncludedObjectVersions];
export declare const BucketInventoryConfigurationOptionalFieldsItem: {
    readonly Size: "Size";
    readonly LastModifiedDate: "LastModifiedDate";
    readonly StorageClass: "StorageClass";
    readonly ETag: "ETag";
    readonly IsMultipartUploaded: "IsMultipartUploaded";
    readonly ReplicationStatus: "ReplicationStatus";
    readonly EncryptionStatus: "EncryptionStatus";
    readonly ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate";
    readonly ObjectLockMode: "ObjectLockMode";
    readonly ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus";
    readonly IntelligentTieringAccessTier: "IntelligentTieringAccessTier";
    readonly BucketKeyStatus: "BucketKeyStatus";
};
export declare type BucketInventoryConfigurationOptionalFieldsItem = (typeof BucketInventoryConfigurationOptionalFieldsItem)[keyof typeof BucketInventoryConfigurationOptionalFieldsItem];
export declare const BucketInventoryConfigurationScheduleFrequency: {
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Specifies the schedule for generating inventory results.
 */
export declare type BucketInventoryConfigurationScheduleFrequency = (typeof BucketInventoryConfigurationScheduleFrequency)[keyof typeof BucketInventoryConfigurationScheduleFrequency];
export declare const BucketMetricsStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
export declare type BucketMetricsStatus = (typeof BucketMetricsStatus)[keyof typeof BucketMetricsStatus];
export declare const BucketNoncurrentVersionTransitionStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly StandardIa: "STANDARD_IA";
};
/**
 * The class of storage used to store the object.
 */
export declare type BucketNoncurrentVersionTransitionStorageClass = (typeof BucketNoncurrentVersionTransitionStorageClass)[keyof typeof BucketNoncurrentVersionTransitionStorageClass];
export declare const BucketOwnershipControlsRuleObjectOwnership: {
    readonly ObjectWriter: "ObjectWriter";
    readonly BucketOwnerPreferred: "BucketOwnerPreferred";
};
/**
 * Specifies an object ownership rule.
 */
export declare type BucketOwnershipControlsRuleObjectOwnership = (typeof BucketOwnershipControlsRuleObjectOwnership)[keyof typeof BucketOwnershipControlsRuleObjectOwnership];
export declare const BucketRedirectAllRequestsToProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
 */
export declare type BucketRedirectAllRequestsToProtocol = (typeof BucketRedirectAllRequestsToProtocol)[keyof typeof BucketRedirectAllRequestsToProtocol];
export declare const BucketRedirectRuleProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
 */
export declare type BucketRedirectRuleProtocol = (typeof BucketRedirectRuleProtocol)[keyof typeof BucketRedirectRuleProtocol];
export declare const BucketReplicaModificationsStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies whether Amazon S3 replicates modifications on replicas.
 */
export declare type BucketReplicaModificationsStatus = (typeof BucketReplicaModificationsStatus)[keyof typeof BucketReplicaModificationsStatus];
export declare const BucketReplicationDestinationStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly ReducedRedundancy: "REDUCED_REDUNDANCY";
    readonly Standard: "STANDARD";
    readonly StandardIa: "STANDARD_IA";
};
/**
 * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy.
 */
export declare type BucketReplicationDestinationStorageClass = (typeof BucketReplicationDestinationStorageClass)[keyof typeof BucketReplicationDestinationStorageClass];
export declare const BucketReplicationRuleStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether the rule is enabled.
 */
export declare type BucketReplicationRuleStatus = (typeof BucketReplicationRuleStatus)[keyof typeof BucketReplicationRuleStatus];
export declare const BucketReplicationTimeStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
export declare type BucketReplicationTimeStatus = (typeof BucketReplicationTimeStatus)[keyof typeof BucketReplicationTimeStatus];
export declare const BucketRuleStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
export declare type BucketRuleStatus = (typeof BucketRuleStatus)[keyof typeof BucketRuleStatus];
export declare const BucketServerSideEncryptionByDefaultSSEAlgorithm: {
    readonly Awskms: "aws:kms";
    readonly Aes256: "AES256";
};
export declare type BucketServerSideEncryptionByDefaultSSEAlgorithm = (typeof BucketServerSideEncryptionByDefaultSSEAlgorithm)[keyof typeof BucketServerSideEncryptionByDefaultSSEAlgorithm];
export declare const BucketSseKmsEncryptedObjectsStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether Amazon S3 replicates objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service.
 */
export declare type BucketSseKmsEncryptedObjectsStatus = (typeof BucketSseKmsEncryptedObjectsStatus)[keyof typeof BucketSseKmsEncryptedObjectsStatus];
export declare const BucketTieringAccessTier: {
    readonly ArchiveAccess: "ARCHIVE_ACCESS";
    readonly DeepArchiveAccess: "DEEP_ARCHIVE_ACCESS";
};
/**
 * S3 Intelligent-Tiering access tier. See Storage class for automatically optimizing frequently and infrequently accessed objects for a list of access tiers in the S3 Intelligent-Tiering storage class.
 */
export declare type BucketTieringAccessTier = (typeof BucketTieringAccessTier)[keyof typeof BucketTieringAccessTier];
export declare const BucketTransitionStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly StandardIa: "STANDARD_IA";
};
export declare type BucketTransitionStorageClass = (typeof BucketTransitionStorageClass)[keyof typeof BucketTransitionStorageClass];
export declare const BucketVersioningConfigurationStatus: {
    readonly Enabled: "Enabled";
    readonly Suspended: "Suspended";
};
/**
 * The versioning state of the bucket.
 */
export declare type BucketVersioningConfigurationStatus = (typeof BucketVersioningConfigurationStatus)[keyof typeof BucketVersioningConfigurationStatus];
export declare const MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Specifies whether the policy is public or not.
 */
export declare type MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic = (typeof MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic)[keyof typeof MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic];
export declare const StorageLensS3BucketDestinationFormat: {
    readonly Csv: "CSV";
    readonly Parquet: "Parquet";
};
/**
 * Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
 */
export declare type StorageLensS3BucketDestinationFormat = (typeof StorageLensS3BucketDestinationFormat)[keyof typeof StorageLensS3BucketDestinationFormat];
export declare const StorageLensS3BucketDestinationOutputSchemaVersion: {
    readonly V1: "V_1";
};
/**
 * The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
 */
export declare type StorageLensS3BucketDestinationOutputSchemaVersion = (typeof StorageLensS3BucketDestinationOutputSchemaVersion)[keyof typeof StorageLensS3BucketDestinationOutputSchemaVersion];
