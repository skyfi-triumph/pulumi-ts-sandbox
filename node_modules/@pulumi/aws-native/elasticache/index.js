"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cacheCluster"), exports);
__exportStar(require("./globalReplicationGroup"), exports);
__exportStar(require("./parameterGroup"), exports);
__exportStar(require("./replicationGroup"), exports);
__exportStar(require("./securityGroup"), exports);
__exportStar(require("./securityGroupIngress"), exports);
__exportStar(require("./subnetGroup"), exports);
__exportStar(require("./user"), exports);
__exportStar(require("./userGroup"), exports);
// Export enums:
__exportStar(require("../types/enums/elasticache"), exports);
// Import resources to register:
const cacheCluster_1 = require("./cacheCluster");
const globalReplicationGroup_1 = require("./globalReplicationGroup");
const parameterGroup_1 = require("./parameterGroup");
const replicationGroup_1 = require("./replicationGroup");
const securityGroup_1 = require("./securityGroup");
const securityGroupIngress_1 = require("./securityGroupIngress");
const subnetGroup_1 = require("./subnetGroup");
const user_1 = require("./user");
const userGroup_1 = require("./userGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:elasticache:CacheCluster":
                return new cacheCluster_1.CacheCluster(name, undefined, { urn });
            case "aws-native:elasticache:GlobalReplicationGroup":
                return new globalReplicationGroup_1.GlobalReplicationGroup(name, undefined, { urn });
            case "aws-native:elasticache:ParameterGroup":
                return new parameterGroup_1.ParameterGroup(name, undefined, { urn });
            case "aws-native:elasticache:ReplicationGroup":
                return new replicationGroup_1.ReplicationGroup(name, undefined, { urn });
            case "aws-native:elasticache:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws-native:elasticache:SecurityGroupIngress":
                return new securityGroupIngress_1.SecurityGroupIngress(name, undefined, { urn });
            case "aws-native:elasticache:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            case "aws-native:elasticache:User":
                return new user_1.User(name, undefined, { urn });
            case "aws-native:elasticache:UserGroup":
                return new userGroup_1.UserGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "elasticache", _module);
//# sourceMappingURL=index.js.map