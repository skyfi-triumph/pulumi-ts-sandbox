import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Represents a studio that contains other Nimble Studio resources
 */
export declare class Studio extends pulumi.CustomResource {
    /**
     * Get an existing Studio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Studio;
    /**
     * Returns true if the given object is an instance of Studio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Studio;
    /**
     * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
     */
    readonly adminRoleArn: pulumi.Output<string>;
    /**
     * <p>A friendly name for the studio.</p>
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * <p>The Amazon Web Services Region where the studio resource is located.</p>
     */
    readonly homeRegion: pulumi.Output<string>;
    /**
     * <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO to enable Amazon Web Services SSO users to log in to Nimble Studio portal.</p>
     */
    readonly ssoClientId: pulumi.Output<string>;
    readonly studioEncryptionConfiguration: pulumi.Output<outputs.nimblestudio.StudioEncryptionConfiguration | undefined>;
    readonly studioId: pulumi.Output<string>;
    /**
     * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
     */
    readonly studioName: pulumi.Output<string>;
    /**
     * <p>The address of the web page for the studio.</p>
     */
    readonly studioUrl: pulumi.Output<string>;
    readonly tags: pulumi.Output<outputs.nimblestudio.StudioTags | undefined>;
    /**
     * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
     */
    readonly userRoleArn: pulumi.Output<string>;
    /**
     * Create a Studio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Studio resource.
 */
export interface StudioArgs {
    /**
     * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
     */
    adminRoleArn: pulumi.Input<string>;
    /**
     * <p>A friendly name for the studio.</p>
     */
    displayName: pulumi.Input<string>;
    studioEncryptionConfiguration?: pulumi.Input<inputs.nimblestudio.StudioEncryptionConfigurationArgs>;
    /**
     * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
     */
    studioName?: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.nimblestudio.StudioTagsArgs>;
    /**
     * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
     */
    userRoleArn: pulumi.Input<string>;
}
