import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Represents a launch profile which delegates access to a collection of studio components to studio users
 */
export declare class LaunchProfile extends pulumi.CustomResource {
    /**
     * Get an existing LaunchProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LaunchProfile;
    /**
     * Returns true if the given object is an instance of LaunchProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LaunchProfile;
    /**
     * <p>The description.</p>
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. </p>
     */
    readonly ec2SubnetIds: pulumi.Output<string[]>;
    readonly launchProfileId: pulumi.Output<string>;
    /**
     * <p>The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".</p>
     */
    readonly launchProfileProtocolVersions: pulumi.Output<string[]>;
    /**
     * <p>The name for the launch profile.</p>
     */
    readonly name: pulumi.Output<string>;
    readonly streamConfiguration: pulumi.Output<outputs.nimblestudio.LaunchProfileStreamConfiguration>;
    /**
     * <p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>
     */
    readonly studioComponentIds: pulumi.Output<string[]>;
    /**
     * <p>The studioId. </p>
     */
    readonly studioId: pulumi.Output<string>;
    readonly tags: pulumi.Output<outputs.nimblestudio.LaunchProfileTags | undefined>;
    /**
     * Create a LaunchProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchProfileArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LaunchProfile resource.
 */
export interface LaunchProfileArgs {
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. </p>
     */
    ec2SubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".</p>
     */
    launchProfileProtocolVersions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The name for the launch profile.</p>
     */
    name?: pulumi.Input<string>;
    streamConfiguration: pulumi.Input<inputs.nimblestudio.LaunchProfileStreamConfigurationArgs>;
    /**
     * <p>Unique identifiers for a collection of studio components that can be used with this launch profile.</p>
     */
    studioComponentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The studioId. </p>
     */
    studioId: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.nimblestudio.LaunchProfileTagsArgs>;
}
