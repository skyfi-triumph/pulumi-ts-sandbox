import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Represents a studio component which connects a non-Nimble Studio resource in your account to your studio
 */
export declare class StudioComponent extends pulumi.CustomResource {
    /**
     * Get an existing StudioComponent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StudioComponent;
    /**
     * Returns true if the given object is an instance of StudioComponent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StudioComponent;
    readonly configuration: pulumi.Output<outputs.nimblestudio.StudioComponentConfiguration | undefined>;
    /**
     * <p>The description.</p>
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    readonly ec2SecurityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    readonly initializationScripts: pulumi.Output<outputs.nimblestudio.StudioComponentInitializationScript[] | undefined>;
    /**
     * <p>The name for the studio component.</p>
     */
    readonly name: pulumi.Output<string>;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    readonly scriptParameters: pulumi.Output<outputs.nimblestudio.StudioComponentScriptParameterKeyValue[] | undefined>;
    readonly studioComponentId: pulumi.Output<string>;
    /**
     * <p>The studioId. </p>
     */
    readonly studioId: pulumi.Output<string>;
    readonly subtype: pulumi.Output<enums.nimblestudio.StudioComponentSubtype | undefined>;
    readonly tags: pulumi.Output<outputs.nimblestudio.StudioComponentTags | undefined>;
    readonly type: pulumi.Output<enums.nimblestudio.StudioComponentType>;
    /**
     * Create a StudioComponent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioComponentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a StudioComponent resource.
 */
export interface StudioComponentArgs {
    configuration?: pulumi.Input<inputs.nimblestudio.StudioComponentConfigurationArgs>;
    /**
     * <p>The description.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    ec2SecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    initializationScripts?: pulumi.Input<pulumi.Input<inputs.nimblestudio.StudioComponentInitializationScriptArgs>[]>;
    /**
     * <p>The name for the studio component.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.nimblestudio.StudioComponentScriptParameterKeyValueArgs>[]>;
    /**
     * <p>The studioId. </p>
     */
    studioId: pulumi.Input<string>;
    subtype?: pulumi.Input<enums.nimblestudio.StudioComponentSubtype>;
    tags?: pulumi.Input<inputs.nimblestudio.StudioComponentTagsArgs>;
    type: pulumi.Input<enums.nimblestudio.StudioComponentType>;
}
