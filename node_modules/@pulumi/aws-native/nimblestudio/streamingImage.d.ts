import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Represents a streaming session machine image that can be used to launch a streaming session
 */
export declare class StreamingImage extends pulumi.CustomResource {
    /**
     * Get an existing StreamingImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StreamingImage;
    /**
     * Returns true if the given object is an instance of StreamingImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StreamingImage;
    /**
     * <p>A human-readable description of the streaming image.</p>
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * <p>The ID of an EC2 machine image with which to create this streaming image.</p>
     */
    readonly ec2ImageId: pulumi.Output<string>;
    readonly encryptionConfiguration: pulumi.Output<outputs.nimblestudio.StreamingImageEncryptionConfiguration>;
    /**
     * <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
     */
    readonly eulaIds: pulumi.Output<string[]>;
    /**
     * <p>A friendly name for a streaming image resource.</p>
     */
    readonly name: pulumi.Output<string>;
    /**
     * <p>The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>
     */
    readonly owner: pulumi.Output<string>;
    /**
     * <p>The platform of the streaming image, either WINDOWS or LINUX.</p>
     */
    readonly platform: pulumi.Output<string>;
    readonly streamingImageId: pulumi.Output<string>;
    /**
     * <p>The studioId. </p>
     */
    readonly studioId: pulumi.Output<string>;
    readonly tags: pulumi.Output<outputs.nimblestudio.StreamingImageTags | undefined>;
    /**
     * Create a StreamingImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamingImageArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a StreamingImage resource.
 */
export interface StreamingImageArgs {
    /**
     * <p>A human-readable description of the streaming image.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The ID of an EC2 machine image with which to create this streaming image.</p>
     */
    ec2ImageId: pulumi.Input<string>;
    /**
     * <p>A friendly name for a streaming image resource.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>The studioId. </p>
     */
    studioId: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.nimblestudio.StreamingImageTagsArgs>;
}
