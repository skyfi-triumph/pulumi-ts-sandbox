import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * AWS Ground Station config resource type for CloudFormation.
 */
export declare class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Config;
    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Config;
    readonly arn: pulumi.Output<string>;
    readonly configData: pulumi.Output<outputs.groundstation.ConfigData>;
    readonly name: pulumi.Output<string>;
    readonly tags: pulumi.Output<outputs.groundstation.ConfigTag[] | undefined>;
    readonly type: pulumi.Output<string>;
    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    configData: pulumi.Input<inputs.groundstation.ConfigDataArgs>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.groundstation.ConfigTagArgs>[]>;
}
