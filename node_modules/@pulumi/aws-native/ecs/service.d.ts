import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource Type definition for AWS::ECS::Service
 */
export declare class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service;
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Service;
    readonly capacityProviderStrategy: pulumi.Output<outputs.ecs.ServiceCapacityProviderStrategyItem[] | undefined>;
    readonly cluster: pulumi.Output<string | undefined>;
    readonly deploymentConfiguration: pulumi.Output<outputs.ecs.ServiceDeploymentConfiguration | undefined>;
    readonly deploymentController: pulumi.Output<outputs.ecs.ServiceDeploymentController | undefined>;
    readonly desiredCount: pulumi.Output<number | undefined>;
    readonly enableECSManagedTags: pulumi.Output<boolean | undefined>;
    readonly enableExecuteCommand: pulumi.Output<boolean | undefined>;
    readonly healthCheckGracePeriodSeconds: pulumi.Output<number | undefined>;
    readonly launchType: pulumi.Output<enums.ecs.ServiceLaunchType | undefined>;
    readonly loadBalancers: pulumi.Output<outputs.ecs.ServiceLoadBalancer[] | undefined>;
    readonly name: pulumi.Output<string>;
    readonly networkConfiguration: pulumi.Output<outputs.ecs.ServiceNetworkConfiguration | undefined>;
    readonly placementConstraints: pulumi.Output<outputs.ecs.ServicePlacementConstraint[] | undefined>;
    readonly placementStrategies: pulumi.Output<outputs.ecs.ServicePlacementStrategy[] | undefined>;
    readonly platformVersion: pulumi.Output<string | undefined>;
    readonly propagateTags: pulumi.Output<enums.ecs.ServicePropagateTags | undefined>;
    readonly role: pulumi.Output<string | undefined>;
    readonly schedulingStrategy: pulumi.Output<enums.ecs.ServiceSchedulingStrategy | undefined>;
    readonly serviceArn: pulumi.Output<string>;
    readonly serviceName: pulumi.Output<string | undefined>;
    readonly serviceRegistries: pulumi.Output<outputs.ecs.ServiceRegistry[] | undefined>;
    readonly tags: pulumi.Output<outputs.ecs.ServiceTag[] | undefined>;
    readonly taskDefinition: pulumi.Output<string | undefined>;
    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    capacityProviderStrategy?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceCapacityProviderStrategyItemArgs>[]>;
    cluster?: pulumi.Input<string>;
    deploymentConfiguration?: pulumi.Input<inputs.ecs.ServiceDeploymentConfigurationArgs>;
    deploymentController?: pulumi.Input<inputs.ecs.ServiceDeploymentControllerArgs>;
    desiredCount?: pulumi.Input<number>;
    enableECSManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    launchType?: pulumi.Input<enums.ecs.ServiceLaunchType>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceLoadBalancerArgs>[]>;
    networkConfiguration?: pulumi.Input<inputs.ecs.ServiceNetworkConfigurationArgs>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.ServicePlacementConstraintArgs>[]>;
    placementStrategies?: pulumi.Input<pulumi.Input<inputs.ecs.ServicePlacementStrategyArgs>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<enums.ecs.ServicePropagateTags>;
    role?: pulumi.Input<string>;
    schedulingStrategy?: pulumi.Input<enums.ecs.ServiceSchedulingStrategy>;
    serviceName?: pulumi.Input<string>;
    serviceRegistries?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceRegistryArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceTagArgs>[]>;
    taskDefinition?: pulumi.Input<string>;
}
