import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Schema describing various properties for ECS TaskDefinition
 */
export declare class TaskDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TaskDefinition;
    /**
     * Returns true if the given object is an instance of TaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TaskDefinition;
    readonly containerDefinitions: pulumi.Output<outputs.ecs.TaskDefinitionContainerDefinition[] | undefined>;
    readonly cpu: pulumi.Output<string | undefined>;
    readonly ephemeralStorage: pulumi.Output<outputs.ecs.TaskDefinitionEphemeralStorage | undefined>;
    readonly executionRoleArn: pulumi.Output<string | undefined>;
    readonly family: pulumi.Output<string | undefined>;
    readonly inferenceAccelerators: pulumi.Output<outputs.ecs.TaskDefinitionInferenceAccelerator[] | undefined>;
    readonly ipcMode: pulumi.Output<string | undefined>;
    readonly memory: pulumi.Output<string | undefined>;
    readonly networkMode: pulumi.Output<string | undefined>;
    readonly pidMode: pulumi.Output<string | undefined>;
    readonly placementConstraints: pulumi.Output<outputs.ecs.TaskDefinitionPlacementConstraint[] | undefined>;
    readonly proxyConfiguration: pulumi.Output<outputs.ecs.TaskDefinitionProxyConfiguration | undefined>;
    readonly requiresCompatibilities: pulumi.Output<string[] | undefined>;
    readonly runtimePlatform: pulumi.Output<outputs.ecs.TaskDefinitionRuntimePlatform | undefined>;
    readonly tags: pulumi.Output<outputs.ecs.TaskDefinitionTag[] | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon ECS task definition
     */
    readonly taskDefinitionArn: pulumi.Output<string>;
    readonly taskRoleArn: pulumi.Output<string | undefined>;
    readonly volumes: pulumi.Output<outputs.ecs.TaskDefinitionVolume[] | undefined>;
    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TaskDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a TaskDefinition resource.
 */
export interface TaskDefinitionArgs {
    containerDefinitions?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionContainerDefinitionArgs>[]>;
    cpu?: pulumi.Input<string>;
    ephemeralStorage?: pulumi.Input<inputs.ecs.TaskDefinitionEphemeralStorageArgs>;
    executionRoleArn?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    inferenceAccelerators?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionInferenceAcceleratorArgs>[]>;
    ipcMode?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    networkMode?: pulumi.Input<string>;
    pidMode?: pulumi.Input<string>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraintArgs>[]>;
    proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfigurationArgs>;
    requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    runtimePlatform?: pulumi.Input<inputs.ecs.TaskDefinitionRuntimePlatformArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionTagArgs>[]>;
    taskRoleArn?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolumeArgs>[]>;
}
