import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for AWS::Athena::DataCatalog
 */
export declare class DataCatalog extends pulumi.CustomResource {
    /**
     * Get an existing DataCatalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DataCatalog;
    /**
     * Returns true if the given object is an instance of DataCatalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DataCatalog;
    /**
     * A description of the data catalog to be created.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
     */
    readonly parameters: pulumi.Output<any | undefined>;
    /**
     * A list of comma separated tags to add to the data catalog that is created.
     */
    readonly tags: pulumi.Output<outputs.athena.DataCatalogTag[] | undefined>;
    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
     */
    readonly type: pulumi.Output<enums.athena.DataCatalogType>;
    /**
     * Create a DataCatalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataCatalogArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DataCatalog resource.
 */
export interface DataCatalogArgs {
    /**
     * A description of the data catalog to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
     */
    parameters?: any;
    /**
     * A list of comma separated tags to add to the data catalog that is created.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.athena.DataCatalogTagArgs>[]>;
    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
     */
    type: pulumi.Input<enums.athena.DataCatalogType>;
}
