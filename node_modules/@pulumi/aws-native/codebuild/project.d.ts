import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::CodeBuild::Project
 *
 * @deprecated Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Project;
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Project;
    readonly arn: pulumi.Output<string>;
    readonly artifacts: pulumi.Output<outputs.codebuild.ProjectArtifacts>;
    readonly badgeEnabled: pulumi.Output<boolean | undefined>;
    readonly buildBatchConfig: pulumi.Output<outputs.codebuild.ProjectBuildBatchConfig | undefined>;
    readonly cache: pulumi.Output<outputs.codebuild.ProjectCache | undefined>;
    readonly concurrentBuildLimit: pulumi.Output<number | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly encryptionKey: pulumi.Output<string | undefined>;
    readonly environment: pulumi.Output<outputs.codebuild.ProjectEnvironment>;
    readonly fileSystemLocations: pulumi.Output<outputs.codebuild.ProjectFileSystemLocation[] | undefined>;
    readonly logsConfig: pulumi.Output<outputs.codebuild.ProjectLogsConfig | undefined>;
    readonly name: pulumi.Output<string | undefined>;
    readonly queuedTimeoutInMinutes: pulumi.Output<number | undefined>;
    readonly resourceAccessRole: pulumi.Output<string | undefined>;
    readonly secondaryArtifacts: pulumi.Output<outputs.codebuild.ProjectArtifacts[] | undefined>;
    readonly secondarySourceVersions: pulumi.Output<outputs.codebuild.ProjectSourceVersion[] | undefined>;
    readonly secondarySources: pulumi.Output<outputs.codebuild.ProjectSource[] | undefined>;
    readonly serviceRole: pulumi.Output<string>;
    readonly source: pulumi.Output<outputs.codebuild.ProjectSource>;
    readonly sourceVersion: pulumi.Output<string | undefined>;
    readonly tags: pulumi.Output<outputs.codebuild.ProjectTag[] | undefined>;
    readonly timeoutInMinutes: pulumi.Output<number | undefined>;
    readonly triggers: pulumi.Output<outputs.codebuild.ProjectTriggers | undefined>;
    readonly visibility: pulumi.Output<string | undefined>;
    readonly vpcConfig: pulumi.Output<outputs.codebuild.ProjectVpcConfig | undefined>;
    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    artifacts: pulumi.Input<inputs.codebuild.ProjectArtifactsArgs>;
    badgeEnabled?: pulumi.Input<boolean>;
    buildBatchConfig?: pulumi.Input<inputs.codebuild.ProjectBuildBatchConfigArgs>;
    cache?: pulumi.Input<inputs.codebuild.ProjectCacheArgs>;
    concurrentBuildLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    environment: pulumi.Input<inputs.codebuild.ProjectEnvironmentArgs>;
    fileSystemLocations?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectFileSystemLocationArgs>[]>;
    logsConfig?: pulumi.Input<inputs.codebuild.ProjectLogsConfigArgs>;
    name?: pulumi.Input<string>;
    queuedTimeoutInMinutes?: pulumi.Input<number>;
    resourceAccessRole?: pulumi.Input<string>;
    secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectArtifactsArgs>[]>;
    secondarySourceVersions?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSourceVersionArgs>[]>;
    secondarySources?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSourceArgs>[]>;
    serviceRole: pulumi.Input<string>;
    source: pulumi.Input<inputs.codebuild.ProjectSourceArgs>;
    sourceVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectTagArgs>[]>;
    timeoutInMinutes?: pulumi.Input<number>;
    triggers?: pulumi.Input<inputs.codebuild.ProjectTriggersArgs>;
    visibility?: pulumi.Input<string>;
    vpcConfig?: pulumi.Input<inputs.codebuild.ProjectVpcConfigArgs>;
}
