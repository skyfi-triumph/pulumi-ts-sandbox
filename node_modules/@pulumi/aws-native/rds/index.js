"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./dbcluster"), exports);
__exportStar(require("./dbclusterParameterGroup"), exports);
__exportStar(require("./dbinstance"), exports);
__exportStar(require("./dbparameterGroup"), exports);
__exportStar(require("./dbproxy"), exports);
__exportStar(require("./dbproxyEndpoint"), exports);
__exportStar(require("./dbproxyTargetGroup"), exports);
__exportStar(require("./dbsecurityGroup"), exports);
__exportStar(require("./dbsecurityGroupIngress"), exports);
__exportStar(require("./dbsubnetGroup"), exports);
__exportStar(require("./eventSubscription"), exports);
__exportStar(require("./globalCluster"), exports);
__exportStar(require("./optionGroup"), exports);
// Export enums:
__exportStar(require("../types/enums/rds"), exports);
// Import resources to register:
const dbcluster_1 = require("./dbcluster");
const dbclusterParameterGroup_1 = require("./dbclusterParameterGroup");
const dbinstance_1 = require("./dbinstance");
const dbparameterGroup_1 = require("./dbparameterGroup");
const dbproxy_1 = require("./dbproxy");
const dbproxyEndpoint_1 = require("./dbproxyEndpoint");
const dbproxyTargetGroup_1 = require("./dbproxyTargetGroup");
const dbsecurityGroup_1 = require("./dbsecurityGroup");
const dbsecurityGroupIngress_1 = require("./dbsecurityGroupIngress");
const dbsubnetGroup_1 = require("./dbsubnetGroup");
const eventSubscription_1 = require("./eventSubscription");
const globalCluster_1 = require("./globalCluster");
const optionGroup_1 = require("./optionGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:rds:DBCluster":
                return new dbcluster_1.DBCluster(name, undefined, { urn });
            case "aws-native:rds:DBClusterParameterGroup":
                return new dbclusterParameterGroup_1.DBClusterParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DBInstance":
                return new dbinstance_1.DBInstance(name, undefined, { urn });
            case "aws-native:rds:DBParameterGroup":
                return new dbparameterGroup_1.DBParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DBProxy":
                return new dbproxy_1.DBProxy(name, undefined, { urn });
            case "aws-native:rds:DBProxyEndpoint":
                return new dbproxyEndpoint_1.DBProxyEndpoint(name, undefined, { urn });
            case "aws-native:rds:DBProxyTargetGroup":
                return new dbproxyTargetGroup_1.DBProxyTargetGroup(name, undefined, { urn });
            case "aws-native:rds:DBSecurityGroup":
                return new dbsecurityGroup_1.DBSecurityGroup(name, undefined, { urn });
            case "aws-native:rds:DBSecurityGroupIngress":
                return new dbsecurityGroupIngress_1.DBSecurityGroupIngress(name, undefined, { urn });
            case "aws-native:rds:DBSubnetGroup":
                return new dbsubnetGroup_1.DBSubnetGroup(name, undefined, { urn });
            case "aws-native:rds:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws-native:rds:GlobalCluster":
                return new globalCluster_1.GlobalCluster(name, undefined, { urn });
            case "aws-native:rds:OptionGroup":
                return new optionGroup_1.OptionGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "rds", _module);
//# sourceMappingURL=index.js.map