import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 */
export declare class SimulationApplication extends pulumi.CustomResource {
    /**
     * Get an existing SimulationApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SimulationApplication;
    /**
     * Returns true if the given object is an instance of SimulationApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SimulationApplication;
    readonly arn: pulumi.Output<string>;
    /**
     * The current revision id.
     */
    readonly currentRevisionId: pulumi.Output<string | undefined>;
    /**
     * The URI of the Docker image for the robot application.
     */
    readonly environment: pulumi.Output<string | undefined>;
    /**
     * The name of the simulation application.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The rendering engine for the simulation application.
     */
    readonly renderingEngine: pulumi.Output<outputs.robomaker.SimulationApplicationRenderingEngine | undefined>;
    /**
     * The robot software suite (ROS distribution) used by the simulation application.
     */
    readonly robotSoftwareSuite: pulumi.Output<outputs.robomaker.SimulationApplicationRobotSoftwareSuite>;
    /**
     * The simulation software suite used by the simulation application.
     */
    readonly simulationSoftwareSuite: pulumi.Output<outputs.robomaker.SimulationApplicationSimulationSoftwareSuite>;
    /**
     * The sources of the simulation application.
     */
    readonly sources: pulumi.Output<outputs.robomaker.SimulationApplicationSourceConfig[] | undefined>;
    readonly tags: pulumi.Output<outputs.robomaker.SimulationApplicationTags | undefined>;
    /**
     * Create a SimulationApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SimulationApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a SimulationApplication resource.
 */
export interface SimulationApplicationArgs {
    /**
     * The current revision id.
     */
    currentRevisionId?: pulumi.Input<string>;
    /**
     * The URI of the Docker image for the robot application.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the simulation application.
     */
    name?: pulumi.Input<string>;
    /**
     * The rendering engine for the simulation application.
     */
    renderingEngine?: pulumi.Input<inputs.robomaker.SimulationApplicationRenderingEngineArgs>;
    /**
     * The robot software suite (ROS distribution) used by the simulation application.
     */
    robotSoftwareSuite: pulumi.Input<inputs.robomaker.SimulationApplicationRobotSoftwareSuiteArgs>;
    /**
     * The simulation software suite used by the simulation application.
     */
    simulationSoftwareSuite: pulumi.Input<inputs.robomaker.SimulationApplicationSimulationSoftwareSuiteArgs>;
    /**
     * The sources of the simulation application.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.robomaker.SimulationApplicationSourceConfigArgs>[]>;
    tags?: pulumi.Input<inputs.robomaker.SimulationApplicationTagsArgs>;
}
