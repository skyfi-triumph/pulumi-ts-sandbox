import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::AppStream::Fleet
 *
 * @deprecated Fleet is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Fleet;
    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Fleet;
    readonly computeCapacity: pulumi.Output<outputs.appstream.FleetComputeCapacity | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly disconnectTimeoutInSeconds: pulumi.Output<number | undefined>;
    readonly displayName: pulumi.Output<string | undefined>;
    readonly domainJoinInfo: pulumi.Output<outputs.appstream.FleetDomainJoinInfo | undefined>;
    readonly enableDefaultInternetAccess: pulumi.Output<boolean | undefined>;
    readonly fleetType: pulumi.Output<string | undefined>;
    readonly iamRoleArn: pulumi.Output<string | undefined>;
    readonly idleDisconnectTimeoutInSeconds: pulumi.Output<number | undefined>;
    readonly imageArn: pulumi.Output<string | undefined>;
    readonly imageName: pulumi.Output<string | undefined>;
    readonly instanceType: pulumi.Output<string>;
    readonly maxConcurrentSessions: pulumi.Output<number | undefined>;
    readonly maxUserDurationInSeconds: pulumi.Output<number | undefined>;
    readonly name: pulumi.Output<string>;
    readonly platform: pulumi.Output<string | undefined>;
    readonly streamView: pulumi.Output<string | undefined>;
    readonly tags: pulumi.Output<outputs.appstream.FleetTag[] | undefined>;
    readonly usbDeviceFilterStrings: pulumi.Output<string[] | undefined>;
    readonly vpcConfig: pulumi.Output<outputs.appstream.FleetVpcConfig | undefined>;
    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Fleet is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    computeCapacity?: pulumi.Input<inputs.appstream.FleetComputeCapacityArgs>;
    description?: pulumi.Input<string>;
    disconnectTimeoutInSeconds?: pulumi.Input<number>;
    displayName?: pulumi.Input<string>;
    domainJoinInfo?: pulumi.Input<inputs.appstream.FleetDomainJoinInfoArgs>;
    enableDefaultInternetAccess?: pulumi.Input<boolean>;
    fleetType?: pulumi.Input<string>;
    iamRoleArn?: pulumi.Input<string>;
    idleDisconnectTimeoutInSeconds?: pulumi.Input<number>;
    imageArn?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    maxConcurrentSessions?: pulumi.Input<number>;
    maxUserDurationInSeconds?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    streamView?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.appstream.FleetTagArgs>[]>;
    usbDeviceFilterStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vpcConfig?: pulumi.Input<inputs.appstream.FleetVpcConfigArgs>;
}
