import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * A Kendra index
 */
export declare class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Index;
    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Index;
    readonly arn: pulumi.Output<string>;
    /**
     * Capacity units
     */
    readonly capacityUnits: pulumi.Output<outputs.kendra.IndexCapacityUnitsConfiguration | undefined>;
    /**
     * A description for the index
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Document metadata configurations
     */
    readonly documentMetadataConfigurations: pulumi.Output<outputs.kendra.IndexDocumentMetadataConfiguration[] | undefined>;
    readonly edition: pulumi.Output<enums.kendra.IndexEdition>;
    readonly name: pulumi.Output<string>;
    readonly roleArn: pulumi.Output<string>;
    /**
     * Server side encryption configuration
     */
    readonly serverSideEncryptionConfiguration: pulumi.Output<outputs.kendra.IndexServerSideEncryptionConfiguration | undefined>;
    /**
     * Tags for labeling the index
     */
    readonly tags: pulumi.Output<outputs.kendra.IndexTag[] | undefined>;
    readonly userContextPolicy: pulumi.Output<enums.kendra.IndexUserContextPolicy | undefined>;
    readonly userTokenConfigurations: pulumi.Output<outputs.kendra.IndexUserTokenConfiguration[] | undefined>;
    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * Capacity units
     */
    capacityUnits?: pulumi.Input<inputs.kendra.IndexCapacityUnitsConfigurationArgs>;
    /**
     * A description for the index
     */
    description?: pulumi.Input<string>;
    /**
     * Document metadata configurations
     */
    documentMetadataConfigurations?: pulumi.Input<pulumi.Input<inputs.kendra.IndexDocumentMetadataConfigurationArgs>[]>;
    edition: pulumi.Input<enums.kendra.IndexEdition>;
    name?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    /**
     * Server side encryption configuration
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.kendra.IndexServerSideEncryptionConfigurationArgs>;
    /**
     * Tags for labeling the index
     */
    tags?: pulumi.Input<pulumi.Input<inputs.kendra.IndexTagArgs>[]>;
    userContextPolicy?: pulumi.Input<enums.kendra.IndexUserContextPolicy>;
    userTokenConfigurations?: pulumi.Input<pulumi.Input<inputs.kendra.IndexUserTokenConfigurationArgs>[]>;
}
