import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for SSO PermissionSet
 */
export declare class PermissionSet extends pulumi.CustomResource {
    /**
     * Get an existing PermissionSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PermissionSet;
    /**
     * Returns true if the given object is an instance of PermissionSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PermissionSet;
    /**
     * The permission set description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The inline policy to put in permission set.
     */
    readonly inlinePolicy: pulumi.Output<any | undefined>;
    /**
     * The sso instance arn that the permission set is owned.
     */
    readonly instanceArn: pulumi.Output<string>;
    readonly managedPolicies: pulumi.Output<string[] | undefined>;
    /**
     * The name you want to assign to this permission set.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The permission set that the policy will be attached to
     */
    readonly permissionSetArn: pulumi.Output<string>;
    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     */
    readonly relayStateType: pulumi.Output<string | undefined>;
    /**
     * The length of time that a user can be signed in to an AWS account.
     */
    readonly sessionDuration: pulumi.Output<string | undefined>;
    readonly tags: pulumi.Output<outputs.sso.PermissionSetTag[] | undefined>;
    /**
     * Create a PermissionSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionSetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PermissionSet resource.
 */
export interface PermissionSetArgs {
    /**
     * The permission set description.
     */
    description?: pulumi.Input<string>;
    /**
     * The inline policy to put in permission set.
     */
    inlinePolicy?: any;
    /**
     * The sso instance arn that the permission set is owned.
     */
    instanceArn: pulumi.Input<string>;
    managedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name you want to assign to this permission set.
     */
    name?: pulumi.Input<string>;
    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     */
    relayStateType?: pulumi.Input<string>;
    /**
     * The length of time that a user can be signed in to an AWS account.
     */
    sessionDuration?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.sso.PermissionSetTagArgs>[]>;
}
