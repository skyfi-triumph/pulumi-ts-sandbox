import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::AppSync::DataSource
 *
 * @deprecated DataSource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class DataSource extends pulumi.CustomResource {
    /**
     * Get an existing DataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DataSource;
    /**
     * Returns true if the given object is an instance of DataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DataSource;
    readonly apiId: pulumi.Output<string>;
    readonly dataSourceArn: pulumi.Output<string>;
    readonly description: pulumi.Output<string | undefined>;
    readonly dynamoDBConfig: pulumi.Output<outputs.appsync.DataSourceDynamoDBConfig | undefined>;
    readonly elasticsearchConfig: pulumi.Output<outputs.appsync.DataSourceElasticsearchConfig | undefined>;
    readonly httpConfig: pulumi.Output<outputs.appsync.DataSourceHttpConfig | undefined>;
    readonly lambdaConfig: pulumi.Output<outputs.appsync.DataSourceLambdaConfig | undefined>;
    readonly name: pulumi.Output<string>;
    readonly openSearchServiceConfig: pulumi.Output<outputs.appsync.DataSourceOpenSearchServiceConfig | undefined>;
    readonly relationalDatabaseConfig: pulumi.Output<outputs.appsync.DataSourceRelationalDatabaseConfig | undefined>;
    readonly serviceRoleArn: pulumi.Output<string | undefined>;
    readonly type: pulumi.Output<string>;
    /**
     * Create a DataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated DataSource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: DataSourceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DataSource resource.
 */
export interface DataSourceArgs {
    apiId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dynamoDBConfig?: pulumi.Input<inputs.appsync.DataSourceDynamoDBConfigArgs>;
    elasticsearchConfig?: pulumi.Input<inputs.appsync.DataSourceElasticsearchConfigArgs>;
    httpConfig?: pulumi.Input<inputs.appsync.DataSourceHttpConfigArgs>;
    lambdaConfig?: pulumi.Input<inputs.appsync.DataSourceLambdaConfigArgs>;
    name?: pulumi.Input<string>;
    openSearchServiceConfig?: pulumi.Input<inputs.appsync.DataSourceOpenSearchServiceConfigArgs>;
    relationalDatabaseConfig?: pulumi.Input<inputs.appsync.DataSourceRelationalDatabaseConfigArgs>;
    serviceRoleArn?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
