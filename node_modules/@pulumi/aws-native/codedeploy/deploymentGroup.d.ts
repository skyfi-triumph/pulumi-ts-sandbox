import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::CodeDeploy::DeploymentGroup
 *
 * @deprecated DeploymentGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class DeploymentGroup extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DeploymentGroup;
    /**
     * Returns true if the given object is an instance of DeploymentGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DeploymentGroup;
    readonly alarmConfiguration: pulumi.Output<outputs.codedeploy.DeploymentGroupAlarmConfiguration | undefined>;
    readonly applicationName: pulumi.Output<string>;
    readonly autoRollbackConfiguration: pulumi.Output<outputs.codedeploy.DeploymentGroupAutoRollbackConfiguration | undefined>;
    readonly autoScalingGroups: pulumi.Output<string[] | undefined>;
    readonly blueGreenDeploymentConfiguration: pulumi.Output<outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfiguration | undefined>;
    readonly deployment: pulumi.Output<outputs.codedeploy.DeploymentGroupDeployment | undefined>;
    readonly deploymentConfigName: pulumi.Output<string | undefined>;
    readonly deploymentGroupName: pulumi.Output<string | undefined>;
    readonly deploymentStyle: pulumi.Output<outputs.codedeploy.DeploymentGroupDeploymentStyle | undefined>;
    readonly eCSServices: pulumi.Output<outputs.codedeploy.DeploymentGroupECSService[] | undefined>;
    readonly ec2TagFilters: pulumi.Output<outputs.codedeploy.DeploymentGroupEC2TagFilter[] | undefined>;
    readonly ec2TagSet: pulumi.Output<outputs.codedeploy.DeploymentGroupEC2TagSet | undefined>;
    readonly loadBalancerInfo: pulumi.Output<outputs.codedeploy.DeploymentGroupLoadBalancerInfo | undefined>;
    readonly onPremisesInstanceTagFilters: pulumi.Output<outputs.codedeploy.DeploymentGroupTagFilter[] | undefined>;
    readonly onPremisesTagSet: pulumi.Output<outputs.codedeploy.DeploymentGroupOnPremisesTagSet | undefined>;
    readonly serviceRoleArn: pulumi.Output<string>;
    readonly triggerConfigurations: pulumi.Output<outputs.codedeploy.DeploymentGroupTriggerConfig[] | undefined>;
    /**
     * Create a DeploymentGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated DeploymentGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: DeploymentGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DeploymentGroup resource.
 */
export interface DeploymentGroupArgs {
    alarmConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAlarmConfigurationArgs>;
    applicationName: pulumi.Input<string>;
    autoRollbackConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupAutoRollbackConfigurationArgs>;
    autoScalingGroups?: pulumi.Input<pulumi.Input<string>[]>;
    blueGreenDeploymentConfiguration?: pulumi.Input<inputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfigurationArgs>;
    deployment?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentArgs>;
    deploymentConfigName?: pulumi.Input<string>;
    deploymentGroupName?: pulumi.Input<string>;
    deploymentStyle?: pulumi.Input<inputs.codedeploy.DeploymentGroupDeploymentStyleArgs>;
    eCSServices?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupECSServiceArgs>[]>;
    ec2TagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupEC2TagFilterArgs>[]>;
    ec2TagSet?: pulumi.Input<inputs.codedeploy.DeploymentGroupEC2TagSetArgs>;
    loadBalancerInfo?: pulumi.Input<inputs.codedeploy.DeploymentGroupLoadBalancerInfoArgs>;
    onPremisesInstanceTagFilters?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTagFilterArgs>[]>;
    onPremisesTagSet?: pulumi.Input<inputs.codedeploy.DeploymentGroupOnPremisesTagSetArgs>;
    serviceRoleArn: pulumi.Input<string>;
    triggerConfigurations?: pulumi.Input<pulumi.Input<inputs.codedeploy.DeploymentGroupTriggerConfigArgs>[]>;
}
