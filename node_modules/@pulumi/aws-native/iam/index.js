"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./accessKey"), exports);
__exportStar(require("./group"), exports);
__exportStar(require("./instanceProfile"), exports);
__exportStar(require("./managedPolicy"), exports);
__exportStar(require("./oidcprovider"), exports);
__exportStar(require("./policy"), exports);
__exportStar(require("./role"), exports);
__exportStar(require("./samlprovider"), exports);
__exportStar(require("./serverCertificate"), exports);
__exportStar(require("./serviceLinkedRole"), exports);
__exportStar(require("./user"), exports);
__exportStar(require("./userToGroupAddition"), exports);
__exportStar(require("./virtualMFADevice"), exports);
// Import resources to register:
const accessKey_1 = require("./accessKey");
const group_1 = require("./group");
const instanceProfile_1 = require("./instanceProfile");
const managedPolicy_1 = require("./managedPolicy");
const oidcprovider_1 = require("./oidcprovider");
const policy_1 = require("./policy");
const role_1 = require("./role");
const samlprovider_1 = require("./samlprovider");
const serverCertificate_1 = require("./serverCertificate");
const serviceLinkedRole_1 = require("./serviceLinkedRole");
const user_1 = require("./user");
const userToGroupAddition_1 = require("./userToGroupAddition");
const virtualMFADevice_1 = require("./virtualMFADevice");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:iam:AccessKey":
                return new accessKey_1.AccessKey(name, undefined, { urn });
            case "aws-native:iam:Group":
                return new group_1.Group(name, undefined, { urn });
            case "aws-native:iam:InstanceProfile":
                return new instanceProfile_1.InstanceProfile(name, undefined, { urn });
            case "aws-native:iam:ManagedPolicy":
                return new managedPolicy_1.ManagedPolicy(name, undefined, { urn });
            case "aws-native:iam:OIDCProvider":
                return new oidcprovider_1.OIDCProvider(name, undefined, { urn });
            case "aws-native:iam:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "aws-native:iam:Role":
                return new role_1.Role(name, undefined, { urn });
            case "aws-native:iam:SAMLProvider":
                return new samlprovider_1.SAMLProvider(name, undefined, { urn });
            case "aws-native:iam:ServerCertificate":
                return new serverCertificate_1.ServerCertificate(name, undefined, { urn });
            case "aws-native:iam:ServiceLinkedRole":
                return new serviceLinkedRole_1.ServiceLinkedRole(name, undefined, { urn });
            case "aws-native:iam:User":
                return new user_1.User(name, undefined, { urn });
            case "aws-native:iam:UserToGroupAddition":
                return new userToGroupAddition_1.UserToGroupAddition(name, undefined, { urn });
            case "aws-native:iam:VirtualMFADevice":
                return new virtualMFADevice_1.VirtualMFADevice(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "iam", _module);
//# sourceMappingURL=index.js.map