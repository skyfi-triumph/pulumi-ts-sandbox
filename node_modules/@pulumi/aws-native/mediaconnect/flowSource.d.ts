import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for AWS::MediaConnect::FlowSource
 */
export declare class FlowSource extends pulumi.CustomResource {
    /**
     * Get an existing FlowSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FlowSource;
    /**
     * Returns true if the given object is an instance of FlowSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FlowSource;
    /**
     * The type of encryption that is used on the content ingested from this source.
     */
    readonly decryption: pulumi.Output<outputs.mediaconnect.FlowSourceEncryption | undefined>;
    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     */
    readonly description: pulumi.Output<string>;
    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     */
    readonly entitlementArn: pulumi.Output<string | undefined>;
    /**
     * The ARN of the flow.
     */
    readonly flowArn: pulumi.Output<string | undefined>;
    /**
     * The IP address that the flow will be listening on for incoming content.
     */
    readonly ingestIp: pulumi.Output<string>;
    /**
     * The port that the flow will be listening on for incoming content.
     */
    readonly ingestPort: pulumi.Output<number | undefined>;
    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     */
    readonly maxBitrate: pulumi.Output<number | undefined>;
    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     */
    readonly maxLatency: pulumi.Output<number | undefined>;
    /**
     * The name of the source.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The protocol that is used by the source.
     */
    readonly protocol: pulumi.Output<enums.mediaconnect.FlowSourceProtocol | undefined>;
    /**
     * The ARN of the source.
     */
    readonly sourceArn: pulumi.Output<string>;
    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     */
    readonly sourceIngestPort: pulumi.Output<string>;
    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     */
    readonly streamId: pulumi.Output<string | undefined>;
    /**
     * The name of the VPC Interface this Source is configured with.
     */
    readonly vpcInterfaceName: pulumi.Output<string | undefined>;
    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     */
    readonly whitelistCidr: pulumi.Output<string | undefined>;
    /**
     * Create a FlowSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowSourceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a FlowSource resource.
 */
export interface FlowSourceArgs {
    /**
     * The type of encryption that is used on the content ingested from this source.
     */
    decryption?: pulumi.Input<inputs.mediaconnect.FlowSourceEncryptionArgs>;
    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     */
    description: pulumi.Input<string>;
    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     */
    entitlementArn?: pulumi.Input<string>;
    /**
     * The ARN of the flow.
     */
    flowArn?: pulumi.Input<string>;
    /**
     * The port that the flow will be listening on for incoming content.
     */
    ingestPort?: pulumi.Input<number>;
    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     */
    maxBitrate?: pulumi.Input<number>;
    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     */
    maxLatency?: pulumi.Input<number>;
    /**
     * The name of the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol that is used by the source.
     */
    protocol?: pulumi.Input<enums.mediaconnect.FlowSourceProtocol>;
    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     */
    streamId?: pulumi.Input<string>;
    /**
     * The name of the VPC Interface this Source is configured with.
     */
    vpcInterfaceName?: pulumi.Input<string>;
    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     */
    whitelistCidr?: pulumi.Input<string>;
}
