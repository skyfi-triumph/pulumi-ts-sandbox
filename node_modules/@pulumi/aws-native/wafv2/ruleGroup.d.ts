import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
 */
export declare class RuleGroup extends pulumi.CustomResource {
    /**
     * Get an existing RuleGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RuleGroup;
    /**
     * Returns true if the given object is an instance of RuleGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RuleGroup;
    readonly arn: pulumi.Output<string>;
    /**
     * Collection of Available Labels.
     */
    readonly availableLabels: pulumi.Output<outputs.wafv2.RuleGroupLabelSummary[]>;
    readonly capacity: pulumi.Output<number>;
    /**
     * Collection of Consumed Labels.
     */
    readonly consumedLabels: pulumi.Output<outputs.wafv2.RuleGroupLabelSummary[]>;
    readonly customResponseBodies: pulumi.Output<outputs.wafv2.RuleGroupCustomResponseBodies | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly labelNamespace: pulumi.Output<string>;
    readonly name: pulumi.Output<string | undefined>;
    /**
     * Collection of Rules.
     */
    readonly rules: pulumi.Output<outputs.wafv2.RuleGroupRule[] | undefined>;
    readonly scope: pulumi.Output<enums.wafv2.RuleGroupScope>;
    readonly tags: pulumi.Output<outputs.wafv2.RuleGroupTag[] | undefined>;
    readonly visibilityConfig: pulumi.Output<outputs.wafv2.RuleGroupVisibilityConfig>;
    /**
     * Create a RuleGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RuleGroup resource.
 */
export interface RuleGroupArgs {
    capacity: pulumi.Input<number>;
    customResponseBodies?: pulumi.Input<inputs.wafv2.RuleGroupCustomResponseBodiesArgs>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Collection of Rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.wafv2.RuleGroupRuleArgs>[]>;
    scope: pulumi.Input<enums.wafv2.RuleGroupScope>;
    tags?: pulumi.Input<pulumi.Input<inputs.wafv2.RuleGroupTagArgs>[]>;
    visibilityConfig: pulumi.Input<inputs.wafv2.RuleGroupVisibilityConfigArgs>;
}
