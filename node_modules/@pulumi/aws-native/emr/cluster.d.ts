import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::EMR::Cluster
 *
 * @deprecated Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster;
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Cluster;
    readonly additionalInfo: pulumi.Output<any | undefined>;
    readonly applications: pulumi.Output<outputs.emr.ClusterApplication[] | undefined>;
    readonly autoScalingRole: pulumi.Output<string | undefined>;
    readonly bootstrapActions: pulumi.Output<outputs.emr.ClusterBootstrapActionConfig[] | undefined>;
    readonly configurations: pulumi.Output<outputs.emr.ClusterConfiguration[] | undefined>;
    readonly customAmiId: pulumi.Output<string | undefined>;
    readonly ebsRootVolumeSize: pulumi.Output<number | undefined>;
    readonly instances: pulumi.Output<outputs.emr.ClusterJobFlowInstancesConfig>;
    readonly jobFlowRole: pulumi.Output<string>;
    readonly kerberosAttributes: pulumi.Output<outputs.emr.ClusterKerberosAttributes | undefined>;
    readonly logEncryptionKmsKeyId: pulumi.Output<string | undefined>;
    readonly logUri: pulumi.Output<string | undefined>;
    readonly managedScalingPolicy: pulumi.Output<outputs.emr.ClusterManagedScalingPolicy | undefined>;
    readonly masterPublicDNS: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
    readonly releaseLabel: pulumi.Output<string | undefined>;
    readonly scaleDownBehavior: pulumi.Output<string | undefined>;
    readonly securityConfiguration: pulumi.Output<string | undefined>;
    readonly serviceRole: pulumi.Output<string>;
    readonly stepConcurrencyLevel: pulumi.Output<number | undefined>;
    readonly steps: pulumi.Output<outputs.emr.ClusterStepConfig[] | undefined>;
    readonly tags: pulumi.Output<outputs.emr.ClusterTag[] | undefined>;
    readonly visibleToAllUsers: pulumi.Output<boolean | undefined>;
    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    additionalInfo?: any;
    applications?: pulumi.Input<pulumi.Input<inputs.emr.ClusterApplicationArgs>[]>;
    autoScalingRole?: pulumi.Input<string>;
    bootstrapActions?: pulumi.Input<pulumi.Input<inputs.emr.ClusterBootstrapActionConfigArgs>[]>;
    configurations?: pulumi.Input<pulumi.Input<inputs.emr.ClusterConfigurationArgs>[]>;
    customAmiId?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    instances: pulumi.Input<inputs.emr.ClusterJobFlowInstancesConfigArgs>;
    jobFlowRole: pulumi.Input<string>;
    kerberosAttributes?: pulumi.Input<inputs.emr.ClusterKerberosAttributesArgs>;
    logEncryptionKmsKeyId?: pulumi.Input<string>;
    logUri?: pulumi.Input<string>;
    managedScalingPolicy?: pulumi.Input<inputs.emr.ClusterManagedScalingPolicyArgs>;
    name?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    scaleDownBehavior?: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    serviceRole: pulumi.Input<string>;
    stepConcurrencyLevel?: pulumi.Input<number>;
    steps?: pulumi.Input<pulumi.Input<inputs.emr.ClusterStepConfigArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.emr.ClusterTagArgs>[]>;
    visibleToAllUsers?: pulumi.Input<boolean>;
}
