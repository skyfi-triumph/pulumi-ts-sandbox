"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::Lambda::Function
 */
class Function extends pulumi.CustomResource {
    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            inputs["architectures"] = args ? args.architectures : undefined;
            inputs["code"] = args ? args.code : undefined;
            inputs["codeSigningConfigArn"] = args ? args.codeSigningConfigArn : undefined;
            inputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["fileSystemConfigs"] = args ? args.fileSystemConfigs : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["handler"] = args ? args.handler : undefined;
            inputs["imageConfig"] = args ? args.imageConfig : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["layers"] = args ? args.layers : undefined;
            inputs["memorySize"] = args ? args.memorySize : undefined;
            inputs["packageType"] = args ? args.packageType : undefined;
            inputs["reservedConcurrentExecutions"] = args ? args.reservedConcurrentExecutions : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["runtime"] = args ? args.runtime : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["tracingConfig"] = args ? args.tracingConfig : undefined;
            inputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        else {
            inputs["architectures"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["code"] = undefined /*out*/;
            inputs["codeSigningConfigArn"] = undefined /*out*/;
            inputs["deadLetterConfig"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["environment"] = undefined /*out*/;
            inputs["fileSystemConfigs"] = undefined /*out*/;
            inputs["functionName"] = undefined /*out*/;
            inputs["handler"] = undefined /*out*/;
            inputs["imageConfig"] = undefined /*out*/;
            inputs["kmsKeyArn"] = undefined /*out*/;
            inputs["layers"] = undefined /*out*/;
            inputs["memorySize"] = undefined /*out*/;
            inputs["packageType"] = undefined /*out*/;
            inputs["reservedConcurrentExecutions"] = undefined /*out*/;
            inputs["role"] = undefined /*out*/;
            inputs["runtime"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["timeout"] = undefined /*out*/;
            inputs["tracingConfig"] = undefined /*out*/;
            inputs["vpcConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Function.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Function(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }
}
exports.Function = Function;
/** @internal */
Function.__pulumiType = 'aws-native:lambda:Function';
//# sourceMappingURL=function.js.map