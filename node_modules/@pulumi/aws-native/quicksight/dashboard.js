"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Definition of the AWS::QuickSight::Dashboard Resource Type.
 */
class Dashboard extends pulumi.CustomResource {
    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.awsAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccountId'");
            }
            if ((!args || args.dashboardId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            if ((!args || args.sourceEntity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEntity'");
            }
            inputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            inputs["dashboardId"] = args ? args.dashboardId : undefined;
            inputs["dashboardPublishOptions"] = args ? args.dashboardPublishOptions : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["permissions"] = args ? args.permissions : undefined;
            inputs["sourceEntity"] = args ? args.sourceEntity : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["themeArn"] = args ? args.themeArn : undefined;
            inputs["versionDescription"] = args ? args.versionDescription : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["lastPublishedTime"] = undefined /*out*/;
            inputs["lastUpdatedTime"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        else {
            inputs["arn"] = undefined /*out*/;
            inputs["awsAccountId"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["dashboardId"] = undefined /*out*/;
            inputs["dashboardPublishOptions"] = undefined /*out*/;
            inputs["lastPublishedTime"] = undefined /*out*/;
            inputs["lastUpdatedTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["parameters"] = undefined /*out*/;
            inputs["permissions"] = undefined /*out*/;
            inputs["sourceEntity"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["themeArn"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
            inputs["versionDescription"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Dashboard.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Dashboard(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }
}
exports.Dashboard = Dashboard;
/** @internal */
Dashboard.__pulumiType = 'aws-native:quicksight:Dashboard';
//# sourceMappingURL=dashboard.js.map