import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Definition of the AWS::QuickSight::Theme Resource Type.
 */
export declare class Theme extends pulumi.CustomResource {
    /**
     * Get an existing Theme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Theme;
    /**
     * Returns true if the given object is an instance of Theme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Theme;
    /**
     * <p>The Amazon Resource Name (ARN) of the theme.</p>
     */
    readonly arn: pulumi.Output<string>;
    readonly awsAccountId: pulumi.Output<string>;
    /**
     * <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				<code>ListThemes</code> or choose <b>Themes</b> from
     * 			within a QuickSight analysis. </p>
     */
    readonly baseThemeId: pulumi.Output<string | undefined>;
    readonly configuration: pulumi.Output<outputs.quicksight.ThemeConfiguration | undefined>;
    /**
     * <p>The date and time that the theme was created.</p>
     */
    readonly createdTime: pulumi.Output<string>;
    /**
     * <p>The date and time that the theme was last updated.</p>
     */
    readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * <p>A display name for the theme.</p>
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * <p>A valid grouping of resource permissions to apply to the new theme.
     * 			</p>
     */
    readonly permissions: pulumi.Output<outputs.quicksight.ThemeResourcePermission[] | undefined>;
    /**
     * <p>A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.</p>
     */
    readonly tags: pulumi.Output<outputs.quicksight.ThemeTag[] | undefined>;
    readonly themeId: pulumi.Output<string>;
    readonly type: pulumi.Output<enums.quicksight.ThemeType>;
    readonly version: pulumi.Output<outputs.quicksight.ThemeVersion>;
    /**
     * <p>A description of the first version of the theme that you're creating. Every time
     * 				<code>UpdateTheme</code> is called, a new version is created. Each version of the
     * 			theme has a description of the version in the <code>VersionDescription</code>
     * 			field.</p>
     */
    readonly versionDescription: pulumi.Output<string | undefined>;
    /**
     * Create a Theme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThemeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Theme resource.
 */
export interface ThemeArgs {
    awsAccountId: pulumi.Input<string>;
    /**
     * <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				<code>ListThemes</code> or choose <b>Themes</b> from
     * 			within a QuickSight analysis. </p>
     */
    baseThemeId?: pulumi.Input<string>;
    configuration?: pulumi.Input<inputs.quicksight.ThemeConfigurationArgs>;
    /**
     * <p>A display name for the theme.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * <p>A valid grouping of resource permissions to apply to the new theme.
     * 			</p>
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.ThemeResourcePermissionArgs>[]>;
    /**
     * <p>A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.</p>
     */
    tags?: pulumi.Input<pulumi.Input<inputs.quicksight.ThemeTagArgs>[]>;
    themeId: pulumi.Input<string>;
    /**
     * <p>A description of the first version of the theme that you're creating. Every time
     * 				<code>UpdateTheme</code> is called, a new version is created. Each version of the
     * 			theme has a description of the version in the <code>VersionDescription</code>
     * 			field.</p>
     */
    versionDescription?: pulumi.Input<string>;
}
