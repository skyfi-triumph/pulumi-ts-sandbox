import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * HealthLake FHIR Datastore
 */
export declare class FHIRDatastore extends pulumi.CustomResource {
    /**
     * Get an existing FHIRDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FHIRDatastore;
    /**
     * Returns true if the given object is an instance of FHIRDatastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FHIRDatastore;
    readonly createdAt: pulumi.Output<outputs.healthlake.FHIRDatastoreCreatedAt>;
    readonly datastoreArn: pulumi.Output<string>;
    readonly datastoreEndpoint: pulumi.Output<string>;
    readonly datastoreId: pulumi.Output<string>;
    readonly datastoreName: pulumi.Output<string | undefined>;
    readonly datastoreStatus: pulumi.Output<enums.healthlake.FHIRDatastoreDatastoreStatus>;
    readonly datastoreTypeVersion: pulumi.Output<enums.healthlake.FHIRDatastoreDatastoreTypeVersion>;
    readonly preloadDataConfig: pulumi.Output<outputs.healthlake.FHIRDatastorePreloadDataConfig | undefined>;
    readonly sseConfiguration: pulumi.Output<outputs.healthlake.FHIRDatastoreSseConfiguration | undefined>;
    readonly tags: pulumi.Output<outputs.healthlake.FHIRDatastoreTag[] | undefined>;
    /**
     * Create a FHIRDatastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FHIRDatastoreArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a FHIRDatastore resource.
 */
export interface FHIRDatastoreArgs {
    datastoreName?: pulumi.Input<string>;
    datastoreTypeVersion: pulumi.Input<enums.healthlake.FHIRDatastoreDatastoreTypeVersion>;
    preloadDataConfig?: pulumi.Input<inputs.healthlake.FHIRDatastorePreloadDataConfigArgs>;
    sseConfiguration?: pulumi.Input<inputs.healthlake.FHIRDatastoreSseConfigurationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.healthlake.FHIRDatastoreTagArgs>[]>;
}
