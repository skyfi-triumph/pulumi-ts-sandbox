"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./customResource"), exports);
__exportStar(require("./macro"), exports);
__exportStar(require("./moduleDefaultVersion"), exports);
__exportStar(require("./moduleVersion"), exports);
__exportStar(require("./publicTypeVersion"), exports);
__exportStar(require("./publisher"), exports);
__exportStar(require("./resourceDefaultVersion"), exports);
__exportStar(require("./resourceVersion"), exports);
__exportStar(require("./stack"), exports);
__exportStar(require("./stackSet"), exports);
__exportStar(require("./typeActivation"), exports);
__exportStar(require("./waitCondition"), exports);
__exportStar(require("./waitConditionHandle"), exports);
// Export enums:
__exportStar(require("../types/enums/cloudformation"), exports);
// Import resources to register:
const customResource_1 = require("./customResource");
const macro_1 = require("./macro");
const moduleDefaultVersion_1 = require("./moduleDefaultVersion");
const moduleVersion_1 = require("./moduleVersion");
const publicTypeVersion_1 = require("./publicTypeVersion");
const publisher_1 = require("./publisher");
const resourceDefaultVersion_1 = require("./resourceDefaultVersion");
const resourceVersion_1 = require("./resourceVersion");
const stack_1 = require("./stack");
const stackSet_1 = require("./stackSet");
const typeActivation_1 = require("./typeActivation");
const waitCondition_1 = require("./waitCondition");
const waitConditionHandle_1 = require("./waitConditionHandle");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:cloudformation:CustomResource":
                return new customResource_1.CustomResource(name, undefined, { urn });
            case "aws-native:cloudformation:Macro":
                return new macro_1.Macro(name, undefined, { urn });
            case "aws-native:cloudformation:ModuleDefaultVersion":
                return new moduleDefaultVersion_1.ModuleDefaultVersion(name, undefined, { urn });
            case "aws-native:cloudformation:ModuleVersion":
                return new moduleVersion_1.ModuleVersion(name, undefined, { urn });
            case "aws-native:cloudformation:PublicTypeVersion":
                return new publicTypeVersion_1.PublicTypeVersion(name, undefined, { urn });
            case "aws-native:cloudformation:Publisher":
                return new publisher_1.Publisher(name, undefined, { urn });
            case "aws-native:cloudformation:ResourceDefaultVersion":
                return new resourceDefaultVersion_1.ResourceDefaultVersion(name, undefined, { urn });
            case "aws-native:cloudformation:ResourceVersion":
                return new resourceVersion_1.ResourceVersion(name, undefined, { urn });
            case "aws-native:cloudformation:Stack":
                return new stack_1.Stack(name, undefined, { urn });
            case "aws-native:cloudformation:StackSet":
                return new stackSet_1.StackSet(name, undefined, { urn });
            case "aws-native:cloudformation:TypeActivation":
                return new typeActivation_1.TypeActivation(name, undefined, { urn });
            case "aws-native:cloudformation:WaitCondition":
                return new waitCondition_1.WaitCondition(name, undefined, { urn });
            case "aws-native:cloudformation:WaitConditionHandle":
                return new waitConditionHandle_1.WaitConditionHandle(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "cloudformation", _module);
//# sourceMappingURL=index.js.map