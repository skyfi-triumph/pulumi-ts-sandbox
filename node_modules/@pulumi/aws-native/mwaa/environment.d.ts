import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for AWS::MWAA::Environment
 */
export declare class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Environment;
    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Environment;
    /**
     * Key/value pairs representing Airflow configuration variables.
     *     Keys are prefixed by their section:
     *
     *     [core]
     *     dags_folder={AIRFLOW_HOME}/dags
     *
     *     Would be represented as
     *
     *     "core.dags_folder": "{AIRFLOW_HOME}/dags"
     */
    readonly airflowConfigurationOptions: pulumi.Output<any | undefined>;
    readonly airflowVersion: pulumi.Output<string | undefined>;
    readonly arn: pulumi.Output<string>;
    readonly dagS3Path: pulumi.Output<string | undefined>;
    readonly environmentClass: pulumi.Output<string | undefined>;
    readonly executionRoleArn: pulumi.Output<string | undefined>;
    readonly kmsKey: pulumi.Output<string | undefined>;
    readonly loggingConfiguration: pulumi.Output<outputs.mwaa.EnvironmentLoggingConfiguration | undefined>;
    readonly maxWorkers: pulumi.Output<number | undefined>;
    readonly minWorkers: pulumi.Output<number | undefined>;
    readonly name: pulumi.Output<string>;
    readonly networkConfiguration: pulumi.Output<outputs.mwaa.EnvironmentNetworkConfiguration | undefined>;
    readonly pluginsS3ObjectVersion: pulumi.Output<string | undefined>;
    readonly pluginsS3Path: pulumi.Output<string | undefined>;
    readonly requirementsS3ObjectVersion: pulumi.Output<string | undefined>;
    readonly requirementsS3Path: pulumi.Output<string | undefined>;
    readonly schedulers: pulumi.Output<number | undefined>;
    readonly sourceBucketArn: pulumi.Output<string | undefined>;
    /**
     * A map of tags for the environment.
     */
    readonly tags: pulumi.Output<any | undefined>;
    readonly webserverAccessMode: pulumi.Output<enums.mwaa.EnvironmentWebserverAccessMode | undefined>;
    readonly webserverUrl: pulumi.Output<string>;
    readonly weeklyMaintenanceWindowStart: pulumi.Output<string | undefined>;
    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EnvironmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * Key/value pairs representing Airflow configuration variables.
     *     Keys are prefixed by their section:
     *
     *     [core]
     *     dags_folder={AIRFLOW_HOME}/dags
     *
     *     Would be represented as
     *
     *     "core.dags_folder": "{AIRFLOW_HOME}/dags"
     */
    airflowConfigurationOptions?: any;
    airflowVersion?: pulumi.Input<string>;
    dagS3Path?: pulumi.Input<string>;
    environmentClass?: pulumi.Input<string>;
    executionRoleArn?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    loggingConfiguration?: pulumi.Input<inputs.mwaa.EnvironmentLoggingConfigurationArgs>;
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.mwaa.EnvironmentNetworkConfigurationArgs>;
    pluginsS3ObjectVersion?: pulumi.Input<string>;
    pluginsS3Path?: pulumi.Input<string>;
    requirementsS3ObjectVersion?: pulumi.Input<string>;
    requirementsS3Path?: pulumi.Input<string>;
    schedulers?: pulumi.Input<number>;
    sourceBucketArn?: pulumi.Input<string>;
    /**
     * A map of tags for the environment.
     */
    tags?: any;
    webserverAccessMode?: pulumi.Input<enums.mwaa.EnvironmentWebserverAccessMode>;
    weeklyMaintenanceWindowStart?: pulumi.Input<string>;
}
