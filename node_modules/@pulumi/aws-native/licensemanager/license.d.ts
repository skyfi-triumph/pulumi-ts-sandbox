import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::LicenseManager::License
 */
export declare class License extends pulumi.CustomResource {
    /**
     * Get an existing License resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): License;
    /**
     * Returns true if the given object is an instance of License.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is License;
    /**
     * Beneficiary of the license.
     */
    readonly beneficiary: pulumi.Output<string | undefined>;
    readonly consumptionConfiguration: pulumi.Output<outputs.licensemanager.LicenseConsumptionConfiguration>;
    readonly entitlements: pulumi.Output<outputs.licensemanager.LicenseEntitlement[]>;
    /**
     * Home region for the created license.
     */
    readonly homeRegion: pulumi.Output<string>;
    readonly issuer: pulumi.Output<outputs.licensemanager.LicenseIssuerData>;
    /**
     * Amazon Resource Name is a unique name for each resource.
     */
    readonly licenseArn: pulumi.Output<string>;
    readonly licenseMetadata: pulumi.Output<outputs.licensemanager.LicenseMetadata[] | undefined>;
    /**
     * Name for the created license.
     */
    readonly licenseName: pulumi.Output<string>;
    /**
     * Product name for the created license.
     */
    readonly productName: pulumi.Output<string>;
    /**
     * ProductSKU of the license.
     */
    readonly productSKU: pulumi.Output<string | undefined>;
    readonly status: pulumi.Output<string | undefined>;
    readonly validity: pulumi.Output<outputs.licensemanager.LicenseValidityDateFormat>;
    /**
     * The version of the license.
     */
    readonly version: pulumi.Output<string>;
    /**
     * Create a License resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a License resource.
 */
export interface LicenseArgs {
    /**
     * Beneficiary of the license.
     */
    beneficiary?: pulumi.Input<string>;
    consumptionConfiguration: pulumi.Input<inputs.licensemanager.LicenseConsumptionConfigurationArgs>;
    entitlements: pulumi.Input<pulumi.Input<inputs.licensemanager.LicenseEntitlementArgs>[]>;
    /**
     * Home region for the created license.
     */
    homeRegion: pulumi.Input<string>;
    issuer: pulumi.Input<inputs.licensemanager.LicenseIssuerDataArgs>;
    licenseMetadata?: pulumi.Input<pulumi.Input<inputs.licensemanager.LicenseMetadataArgs>[]>;
    /**
     * Name for the created license.
     */
    licenseName?: pulumi.Input<string>;
    /**
     * Product name for the created license.
     */
    productName: pulumi.Input<string>;
    /**
     * ProductSKU of the license.
     */
    productSKU?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    validity: pulumi.Input<inputs.licensemanager.LicenseValidityDateFormatArgs>;
}
