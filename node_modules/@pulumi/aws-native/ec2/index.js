"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./capacityReservation"), exports);
__exportStar(require("./capacityReservationFleet"), exports);
__exportStar(require("./carrierGateway"), exports);
__exportStar(require("./clientVpnAuthorizationRule"), exports);
__exportStar(require("./clientVpnEndpoint"), exports);
__exportStar(require("./clientVpnRoute"), exports);
__exportStar(require("./clientVpnTargetNetworkAssociation"), exports);
__exportStar(require("./customerGateway"), exports);
__exportStar(require("./dhcpoptions"), exports);
__exportStar(require("./ec2fleet"), exports);
__exportStar(require("./egressOnlyInternetGateway"), exports);
__exportStar(require("./eip"), exports);
__exportStar(require("./eipassociation"), exports);
__exportStar(require("./enclaveCertificateIamRoleAssociation"), exports);
__exportStar(require("./flowLog"), exports);
__exportStar(require("./gatewayRouteTableAssociation"), exports);
__exportStar(require("./host"), exports);
__exportStar(require("./instance"), exports);
__exportStar(require("./internetGateway"), exports);
__exportStar(require("./launchTemplate"), exports);
__exportStar(require("./localGatewayRoute"), exports);
__exportStar(require("./localGatewayRouteTableVPCAssociation"), exports);
__exportStar(require("./natGateway"), exports);
__exportStar(require("./networkAcl"), exports);
__exportStar(require("./networkAclEntry"), exports);
__exportStar(require("./networkInsightsAnalysis"), exports);
__exportStar(require("./networkInsightsPath"), exports);
__exportStar(require("./networkInterface"), exports);
__exportStar(require("./networkInterfaceAttachment"), exports);
__exportStar(require("./networkInterfacePermission"), exports);
__exportStar(require("./placementGroup"), exports);
__exportStar(require("./prefixList"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeTable"), exports);
__exportStar(require("./securityGroup"), exports);
__exportStar(require("./securityGroupEgress"), exports);
__exportStar(require("./securityGroupIngress"), exports);
__exportStar(require("./spotFleet"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./subnetCidrBlock"), exports);
__exportStar(require("./subnetNetworkAclAssociation"), exports);
__exportStar(require("./subnetRouteTableAssociation"), exports);
__exportStar(require("./trafficMirrorFilter"), exports);
__exportStar(require("./trafficMirrorFilterRule"), exports);
__exportStar(require("./trafficMirrorSession"), exports);
__exportStar(require("./trafficMirrorTarget"), exports);
__exportStar(require("./transitGateway"), exports);
__exportStar(require("./transitGatewayAttachment"), exports);
__exportStar(require("./transitGatewayConnect"), exports);
__exportStar(require("./transitGatewayMulticastDomain"), exports);
__exportStar(require("./transitGatewayMulticastDomainAssociation"), exports);
__exportStar(require("./transitGatewayMulticastGroupMember"), exports);
__exportStar(require("./transitGatewayMulticastGroupSource"), exports);
__exportStar(require("./transitGatewayPeeringAttachment"), exports);
__exportStar(require("./transitGatewayRoute"), exports);
__exportStar(require("./transitGatewayRouteTable"), exports);
__exportStar(require("./transitGatewayRouteTableAssociation"), exports);
__exportStar(require("./transitGatewayRouteTablePropagation"), exports);
__exportStar(require("./transitGatewayVpcAttachment"), exports);
__exportStar(require("./volume"), exports);
__exportStar(require("./volumeAttachment"), exports);
__exportStar(require("./vpc"), exports);
__exportStar(require("./vpccidrBlock"), exports);
__exportStar(require("./vpcdhcpoptionsAssociation"), exports);
__exportStar(require("./vpcendpoint"), exports);
__exportStar(require("./vpcendpointConnectionNotification"), exports);
__exportStar(require("./vpcendpointService"), exports);
__exportStar(require("./vpcendpointServicePermissions"), exports);
__exportStar(require("./vpcgatewayAttachment"), exports);
__exportStar(require("./vpcpeeringConnection"), exports);
__exportStar(require("./vpnconnection"), exports);
__exportStar(require("./vpnconnectionRoute"), exports);
__exportStar(require("./vpngateway"), exports);
__exportStar(require("./vpngatewayRoutePropagation"), exports);
// Export enums:
__exportStar(require("../types/enums/ec2"), exports);
// Import resources to register:
const capacityReservation_1 = require("./capacityReservation");
const capacityReservationFleet_1 = require("./capacityReservationFleet");
const carrierGateway_1 = require("./carrierGateway");
const clientVpnAuthorizationRule_1 = require("./clientVpnAuthorizationRule");
const clientVpnEndpoint_1 = require("./clientVpnEndpoint");
const clientVpnRoute_1 = require("./clientVpnRoute");
const clientVpnTargetNetworkAssociation_1 = require("./clientVpnTargetNetworkAssociation");
const customerGateway_1 = require("./customerGateway");
const dhcpoptions_1 = require("./dhcpoptions");
const ec2fleet_1 = require("./ec2fleet");
const eip_1 = require("./eip");
const eipassociation_1 = require("./eipassociation");
const egressOnlyInternetGateway_1 = require("./egressOnlyInternetGateway");
const enclaveCertificateIamRoleAssociation_1 = require("./enclaveCertificateIamRoleAssociation");
const flowLog_1 = require("./flowLog");
const gatewayRouteTableAssociation_1 = require("./gatewayRouteTableAssociation");
const host_1 = require("./host");
const instance_1 = require("./instance");
const internetGateway_1 = require("./internetGateway");
const launchTemplate_1 = require("./launchTemplate");
const localGatewayRoute_1 = require("./localGatewayRoute");
const localGatewayRouteTableVPCAssociation_1 = require("./localGatewayRouteTableVPCAssociation");
const natGateway_1 = require("./natGateway");
const networkAcl_1 = require("./networkAcl");
const networkAclEntry_1 = require("./networkAclEntry");
const networkInsightsAnalysis_1 = require("./networkInsightsAnalysis");
const networkInsightsPath_1 = require("./networkInsightsPath");
const networkInterface_1 = require("./networkInterface");
const networkInterfaceAttachment_1 = require("./networkInterfaceAttachment");
const networkInterfacePermission_1 = require("./networkInterfacePermission");
const placementGroup_1 = require("./placementGroup");
const prefixList_1 = require("./prefixList");
const route_1 = require("./route");
const routeTable_1 = require("./routeTable");
const securityGroup_1 = require("./securityGroup");
const securityGroupEgress_1 = require("./securityGroupEgress");
const securityGroupIngress_1 = require("./securityGroupIngress");
const spotFleet_1 = require("./spotFleet");
const subnet_1 = require("./subnet");
const subnetCidrBlock_1 = require("./subnetCidrBlock");
const subnetNetworkAclAssociation_1 = require("./subnetNetworkAclAssociation");
const subnetRouteTableAssociation_1 = require("./subnetRouteTableAssociation");
const trafficMirrorFilter_1 = require("./trafficMirrorFilter");
const trafficMirrorFilterRule_1 = require("./trafficMirrorFilterRule");
const trafficMirrorSession_1 = require("./trafficMirrorSession");
const trafficMirrorTarget_1 = require("./trafficMirrorTarget");
const transitGateway_1 = require("./transitGateway");
const transitGatewayAttachment_1 = require("./transitGatewayAttachment");
const transitGatewayConnect_1 = require("./transitGatewayConnect");
const transitGatewayMulticastDomain_1 = require("./transitGatewayMulticastDomain");
const transitGatewayMulticastDomainAssociation_1 = require("./transitGatewayMulticastDomainAssociation");
const transitGatewayMulticastGroupMember_1 = require("./transitGatewayMulticastGroupMember");
const transitGatewayMulticastGroupSource_1 = require("./transitGatewayMulticastGroupSource");
const transitGatewayPeeringAttachment_1 = require("./transitGatewayPeeringAttachment");
const transitGatewayRoute_1 = require("./transitGatewayRoute");
const transitGatewayRouteTable_1 = require("./transitGatewayRouteTable");
const transitGatewayRouteTableAssociation_1 = require("./transitGatewayRouteTableAssociation");
const transitGatewayRouteTablePropagation_1 = require("./transitGatewayRouteTablePropagation");
const transitGatewayVpcAttachment_1 = require("./transitGatewayVpcAttachment");
const vpc_1 = require("./vpc");
const vpccidrBlock_1 = require("./vpccidrBlock");
const vpcdhcpoptionsAssociation_1 = require("./vpcdhcpoptionsAssociation");
const vpcendpoint_1 = require("./vpcendpoint");
const vpcendpointConnectionNotification_1 = require("./vpcendpointConnectionNotification");
const vpcendpointService_1 = require("./vpcendpointService");
const vpcendpointServicePermissions_1 = require("./vpcendpointServicePermissions");
const vpcgatewayAttachment_1 = require("./vpcgatewayAttachment");
const vpcpeeringConnection_1 = require("./vpcpeeringConnection");
const vpnconnection_1 = require("./vpnconnection");
const vpnconnectionRoute_1 = require("./vpnconnectionRoute");
const vpngateway_1 = require("./vpngateway");
const vpngatewayRoutePropagation_1 = require("./vpngatewayRoutePropagation");
const volume_1 = require("./volume");
const volumeAttachment_1 = require("./volumeAttachment");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:ec2:CapacityReservation":
                return new capacityReservation_1.CapacityReservation(name, undefined, { urn });
            case "aws-native:ec2:CapacityReservationFleet":
                return new capacityReservationFleet_1.CapacityReservationFleet(name, undefined, { urn });
            case "aws-native:ec2:CarrierGateway":
                return new carrierGateway_1.CarrierGateway(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnAuthorizationRule":
                return new clientVpnAuthorizationRule_1.ClientVpnAuthorizationRule(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnEndpoint":
                return new clientVpnEndpoint_1.ClientVpnEndpoint(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnRoute":
                return new clientVpnRoute_1.ClientVpnRoute(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnTargetNetworkAssociation":
                return new clientVpnTargetNetworkAssociation_1.ClientVpnTargetNetworkAssociation(name, undefined, { urn });
            case "aws-native:ec2:CustomerGateway":
                return new customerGateway_1.CustomerGateway(name, undefined, { urn });
            case "aws-native:ec2:DHCPOptions":
                return new dhcpoptions_1.DHCPOptions(name, undefined, { urn });
            case "aws-native:ec2:EC2Fleet":
                return new ec2fleet_1.EC2Fleet(name, undefined, { urn });
            case "aws-native:ec2:EIP":
                return new eip_1.EIP(name, undefined, { urn });
            case "aws-native:ec2:EIPAssociation":
                return new eipassociation_1.EIPAssociation(name, undefined, { urn });
            case "aws-native:ec2:EgressOnlyInternetGateway":
                return new egressOnlyInternetGateway_1.EgressOnlyInternetGateway(name, undefined, { urn });
            case "aws-native:ec2:EnclaveCertificateIamRoleAssociation":
                return new enclaveCertificateIamRoleAssociation_1.EnclaveCertificateIamRoleAssociation(name, undefined, { urn });
            case "aws-native:ec2:FlowLog":
                return new flowLog_1.FlowLog(name, undefined, { urn });
            case "aws-native:ec2:GatewayRouteTableAssociation":
                return new gatewayRouteTableAssociation_1.GatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:Host":
                return new host_1.Host(name, undefined, { urn });
            case "aws-native:ec2:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "aws-native:ec2:InternetGateway":
                return new internetGateway_1.InternetGateway(name, undefined, { urn });
            case "aws-native:ec2:LaunchTemplate":
                return new launchTemplate_1.LaunchTemplate(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRoute":
                return new localGatewayRoute_1.LocalGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRouteTableVPCAssociation":
                return new localGatewayRouteTableVPCAssociation_1.LocalGatewayRouteTableVPCAssociation(name, undefined, { urn });
            case "aws-native:ec2:NatGateway":
                return new natGateway_1.NatGateway(name, undefined, { urn });
            case "aws-native:ec2:NetworkAcl":
                return new networkAcl_1.NetworkAcl(name, undefined, { urn });
            case "aws-native:ec2:NetworkAclEntry":
                return new networkAclEntry_1.NetworkAclEntry(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAnalysis":
                return new networkInsightsAnalysis_1.NetworkInsightsAnalysis(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsPath":
                return new networkInsightsPath_1.NetworkInsightsPath(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterfaceAttachment":
                return new networkInterfaceAttachment_1.NetworkInterfaceAttachment(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterfacePermission":
                return new networkInterfacePermission_1.NetworkInterfacePermission(name, undefined, { urn });
            case "aws-native:ec2:PlacementGroup":
                return new placementGroup_1.PlacementGroup(name, undefined, { urn });
            case "aws-native:ec2:PrefixList":
                return new prefixList_1.PrefixList(name, undefined, { urn });
            case "aws-native:ec2:Route":
                return new route_1.Route(name, undefined, { urn });
            case "aws-native:ec2:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupEgress":
                return new securityGroupEgress_1.SecurityGroupEgress(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupIngress":
                return new securityGroupIngress_1.SecurityGroupIngress(name, undefined, { urn });
            case "aws-native:ec2:SpotFleet":
                return new spotFleet_1.SpotFleet(name, undefined, { urn });
            case "aws-native:ec2:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "aws-native:ec2:SubnetCidrBlock":
                return new subnetCidrBlock_1.SubnetCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:SubnetNetworkAclAssociation":
                return new subnetNetworkAclAssociation_1.SubnetNetworkAclAssociation(name, undefined, { urn });
            case "aws-native:ec2:SubnetRouteTableAssociation":
                return new subnetRouteTableAssociation_1.SubnetRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorFilter":
                return new trafficMirrorFilter_1.TrafficMirrorFilter(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorFilterRule":
                return new trafficMirrorFilterRule_1.TrafficMirrorFilterRule(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorSession":
                return new trafficMirrorSession_1.TrafficMirrorSession(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorTarget":
                return new trafficMirrorTarget_1.TrafficMirrorTarget(name, undefined, { urn });
            case "aws-native:ec2:TransitGateway":
                return new transitGateway_1.TransitGateway(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayAttachment":
                return new transitGatewayAttachment_1.TransitGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayConnect":
                return new transitGatewayConnect_1.TransitGatewayConnect(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomain":
                return new transitGatewayMulticastDomain_1.TransitGatewayMulticastDomain(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomainAssociation":
                return new transitGatewayMulticastDomainAssociation_1.TransitGatewayMulticastDomainAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupMember":
                return new transitGatewayMulticastGroupMember_1.TransitGatewayMulticastGroupMember(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupSource":
                return new transitGatewayMulticastGroupSource_1.TransitGatewayMulticastGroupSource(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayPeeringAttachment":
                return new transitGatewayPeeringAttachment_1.TransitGatewayPeeringAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRoute":
                return new transitGatewayRoute_1.TransitGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTable":
                return new transitGatewayRouteTable_1.TransitGatewayRouteTable(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTableAssociation":
                return new transitGatewayRouteTableAssociation_1.TransitGatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTablePropagation":
                return new transitGatewayRouteTablePropagation_1.TransitGatewayRouteTablePropagation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayVpcAttachment":
                return new transitGatewayVpcAttachment_1.TransitGatewayVpcAttachment(name, undefined, { urn });
            case "aws-native:ec2:VPC":
                return new vpc_1.VPC(name, undefined, { urn });
            case "aws-native:ec2:VPCCidrBlock":
                return new vpccidrBlock_1.VPCCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:VPCDHCPOptionsAssociation":
                return new vpcdhcpoptionsAssociation_1.VPCDHCPOptionsAssociation(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpoint":
                return new vpcendpoint_1.VPCEndpoint(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointConnectionNotification":
                return new vpcendpointConnectionNotification_1.VPCEndpointConnectionNotification(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointService":
                return new vpcendpointService_1.VPCEndpointService(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointServicePermissions":
                return new vpcendpointServicePermissions_1.VPCEndpointServicePermissions(name, undefined, { urn });
            case "aws-native:ec2:VPCGatewayAttachment":
                return new vpcgatewayAttachment_1.VPCGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:VPCPeeringConnection":
                return new vpcpeeringConnection_1.VPCPeeringConnection(name, undefined, { urn });
            case "aws-native:ec2:VPNConnection":
                return new vpnconnection_1.VPNConnection(name, undefined, { urn });
            case "aws-native:ec2:VPNConnectionRoute":
                return new vpnconnectionRoute_1.VPNConnectionRoute(name, undefined, { urn });
            case "aws-native:ec2:VPNGateway":
                return new vpngateway_1.VPNGateway(name, undefined, { urn });
            case "aws-native:ec2:VPNGatewayRoutePropagation":
                return new vpngatewayRoutePropagation_1.VPNGatewayRoutePropagation(name, undefined, { urn });
            case "aws-native:ec2:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            case "aws-native:ec2:VolumeAttachment":
                return new volumeAttachment_1.VolumeAttachment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ec2", _module);
//# sourceMappingURL=index.js.map