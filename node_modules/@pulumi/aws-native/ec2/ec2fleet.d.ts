import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource Type definition for AWS::EC2::EC2Fleet
 */
export declare class EC2Fleet extends pulumi.CustomResource {
    /**
     * Get an existing EC2Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EC2Fleet;
    /**
     * Returns true if the given object is an instance of EC2Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EC2Fleet;
    readonly context: pulumi.Output<string | undefined>;
    readonly excessCapacityTerminationPolicy: pulumi.Output<enums.ec2.EC2FleetExcessCapacityTerminationPolicy | undefined>;
    readonly fleetId: pulumi.Output<string>;
    readonly launchTemplateConfigs: pulumi.Output<outputs.ec2.EC2FleetFleetLaunchTemplateConfigRequest[]>;
    readonly onDemandOptions: pulumi.Output<outputs.ec2.EC2FleetOnDemandOptionsRequest | undefined>;
    readonly replaceUnhealthyInstances: pulumi.Output<boolean | undefined>;
    readonly spotOptions: pulumi.Output<outputs.ec2.EC2FleetSpotOptionsRequest | undefined>;
    readonly tagSpecifications: pulumi.Output<outputs.ec2.EC2FleetTagSpecification[] | undefined>;
    readonly targetCapacitySpecification: pulumi.Output<outputs.ec2.EC2FleetTargetCapacitySpecificationRequest>;
    readonly terminateInstancesWithExpiration: pulumi.Output<boolean | undefined>;
    readonly type: pulumi.Output<enums.ec2.EC2FleetType | undefined>;
    readonly validFrom: pulumi.Output<string | undefined>;
    readonly validUntil: pulumi.Output<string | undefined>;
    /**
     * Create a EC2Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EC2FleetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a EC2Fleet resource.
 */
export interface EC2FleetArgs {
    context?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<enums.ec2.EC2FleetExcessCapacityTerminationPolicy>;
    launchTemplateConfigs: pulumi.Input<pulumi.Input<inputs.ec2.EC2FleetFleetLaunchTemplateConfigRequestArgs>[]>;
    onDemandOptions?: pulumi.Input<inputs.ec2.EC2FleetOnDemandOptionsRequestArgs>;
    replaceUnhealthyInstances?: pulumi.Input<boolean>;
    spotOptions?: pulumi.Input<inputs.ec2.EC2FleetSpotOptionsRequestArgs>;
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.ec2.EC2FleetTagSpecificationArgs>[]>;
    targetCapacitySpecification: pulumi.Input<inputs.ec2.EC2FleetTargetCapacitySpecificationRequestArgs>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    type?: pulumi.Input<enums.ec2.EC2FleetType>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}
