"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefixList = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema of AWS::EC2::PrefixList Type
 */
class PrefixList extends pulumi.CustomResource {
    /**
     * Create a PrefixList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.addressFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressFamily'");
            }
            if ((!args || args.maxEntries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxEntries'");
            }
            inputs["addressFamily"] = args ? args.addressFamily : undefined;
            inputs["entries"] = args ? args.entries : undefined;
            inputs["maxEntries"] = args ? args.maxEntries : undefined;
            inputs["prefixListName"] = args ? args.prefixListName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["prefixListId"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        else {
            inputs["addressFamily"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["entries"] = undefined /*out*/;
            inputs["maxEntries"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["prefixListId"] = undefined /*out*/;
            inputs["prefixListName"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(PrefixList.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing PrefixList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new PrefixList(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PrefixList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrefixList.__pulumiType;
    }
}
exports.PrefixList = PrefixList;
/** @internal */
PrefixList.__pulumiType = 'aws-native:ec2:PrefixList';
//# sourceMappingURL=prefixList.js.map