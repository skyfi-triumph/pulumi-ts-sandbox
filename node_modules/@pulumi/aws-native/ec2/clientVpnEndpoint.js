"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientVpnEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::EC2::ClientVpnEndpoint
 *
 * @deprecated ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
class ClientVpnEndpoint extends pulumi.CustomResource {
    /**
     * Create a ClientVpnEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name, args, opts) {
        pulumi.log.warn("ClientVpnEndpoint is deprecated: ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.authenticationOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationOptions'");
            }
            if ((!args || args.clientCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientCidrBlock'");
            }
            if ((!args || args.connectionLogOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionLogOptions'");
            }
            if ((!args || args.serverCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverCertificateArn'");
            }
            inputs["authenticationOptions"] = args ? args.authenticationOptions : undefined;
            inputs["clientCidrBlock"] = args ? args.clientCidrBlock : undefined;
            inputs["clientConnectOptions"] = args ? args.clientConnectOptions : undefined;
            inputs["connectionLogOptions"] = args ? args.connectionLogOptions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsServers"] = args ? args.dnsServers : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["selfServicePortal"] = args ? args.selfServicePortal : undefined;
            inputs["serverCertificateArn"] = args ? args.serverCertificateArn : undefined;
            inputs["splitTunnel"] = args ? args.splitTunnel : undefined;
            inputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
            inputs["transportProtocol"] = args ? args.transportProtocol : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["vpnPort"] = args ? args.vpnPort : undefined;
        }
        else {
            inputs["authenticationOptions"] = undefined /*out*/;
            inputs["clientCidrBlock"] = undefined /*out*/;
            inputs["clientConnectOptions"] = undefined /*out*/;
            inputs["connectionLogOptions"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["dnsServers"] = undefined /*out*/;
            inputs["securityGroupIds"] = undefined /*out*/;
            inputs["selfServicePortal"] = undefined /*out*/;
            inputs["serverCertificateArn"] = undefined /*out*/;
            inputs["splitTunnel"] = undefined /*out*/;
            inputs["tagSpecifications"] = undefined /*out*/;
            inputs["transportProtocol"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
            inputs["vpnPort"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ClientVpnEndpoint.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ClientVpnEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        pulumi.log.warn("ClientVpnEndpoint is deprecated: ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        return new ClientVpnEndpoint(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClientVpnEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientVpnEndpoint.__pulumiType;
    }
}
exports.ClientVpnEndpoint = ClientVpnEndpoint;
/** @internal */
ClientVpnEndpoint.__pulumiType = 'aws-native:ec2:ClientVpnEndpoint';
//# sourceMappingURL=clientVpnEndpoint.js.map