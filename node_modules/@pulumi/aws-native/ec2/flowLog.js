"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowLog = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Specifies a VPC flow log, which enables you to capture IP traffic for a specific network interface, subnet, or VPC.
 */
class FlowLog extends pulumi.CustomResource {
    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.trafficType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficType'");
            }
            inputs["deliverLogsPermissionArn"] = args ? args.deliverLogsPermissionArn : undefined;
            inputs["logDestination"] = args ? args.logDestination : undefined;
            inputs["logDestinationType"] = args ? args.logDestinationType : undefined;
            inputs["logFormat"] = args ? args.logFormat : undefined;
            inputs["logGroupName"] = args ? args.logGroupName : undefined;
            inputs["maxAggregationInterval"] = args ? args.maxAggregationInterval : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["resourceType"] = args ? args.resourceType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["trafficType"] = args ? args.trafficType : undefined;
        }
        else {
            inputs["deliverLogsPermissionArn"] = undefined /*out*/;
            inputs["logDestination"] = undefined /*out*/;
            inputs["logDestinationType"] = undefined /*out*/;
            inputs["logFormat"] = undefined /*out*/;
            inputs["logGroupName"] = undefined /*out*/;
            inputs["maxAggregationInterval"] = undefined /*out*/;
            inputs["resourceId"] = undefined /*out*/;
            inputs["resourceType"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["trafficType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(FlowLog.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new FlowLog(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }
}
exports.FlowLog = FlowLog;
/** @internal */
FlowLog.__pulumiType = 'aws-native:ec2:FlowLog';
//# sourceMappingURL=flowLog.js.map