import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::DAX::Cluster
 *
 * @deprecated Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster;
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Cluster;
    readonly arn: pulumi.Output<string>;
    readonly availabilityZones: pulumi.Output<string[] | undefined>;
    readonly clusterDiscoveryEndpoint: pulumi.Output<string>;
    readonly clusterDiscoveryEndpointURL: pulumi.Output<string>;
    readonly clusterEndpointEncryptionType: pulumi.Output<string | undefined>;
    readonly clusterName: pulumi.Output<string | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly iAMRoleARN: pulumi.Output<string>;
    readonly nodeType: pulumi.Output<string>;
    readonly notificationTopicARN: pulumi.Output<string | undefined>;
    readonly parameterGroupName: pulumi.Output<string | undefined>;
    readonly preferredMaintenanceWindow: pulumi.Output<string | undefined>;
    readonly replicationFactor: pulumi.Output<number>;
    readonly sSESpecification: pulumi.Output<outputs.dax.ClusterSSESpecification | undefined>;
    readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    readonly subnetGroupName: pulumi.Output<string | undefined>;
    readonly tags: pulumi.Output<any | undefined>;
    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    clusterEndpointEncryptionType?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    iAMRoleARN: pulumi.Input<string>;
    nodeType: pulumi.Input<string>;
    notificationTopicARN?: pulumi.Input<string>;
    parameterGroupName?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    replicationFactor: pulumi.Input<number>;
    sSESpecification?: pulumi.Input<inputs.dax.ClusterSSESpecificationArgs>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetGroupName?: pulumi.Input<string>;
    tags?: any;
}
