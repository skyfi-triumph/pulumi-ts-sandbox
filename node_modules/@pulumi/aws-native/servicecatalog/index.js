"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./acceptedPortfolioShare"), exports);
__exportStar(require("./cloudFormationProduct"), exports);
__exportStar(require("./cloudFormationProvisionedProduct"), exports);
__exportStar(require("./launchNotificationConstraint"), exports);
__exportStar(require("./launchRoleConstraint"), exports);
__exportStar(require("./launchTemplateConstraint"), exports);
__exportStar(require("./portfolio"), exports);
__exportStar(require("./portfolioPrincipalAssociation"), exports);
__exportStar(require("./portfolioProductAssociation"), exports);
__exportStar(require("./portfolioShare"), exports);
__exportStar(require("./resourceUpdateConstraint"), exports);
__exportStar(require("./serviceAction"), exports);
__exportStar(require("./serviceActionAssociation"), exports);
__exportStar(require("./stackSetConstraint"), exports);
__exportStar(require("./tagOption"), exports);
__exportStar(require("./tagOptionAssociation"), exports);
// Export enums:
__exportStar(require("../types/enums/servicecatalog"), exports);
// Import resources to register:
const acceptedPortfolioShare_1 = require("./acceptedPortfolioShare");
const cloudFormationProduct_1 = require("./cloudFormationProduct");
const cloudFormationProvisionedProduct_1 = require("./cloudFormationProvisionedProduct");
const launchNotificationConstraint_1 = require("./launchNotificationConstraint");
const launchRoleConstraint_1 = require("./launchRoleConstraint");
const launchTemplateConstraint_1 = require("./launchTemplateConstraint");
const portfolio_1 = require("./portfolio");
const portfolioPrincipalAssociation_1 = require("./portfolioPrincipalAssociation");
const portfolioProductAssociation_1 = require("./portfolioProductAssociation");
const portfolioShare_1 = require("./portfolioShare");
const resourceUpdateConstraint_1 = require("./resourceUpdateConstraint");
const serviceAction_1 = require("./serviceAction");
const serviceActionAssociation_1 = require("./serviceActionAssociation");
const stackSetConstraint_1 = require("./stackSetConstraint");
const tagOption_1 = require("./tagOption");
const tagOptionAssociation_1 = require("./tagOptionAssociation");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:servicecatalog:AcceptedPortfolioShare":
                return new acceptedPortfolioShare_1.AcceptedPortfolioShare(name, undefined, { urn });
            case "aws-native:servicecatalog:CloudFormationProduct":
                return new cloudFormationProduct_1.CloudFormationProduct(name, undefined, { urn });
            case "aws-native:servicecatalog:CloudFormationProvisionedProduct":
                return new cloudFormationProvisionedProduct_1.CloudFormationProvisionedProduct(name, undefined, { urn });
            case "aws-native:servicecatalog:LaunchNotificationConstraint":
                return new launchNotificationConstraint_1.LaunchNotificationConstraint(name, undefined, { urn });
            case "aws-native:servicecatalog:LaunchRoleConstraint":
                return new launchRoleConstraint_1.LaunchRoleConstraint(name, undefined, { urn });
            case "aws-native:servicecatalog:LaunchTemplateConstraint":
                return new launchTemplateConstraint_1.LaunchTemplateConstraint(name, undefined, { urn });
            case "aws-native:servicecatalog:Portfolio":
                return new portfolio_1.Portfolio(name, undefined, { urn });
            case "aws-native:servicecatalog:PortfolioPrincipalAssociation":
                return new portfolioPrincipalAssociation_1.PortfolioPrincipalAssociation(name, undefined, { urn });
            case "aws-native:servicecatalog:PortfolioProductAssociation":
                return new portfolioProductAssociation_1.PortfolioProductAssociation(name, undefined, { urn });
            case "aws-native:servicecatalog:PortfolioShare":
                return new portfolioShare_1.PortfolioShare(name, undefined, { urn });
            case "aws-native:servicecatalog:ResourceUpdateConstraint":
                return new resourceUpdateConstraint_1.ResourceUpdateConstraint(name, undefined, { urn });
            case "aws-native:servicecatalog:ServiceAction":
                return new serviceAction_1.ServiceAction(name, undefined, { urn });
            case "aws-native:servicecatalog:ServiceActionAssociation":
                return new serviceActionAssociation_1.ServiceActionAssociation(name, undefined, { urn });
            case "aws-native:servicecatalog:StackSetConstraint":
                return new stackSetConstraint_1.StackSetConstraint(name, undefined, { urn });
            case "aws-native:servicecatalog:TagOption":
                return new tagOption_1.TagOption(name, undefined, { urn });
            case "aws-native:servicecatalog:TagOptionAssociation":
                return new tagOptionAssociation_1.TagOptionAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "servicecatalog", _module);
//# sourceMappingURL=index.js.map