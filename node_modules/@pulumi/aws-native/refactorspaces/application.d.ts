import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Definition of AWS::RefactorSpaces::Application Resource Type
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    readonly apiGatewayId: pulumi.Output<string>;
    readonly apiGatewayProxy: pulumi.Output<outputs.refactorspaces.ApplicationApiGatewayProxyInput | undefined>;
    readonly applicationIdentifier: pulumi.Output<string>;
    readonly arn: pulumi.Output<string>;
    readonly environmentIdentifier: pulumi.Output<string | undefined>;
    readonly name: pulumi.Output<string | undefined>;
    readonly nlbArn: pulumi.Output<string>;
    readonly nlbName: pulumi.Output<string>;
    readonly proxyType: pulumi.Output<enums.refactorspaces.ApplicationProxyType | undefined>;
    readonly proxyUrl: pulumi.Output<string>;
    readonly stageName: pulumi.Output<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    readonly tags: pulumi.Output<outputs.refactorspaces.ApplicationTag[] | undefined>;
    readonly vpcId: pulumi.Output<string | undefined>;
    readonly vpcLinkId: pulumi.Output<string>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    apiGatewayProxy?: pulumi.Input<inputs.refactorspaces.ApplicationApiGatewayProxyInputArgs>;
    environmentIdentifier?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    proxyType?: pulumi.Input<enums.refactorspaces.ApplicationProxyType>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.refactorspaces.ApplicationTagArgs>[]>;
    vpcId?: pulumi.Input<string>;
}
