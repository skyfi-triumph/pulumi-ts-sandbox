import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Definition of AWS::RefactorSpaces::Service Resource Type
 */
export declare class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service;
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Service;
    readonly applicationIdentifier: pulumi.Output<string>;
    readonly arn: pulumi.Output<string>;
    readonly description: pulumi.Output<string | undefined>;
    readonly endpointType: pulumi.Output<enums.refactorspaces.ServiceEndpointType | undefined>;
    readonly environmentIdentifier: pulumi.Output<string>;
    readonly lambdaEndpoint: pulumi.Output<outputs.refactorspaces.ServiceLambdaEndpointInput | undefined>;
    readonly name: pulumi.Output<string | undefined>;
    readonly serviceIdentifier: pulumi.Output<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    readonly tags: pulumi.Output<outputs.refactorspaces.ServiceTag[] | undefined>;
    readonly urlEndpoint: pulumi.Output<outputs.refactorspaces.ServiceUrlEndpointInput | undefined>;
    readonly vpcId: pulumi.Output<string | undefined>;
    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    applicationIdentifier: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endpointType?: pulumi.Input<enums.refactorspaces.ServiceEndpointType>;
    environmentIdentifier: pulumi.Input<string>;
    lambdaEndpoint?: pulumi.Input<inputs.refactorspaces.ServiceLambdaEndpointInputArgs>;
    name?: pulumi.Input<string>;
    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.refactorspaces.ServiceTagArgs>[]>;
    urlEndpoint?: pulumi.Input<inputs.refactorspaces.ServiceUrlEndpointInputArgs>;
    vpcId?: pulumi.Input<string>;
}
