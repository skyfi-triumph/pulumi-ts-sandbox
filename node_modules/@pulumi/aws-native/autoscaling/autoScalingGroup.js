"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoScalingGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::AutoScaling::AutoScalingGroup
 *
 * @deprecated AutoScalingGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
class AutoScalingGroup extends pulumi.CustomResource {
    /**
     * Create a AutoScalingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated AutoScalingGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name, args, opts) {
        pulumi.log.warn("AutoScalingGroup is deprecated: AutoScalingGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            inputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["capacityRebalance"] = args ? args.capacityRebalance : undefined;
            inputs["context"] = args ? args.context : undefined;
            inputs["cooldown"] = args ? args.cooldown : undefined;
            inputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            inputs["desiredCapacityType"] = args ? args.desiredCapacityType : undefined;
            inputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            inputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["launchConfigurationName"] = args ? args.launchConfigurationName : undefined;
            inputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            inputs["lifecycleHookSpecificationList"] = args ? args.lifecycleHookSpecificationList : undefined;
            inputs["loadBalancerNames"] = args ? args.loadBalancerNames : undefined;
            inputs["maxInstanceLifetime"] = args ? args.maxInstanceLifetime : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["metricsCollection"] = args ? args.metricsCollection : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["mixedInstancesPolicy"] = args ? args.mixedInstancesPolicy : undefined;
            inputs["newInstancesProtectedFromScaleIn"] = args ? args.newInstancesProtectedFromScaleIn : undefined;
            inputs["notificationConfigurations"] = args ? args.notificationConfigurations : undefined;
            inputs["placementGroup"] = args ? args.placementGroup : undefined;
            inputs["serviceLinkedRoleARN"] = args ? args.serviceLinkedRoleARN : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetGroupARNs"] = args ? args.targetGroupARNs : undefined;
            inputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            inputs["vPCZoneIdentifier"] = args ? args.vPCZoneIdentifier : undefined;
            inputs["launchTemplateSpecification"] = undefined /*out*/;
        }
        else {
            inputs["autoScalingGroupName"] = undefined /*out*/;
            inputs["availabilityZones"] = undefined /*out*/;
            inputs["capacityRebalance"] = undefined /*out*/;
            inputs["context"] = undefined /*out*/;
            inputs["cooldown"] = undefined /*out*/;
            inputs["desiredCapacity"] = undefined /*out*/;
            inputs["desiredCapacityType"] = undefined /*out*/;
            inputs["healthCheckGracePeriod"] = undefined /*out*/;
            inputs["healthCheckType"] = undefined /*out*/;
            inputs["instanceId"] = undefined /*out*/;
            inputs["launchConfigurationName"] = undefined /*out*/;
            inputs["launchTemplate"] = undefined /*out*/;
            inputs["launchTemplateSpecification"] = undefined /*out*/;
            inputs["lifecycleHookSpecificationList"] = undefined /*out*/;
            inputs["loadBalancerNames"] = undefined /*out*/;
            inputs["maxInstanceLifetime"] = undefined /*out*/;
            inputs["maxSize"] = undefined /*out*/;
            inputs["metricsCollection"] = undefined /*out*/;
            inputs["minSize"] = undefined /*out*/;
            inputs["mixedInstancesPolicy"] = undefined /*out*/;
            inputs["newInstancesProtectedFromScaleIn"] = undefined /*out*/;
            inputs["notificationConfigurations"] = undefined /*out*/;
            inputs["placementGroup"] = undefined /*out*/;
            inputs["serviceLinkedRoleARN"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["targetGroupARNs"] = undefined /*out*/;
            inputs["terminationPolicies"] = undefined /*out*/;
            inputs["vPCZoneIdentifier"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AutoScalingGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AutoScalingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        pulumi.log.warn("AutoScalingGroup is deprecated: AutoScalingGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        return new AutoScalingGroup(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AutoScalingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoScalingGroup.__pulumiType;
    }
}
exports.AutoScalingGroup = AutoScalingGroup;
/** @internal */
AutoScalingGroup.__pulumiType = 'aws-native:autoscaling:AutoScalingGroup';
//# sourceMappingURL=autoScalingGroup.js.map