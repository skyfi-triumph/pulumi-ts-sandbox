import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Resource Type definition for AWS::EKS::Nodegroup
 *
 * @deprecated Nodegroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export declare class Nodegroup extends pulumi.CustomResource {
    /**
     * Get an existing Nodegroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Nodegroup;
    /**
     * Returns true if the given object is an instance of Nodegroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Nodegroup;
    readonly amiType: pulumi.Output<string | undefined>;
    readonly arn: pulumi.Output<string>;
    readonly capacityType: pulumi.Output<string | undefined>;
    readonly clusterName: pulumi.Output<string>;
    readonly diskSize: pulumi.Output<number | undefined>;
    readonly forceUpdateEnabled: pulumi.Output<boolean | undefined>;
    readonly instanceTypes: pulumi.Output<string[] | undefined>;
    readonly labels: pulumi.Output<any | undefined>;
    readonly launchTemplate: pulumi.Output<outputs.eks.NodegroupLaunchTemplateSpecification | undefined>;
    readonly nodeRole: pulumi.Output<string>;
    readonly nodegroupName: pulumi.Output<string | undefined>;
    readonly releaseVersion: pulumi.Output<string | undefined>;
    readonly remoteAccess: pulumi.Output<outputs.eks.NodegroupRemoteAccess | undefined>;
    readonly scalingConfig: pulumi.Output<outputs.eks.NodegroupScalingConfig | undefined>;
    readonly subnets: pulumi.Output<string[]>;
    readonly tags: pulumi.Output<any | undefined>;
    readonly taints: pulumi.Output<outputs.eks.NodegroupTaint[] | undefined>;
    readonly updateConfig: pulumi.Output<outputs.eks.NodegroupUpdateConfig | undefined>;
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a Nodegroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Nodegroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: NodegroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Nodegroup resource.
 */
export interface NodegroupArgs {
    amiType?: pulumi.Input<string>;
    capacityType?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    forceUpdateEnabled?: pulumi.Input<boolean>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: any;
    launchTemplate?: pulumi.Input<inputs.eks.NodegroupLaunchTemplateSpecificationArgs>;
    nodeRole: pulumi.Input<string>;
    nodegroupName?: pulumi.Input<string>;
    releaseVersion?: pulumi.Input<string>;
    remoteAccess?: pulumi.Input<inputs.eks.NodegroupRemoteAccessArgs>;
    scalingConfig?: pulumi.Input<inputs.eks.NodegroupScalingConfigArgs>;
    subnets: pulumi.Input<pulumi.Input<string>[]>;
    tags?: any;
    taints?: pulumi.Input<pulumi.Input<inputs.eks.NodegroupTaintArgs>[]>;
    updateConfig?: pulumi.Input<inputs.eks.NodegroupUpdateConfigArgs>;
    version?: pulumi.Input<string>;
}
