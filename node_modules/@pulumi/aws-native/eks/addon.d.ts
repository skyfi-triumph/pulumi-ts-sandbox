import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource Schema for AWS::EKS::Addon
 */
export declare class Addon extends pulumi.CustomResource {
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Addon;
    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Addon;
    /**
     * Name of Addon
     */
    readonly addonName: pulumi.Output<string>;
    /**
     * Version of Addon
     */
    readonly addonVersion: pulumi.Output<string | undefined>;
    /**
     * Amazon Resource Name (ARN) of the add-on
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Name of Cluster
     */
    readonly clusterName: pulumi.Output<string>;
    /**
     * Resolve parameter value conflicts
     */
    readonly resolveConflicts: pulumi.Output<enums.eks.AddonResolveConflicts | undefined>;
    /**
     * IAM role to bind to the add-on's service account
     */
    readonly serviceAccountRoleArn: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.eks.AddonTag[] | undefined>;
    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Addon resource.
 */
export interface AddonArgs {
    /**
     * Name of Addon
     */
    addonName?: pulumi.Input<string>;
    /**
     * Version of Addon
     */
    addonVersion?: pulumi.Input<string>;
    /**
     * Name of Cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * Resolve parameter value conflicts
     */
    resolveConflicts?: pulumi.Input<enums.eks.AddonResolveConflicts>;
    /**
     * IAM role to bind to the add-on's service account
     */
    serviceAccountRoleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.eks.AddonTagArgs>[]>;
}
