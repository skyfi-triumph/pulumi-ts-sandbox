import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Resource schema for AWS::ImageBuilder::ImagePipeline
 */
export declare class ImagePipeline extends pulumi.CustomResource {
    /**
     * Get an existing ImagePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ImagePipeline;
    /**
     * Returns true if the given object is an instance of ImagePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ImagePipeline;
    /**
     * The Amazon Resource Name (ARN) of the image pipeline.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
     */
    readonly containerRecipeArn: pulumi.Output<string | undefined>;
    /**
     * The description of the image pipeline.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
     */
    readonly distributionConfigurationArn: pulumi.Output<string | undefined>;
    /**
     * Collects additional information about the image being created, including the operating system (OS) version and package list.
     */
    readonly enhancedImageMetadataEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
     */
    readonly imageRecipeArn: pulumi.Output<string | undefined>;
    /**
     * The image tests configuration of the image pipeline.
     */
    readonly imageTestsConfiguration: pulumi.Output<outputs.imagebuilder.ImagePipelineImageTestsConfiguration | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
     */
    readonly infrastructureConfigurationArn: pulumi.Output<string | undefined>;
    /**
     * The name of the image pipeline.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The schedule of the image pipeline.
     */
    readonly schedule: pulumi.Output<outputs.imagebuilder.ImagePipelineSchedule | undefined>;
    /**
     * The status of the image pipeline.
     */
    readonly status: pulumi.Output<enums.imagebuilder.ImagePipelineStatus | undefined>;
    /**
     * The tags of this image pipeline.
     */
    readonly tags: pulumi.Output<any | undefined>;
    /**
     * Create a ImagePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImagePipelineArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ImagePipeline resource.
 */
export interface ImagePipelineArgs {
    /**
     * The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
     */
    containerRecipeArn?: pulumi.Input<string>;
    /**
     * The description of the image pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
     */
    distributionConfigurationArn?: pulumi.Input<string>;
    /**
     * Collects additional information about the image being created, including the operating system (OS) version and package list.
     */
    enhancedImageMetadataEnabled?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
     */
    imageRecipeArn?: pulumi.Input<string>;
    /**
     * The image tests configuration of the image pipeline.
     */
    imageTestsConfiguration?: pulumi.Input<inputs.imagebuilder.ImagePipelineImageTestsConfigurationArgs>;
    /**
     * The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
     */
    infrastructureConfigurationArn?: pulumi.Input<string>;
    /**
     * The name of the image pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * The schedule of the image pipeline.
     */
    schedule?: pulumi.Input<inputs.imagebuilder.ImagePipelineScheduleArgs>;
    /**
     * The status of the image pipeline.
     */
    status?: pulumi.Input<enums.imagebuilder.ImagePipelineStatus>;
    /**
     * The tags of this image pipeline.
     */
    tags?: any;
}
