"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterParameterGroup"), exports);
__exportStar(require("./clusterSecurityGroup"), exports);
__exportStar(require("./clusterSecurityGroupIngress"), exports);
__exportStar(require("./clusterSubnetGroup"), exports);
__exportStar(require("./endpointAccess"), exports);
__exportStar(require("./endpointAuthorization"), exports);
__exportStar(require("./eventSubscription"), exports);
__exportStar(require("./scheduledAction"), exports);
// Export enums:
__exportStar(require("../types/enums/redshift"), exports);
// Import resources to register:
const cluster_1 = require("./cluster");
const clusterParameterGroup_1 = require("./clusterParameterGroup");
const clusterSecurityGroup_1 = require("./clusterSecurityGroup");
const clusterSecurityGroupIngress_1 = require("./clusterSecurityGroupIngress");
const clusterSubnetGroup_1 = require("./clusterSubnetGroup");
const endpointAccess_1 = require("./endpointAccess");
const endpointAuthorization_1 = require("./endpointAuthorization");
const eventSubscription_1 = require("./eventSubscription");
const scheduledAction_1 = require("./scheduledAction");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:redshift:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws-native:redshift:ClusterParameterGroup":
                return new clusterParameterGroup_1.ClusterParameterGroup(name, undefined, { urn });
            case "aws-native:redshift:ClusterSecurityGroup":
                return new clusterSecurityGroup_1.ClusterSecurityGroup(name, undefined, { urn });
            case "aws-native:redshift:ClusterSecurityGroupIngress":
                return new clusterSecurityGroupIngress_1.ClusterSecurityGroupIngress(name, undefined, { urn });
            case "aws-native:redshift:ClusterSubnetGroup":
                return new clusterSubnetGroup_1.ClusterSubnetGroup(name, undefined, { urn });
            case "aws-native:redshift:EndpointAccess":
                return new endpointAccess_1.EndpointAccess(name, undefined, { urn });
            case "aws-native:redshift:EndpointAuthorization":
                return new endpointAuthorization_1.EndpointAuthorization(name, undefined, { urn });
            case "aws-native:redshift:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws-native:redshift:ScheduledAction":
                return new scheduledAction_1.ScheduledAction(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "redshift", _module);
//# sourceMappingURL=index.js.map