import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
 */
export declare class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Domain;
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Domain;
    readonly appId: pulumi.Output<string>;
    readonly arn: pulumi.Output<string>;
    readonly autoSubDomainCreationPatterns: pulumi.Output<string[] | undefined>;
    readonly autoSubDomainIAMRole: pulumi.Output<string | undefined>;
    readonly certificateRecord: pulumi.Output<string>;
    readonly domainName: pulumi.Output<string>;
    readonly domainStatus: pulumi.Output<string>;
    readonly enableAutoSubDomain: pulumi.Output<boolean | undefined>;
    readonly statusReason: pulumi.Output<string>;
    readonly subDomainSettings: pulumi.Output<outputs.amplify.DomainSubDomainSetting[]>;
    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    appId: pulumi.Input<string>;
    autoSubDomainCreationPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    autoSubDomainIAMRole?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    enableAutoSubDomain?: pulumi.Input<boolean>;
    subDomainSettings: pulumi.Input<pulumi.Input<inputs.amplify.DomainSubDomainSettingArgs>[]>;
}
