import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
/**
 * Create and manage a Domain Configuration
 */
export declare class DomainConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DomainConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DomainConfiguration;
    /**
     * Returns true if the given object is an instance of DomainConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DomainConfiguration;
    readonly arn: pulumi.Output<string>;
    readonly authorizerConfig: pulumi.Output<outputs.iot.DomainConfigurationAuthorizerConfig | undefined>;
    readonly domainConfigurationName: pulumi.Output<string | undefined>;
    readonly domainConfigurationStatus: pulumi.Output<enums.iot.DomainConfigurationStatus | undefined>;
    readonly domainName: pulumi.Output<string | undefined>;
    readonly domainType: pulumi.Output<enums.iot.DomainConfigurationDomainType>;
    readonly serverCertificateArns: pulumi.Output<string[] | undefined>;
    readonly serverCertificates: pulumi.Output<outputs.iot.DomainConfigurationServerCertificateSummary[]>;
    readonly serviceType: pulumi.Output<enums.iot.DomainConfigurationServiceType | undefined>;
    readonly tags: pulumi.Output<outputs.iot.DomainConfigurationTag[] | undefined>;
    readonly validationCertificateArn: pulumi.Output<string | undefined>;
    /**
     * Create a DomainConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DomainConfiguration resource.
 */
export interface DomainConfigurationArgs {
    authorizerConfig?: pulumi.Input<inputs.iot.DomainConfigurationAuthorizerConfigArgs>;
    domainConfigurationName?: pulumi.Input<string>;
    domainConfigurationStatus?: pulumi.Input<enums.iot.DomainConfigurationStatus>;
    domainName?: pulumi.Input<string>;
    serverCertificateArns?: pulumi.Input<pulumi.Input<string>[]>;
    serviceType?: pulumi.Input<enums.iot.DomainConfigurationServiceType>;
    tags?: pulumi.Input<pulumi.Input<inputs.iot.DomainConfigurationTagArgs>[]>;
    validationCertificateArn?: pulumi.Input<string>;
}
