import * as pulumi from "@pulumi/pulumi";
import { enums } from "../types";
/**
 * Use the AWS::IoT::Certificate resource to declare an AWS IoT X.509 certificate.
 */
export declare class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate;
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Certificate;
    readonly arn: pulumi.Output<string>;
    readonly cACertificatePem: pulumi.Output<string | undefined>;
    readonly certificateMode: pulumi.Output<enums.iot.CertificateMode | undefined>;
    readonly certificatePem: pulumi.Output<string | undefined>;
    readonly certificateSigningRequest: pulumi.Output<string | undefined>;
    readonly status: pulumi.Output<enums.iot.CertificateStatus>;
    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    cACertificatePem?: pulumi.Input<string>;
    certificateMode?: pulumi.Input<enums.iot.CertificateMode>;
    certificatePem?: pulumi.Input<string>;
    certificateSigningRequest?: pulumi.Input<string>;
    status: pulumi.Input<enums.iot.CertificateStatus>;
}
