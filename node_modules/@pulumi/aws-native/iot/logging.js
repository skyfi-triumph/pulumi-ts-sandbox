"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logging = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Logging Options enable you to configure your IoT V2 logging role and default logging level so that you can monitor progress events logs as it passes from your devices through Iot core service.
 */
class Logging extends pulumi.CustomResource {
    /**
     * Create a Logging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.defaultLogLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultLogLevel'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["accountId"] = args ? args.accountId : undefined;
            inputs["defaultLogLevel"] = args ? args.defaultLogLevel : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
        }
        else {
            inputs["accountId"] = undefined /*out*/;
            inputs["defaultLogLevel"] = undefined /*out*/;
            inputs["roleArn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Logging.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Logging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Logging(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Logging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Logging.__pulumiType;
    }
}
exports.Logging = Logging;
/** @internal */
Logging.__pulumiType = 'aws-native:iot:Logging';
//# sourceMappingURL=logging.js.map