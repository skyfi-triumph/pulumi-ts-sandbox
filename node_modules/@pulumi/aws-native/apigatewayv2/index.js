"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./api"), exports);
__exportStar(require("./apiGatewayManagedOverrides"), exports);
__exportStar(require("./apiMapping"), exports);
__exportStar(require("./authorizer"), exports);
__exportStar(require("./deployment"), exports);
__exportStar(require("./domainName"), exports);
__exportStar(require("./integration"), exports);
__exportStar(require("./integrationResponse"), exports);
__exportStar(require("./model"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeResponse"), exports);
__exportStar(require("./stage"), exports);
__exportStar(require("./vpcLink"), exports);
// Import resources to register:
const api_1 = require("./api");
const apiGatewayManagedOverrides_1 = require("./apiGatewayManagedOverrides");
const apiMapping_1 = require("./apiMapping");
const authorizer_1 = require("./authorizer");
const deployment_1 = require("./deployment");
const domainName_1 = require("./domainName");
const integration_1 = require("./integration");
const integrationResponse_1 = require("./integrationResponse");
const model_1 = require("./model");
const route_1 = require("./route");
const routeResponse_1 = require("./routeResponse");
const stage_1 = require("./stage");
const vpcLink_1 = require("./vpcLink");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:apigatewayv2:Api":
                return new api_1.Api(name, undefined, { urn });
            case "aws-native:apigatewayv2:ApiGatewayManagedOverrides":
                return new apiGatewayManagedOverrides_1.ApiGatewayManagedOverrides(name, undefined, { urn });
            case "aws-native:apigatewayv2:ApiMapping":
                return new apiMapping_1.ApiMapping(name, undefined, { urn });
            case "aws-native:apigatewayv2:Authorizer":
                return new authorizer_1.Authorizer(name, undefined, { urn });
            case "aws-native:apigatewayv2:Deployment":
                return new deployment_1.Deployment(name, undefined, { urn });
            case "aws-native:apigatewayv2:DomainName":
                return new domainName_1.DomainName(name, undefined, { urn });
            case "aws-native:apigatewayv2:Integration":
                return new integration_1.Integration(name, undefined, { urn });
            case "aws-native:apigatewayv2:IntegrationResponse":
                return new integrationResponse_1.IntegrationResponse(name, undefined, { urn });
            case "aws-native:apigatewayv2:Model":
                return new model_1.Model(name, undefined, { urn });
            case "aws-native:apigatewayv2:Route":
                return new route_1.Route(name, undefined, { urn });
            case "aws-native:apigatewayv2:RouteResponse":
                return new routeResponse_1.RouteResponse(name, undefined, { urn });
            case "aws-native:apigatewayv2:Stage":
                return new stage_1.Stage(name, undefined, { urn });
            case "aws-native:apigatewayv2:VpcLink":
                return new vpcLink_1.VpcLink(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "apigatewayv2", _module);
//# sourceMappingURL=index.js.map